
nrf_transmitter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004790  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ac  08004930  08004930  00014930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004edc  08004edc  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  08004edc  08004edc  00014edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ee4  08004ee4  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ee4  08004ee4  00014ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ee8  08004ee8  00014ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08004eec  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000098  08004f84  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000208  08004f84  00020208  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a1a9  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001868  00000000  00000000  0002a271  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009b0  00000000  00000000  0002bae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008e8  00000000  00000000  0002c490  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015a50  00000000  00000000  0002cd78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000077c5  00000000  00000000  000427c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00085ef5  00000000  00000000  00049f8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cfe82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a5c  00000000  00000000  000cff00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000098 	.word	0x20000098
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004918 	.word	0x08004918

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000009c 	.word	0x2000009c
 80001dc:	08004918 	.word	0x08004918

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 800059c:	4b0a      	ldr	r3, [pc, #40]	; (80005c8 <NRF24_DelayMicroSeconds+0x38>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a0a      	ldr	r2, [pc, #40]	; (80005cc <NRF24_DelayMicroSeconds+0x3c>)
 80005a2:	fba2 2303 	umull	r2, r3, r2, r3
 80005a6:	0c9a      	lsrs	r2, r3, #18
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	fb02 f303 	mul.w	r3, r2, r3
 80005ae:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 80005b0:	bf00      	nop
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	1e5a      	subs	r2, r3, #1
 80005b6:	60fa      	str	r2, [r7, #12]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d1fa      	bne.n	80005b2 <NRF24_DelayMicroSeconds+0x22>
}
 80005bc:	bf00      	nop
 80005be:	3714      	adds	r7, #20
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr
 80005c8:	20000028 	.word	0x20000028
 80005cc:	165e9f81 	.word	0x165e9f81

080005d0 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d008      	beq.n	80005f0 <NRF24_csn+0x20>
 80005de:	4b0a      	ldr	r3, [pc, #40]	; (8000608 <NRF24_csn+0x38>)
 80005e0:	6818      	ldr	r0, [r3, #0]
 80005e2:	4b0a      	ldr	r3, [pc, #40]	; (800060c <NRF24_csn+0x3c>)
 80005e4:	881b      	ldrh	r3, [r3, #0]
 80005e6:	2201      	movs	r2, #1
 80005e8:	4619      	mov	r1, r3
 80005ea:	f001 feeb 	bl	80023c4 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 80005ee:	e007      	b.n	8000600 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 80005f0:	4b05      	ldr	r3, [pc, #20]	; (8000608 <NRF24_csn+0x38>)
 80005f2:	6818      	ldr	r0, [r3, #0]
 80005f4:	4b05      	ldr	r3, [pc, #20]	; (800060c <NRF24_csn+0x3c>)
 80005f6:	881b      	ldrh	r3, [r3, #0]
 80005f8:	2200      	movs	r2, #0
 80005fa:	4619      	mov	r1, r3
 80005fc:	f001 fee2 	bl	80023c4 <HAL_GPIO_WritePin>
}
 8000600:	bf00      	nop
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	200000bc 	.word	0x200000bc
 800060c:	200000c0 	.word	0x200000c0

08000610 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d008      	beq.n	8000630 <NRF24_ce+0x20>
 800061e:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <NRF24_ce+0x38>)
 8000620:	6818      	ldr	r0, [r3, #0]
 8000622:	4b0a      	ldr	r3, [pc, #40]	; (800064c <NRF24_ce+0x3c>)
 8000624:	881b      	ldrh	r3, [r3, #0]
 8000626:	2201      	movs	r2, #1
 8000628:	4619      	mov	r1, r3
 800062a:	f001 fecb 	bl	80023c4 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 800062e:	e007      	b.n	8000640 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000630:	4b05      	ldr	r3, [pc, #20]	; (8000648 <NRF24_ce+0x38>)
 8000632:	6818      	ldr	r0, [r3, #0]
 8000634:	4b05      	ldr	r3, [pc, #20]	; (800064c <NRF24_ce+0x3c>)
 8000636:	881b      	ldrh	r3, [r3, #0]
 8000638:	2200      	movs	r2, #0
 800063a:	4619      	mov	r1, r3
 800063c:	f001 fec2 	bl	80023c4 <HAL_GPIO_WritePin>
}
 8000640:	bf00      	nop
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	200000bc 	.word	0x200000bc
 800064c:	200000c2 	.word	0x200000c2

08000650 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 800065a:	2000      	movs	r0, #0
 800065c:	f7ff ffb8 	bl	80005d0 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	f003 031f 	and.w	r3, r3, #31
 8000666:	b2db      	uxtb	r3, r3
 8000668:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800066a:	f107 010c 	add.w	r1, r7, #12
 800066e:	2364      	movs	r3, #100	; 0x64
 8000670:	2201      	movs	r2, #1
 8000672:	480a      	ldr	r0, [pc, #40]	; (800069c <NRF24_read_register+0x4c>)
 8000674:	f002 fb7a 	bl	8002d6c <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	1c59      	adds	r1, r3, #1
 800067e:	2364      	movs	r3, #100	; 0x64
 8000680:	2201      	movs	r2, #1
 8000682:	4806      	ldr	r0, [pc, #24]	; (800069c <NRF24_read_register+0x4c>)
 8000684:	f002 fca6 	bl	8002fd4 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8000688:	7b7b      	ldrb	r3, [r7, #13]
 800068a:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 800068c:	2001      	movs	r0, #1
 800068e:	f7ff ff9f 	bl	80005d0 <NRF24_csn>
	return retData;
 8000692:	7bfb      	ldrb	r3, [r7, #15]
}
 8000694:	4618      	mov	r0, r3
 8000696:	3710      	adds	r7, #16
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	200000c4 	.word	0x200000c4

080006a0 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	6039      	str	r1, [r7, #0]
 80006aa:	71fb      	strb	r3, [r7, #7]
 80006ac:	4613      	mov	r3, r2
 80006ae:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80006b0:	2000      	movs	r0, #0
 80006b2:	f7ff ff8d 	bl	80005d0 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	f003 031f 	and.w	r3, r3, #31
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80006c0:	f107 010c 	add.w	r1, r7, #12
 80006c4:	2364      	movs	r3, #100	; 0x64
 80006c6:	2201      	movs	r2, #1
 80006c8:	4808      	ldr	r0, [pc, #32]	; (80006ec <NRF24_read_registerN+0x4c>)
 80006ca:	f002 fb4f 	bl	8002d6c <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 80006ce:	79bb      	ldrb	r3, [r7, #6]
 80006d0:	b29a      	uxth	r2, r3
 80006d2:	2364      	movs	r3, #100	; 0x64
 80006d4:	6839      	ldr	r1, [r7, #0]
 80006d6:	4805      	ldr	r0, [pc, #20]	; (80006ec <NRF24_read_registerN+0x4c>)
 80006d8:	f002 fc7c 	bl	8002fd4 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 80006dc:	2001      	movs	r0, #1
 80006de:	f7ff ff77 	bl	80005d0 <NRF24_csn>
}
 80006e2:	bf00      	nop
 80006e4:	3710      	adds	r7, #16
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	200000c4 	.word	0x200000c4

080006f0 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	460a      	mov	r2, r1
 80006fa:	71fb      	strb	r3, [r7, #7]
 80006fc:	4613      	mov	r3, r2
 80006fe:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000700:	2000      	movs	r0, #0
 8000702:	f7ff ff65 	bl	80005d0 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	f043 0320 	orr.w	r3, r3, #32
 800070c:	b2db      	uxtb	r3, r3
 800070e:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8000710:	79bb      	ldrb	r3, [r7, #6]
 8000712:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000714:	f107 010c 	add.w	r1, r7, #12
 8000718:	2364      	movs	r3, #100	; 0x64
 800071a:	2202      	movs	r2, #2
 800071c:	4804      	ldr	r0, [pc, #16]	; (8000730 <NRF24_write_register+0x40>)
 800071e:	f002 fb25 	bl	8002d6c <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000722:	2001      	movs	r0, #1
 8000724:	f7ff ff54 	bl	80005d0 <NRF24_csn>
}
 8000728:	bf00      	nop
 800072a:	3710      	adds	r7, #16
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	200000c4 	.word	0x200000c4

08000734 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	6039      	str	r1, [r7, #0]
 800073e:	71fb      	strb	r3, [r7, #7]
 8000740:	4613      	mov	r3, r2
 8000742:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000744:	2000      	movs	r0, #0
 8000746:	f7ff ff43 	bl	80005d0 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	f043 0320 	orr.w	r3, r3, #32
 8000750:	b2db      	uxtb	r3, r3
 8000752:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000754:	f107 010c 	add.w	r1, r7, #12
 8000758:	2364      	movs	r3, #100	; 0x64
 800075a:	2201      	movs	r2, #1
 800075c:	4808      	ldr	r0, [pc, #32]	; (8000780 <NRF24_write_registerN+0x4c>)
 800075e:	f002 fb05 	bl	8002d6c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000762:	79bb      	ldrb	r3, [r7, #6]
 8000764:	b29a      	uxth	r2, r3
 8000766:	2364      	movs	r3, #100	; 0x64
 8000768:	6839      	ldr	r1, [r7, #0]
 800076a:	4805      	ldr	r0, [pc, #20]	; (8000780 <NRF24_write_registerN+0x4c>)
 800076c:	f002 fafe 	bl	8002d6c <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000770:	2001      	movs	r0, #1
 8000772:	f7ff ff2d 	bl	80005d0 <NRF24_csn>
}
 8000776:	bf00      	nop
 8000778:	3710      	adds	r7, #16
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	200000c4 	.word	0x200000c4

08000784 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	460b      	mov	r3, r1
 800078e:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 8000790:	2000      	movs	r0, #0
 8000792:	f7ff ff1d 	bl	80005d0 <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 8000796:	23a0      	movs	r3, #160	; 0xa0
 8000798:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 800079a:	f107 010f 	add.w	r1, r7, #15
 800079e:	2364      	movs	r3, #100	; 0x64
 80007a0:	2201      	movs	r2, #1
 80007a2:	4808      	ldr	r0, [pc, #32]	; (80007c4 <NRF24_write_payload+0x40>)
 80007a4:	f002 fae2 	bl	8002d6c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 80007a8:	78fb      	ldrb	r3, [r7, #3]
 80007aa:	b29a      	uxth	r2, r3
 80007ac:	2364      	movs	r3, #100	; 0x64
 80007ae:	6879      	ldr	r1, [r7, #4]
 80007b0:	4804      	ldr	r0, [pc, #16]	; (80007c4 <NRF24_write_payload+0x40>)
 80007b2:	f002 fadb 	bl	8002d6c <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80007b6:	2001      	movs	r0, #1
 80007b8:	f7ff ff0a 	bl	80005d0 <NRF24_csn>
}
 80007bc:	bf00      	nop
 80007be:	3710      	adds	r7, #16
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	200000c4 	.word	0x200000c4

080007c8 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 80007cc:	21ff      	movs	r1, #255	; 0xff
 80007ce:	20e1      	movs	r0, #225	; 0xe1
 80007d0:	f7ff ff8e 	bl	80006f0 <NRF24_write_register>
}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 80007dc:	21ff      	movs	r1, #255	; 0xff
 80007de:	20e2      	movs	r0, #226	; 0xe2
 80007e0:	f7ff ff86 	bl	80006f0 <NRF24_write_register>
}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 80007ee:	2007      	movs	r0, #7
 80007f0:	f7ff ff2e 	bl	8000650 <NRF24_read_register>
 80007f4:	4603      	mov	r3, r0
 80007f6:	71fb      	strb	r3, [r7, #7]
	return statReg;
 80007f8:	79fb      	ldrb	r3, [r7, #7]
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
	...

08000804 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000804:	b082      	sub	sp, #8
 8000806:	b580      	push	{r7, lr}
 8000808:	b084      	sub	sp, #16
 800080a:	af00      	add	r7, sp, #0
 800080c:	6078      	str	r0, [r7, #4]
 800080e:	61fb      	str	r3, [r7, #28]
 8000810:	460b      	mov	r3, r1
 8000812:	807b      	strh	r3, [r7, #2]
 8000814:	4613      	mov	r3, r2
 8000816:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000818:	4b66      	ldr	r3, [pc, #408]	; (80009b4 <NRF24_begin+0x1b0>)
 800081a:	4618      	mov	r0, r3
 800081c:	f107 031c 	add.w	r3, r7, #28
 8000820:	2258      	movs	r2, #88	; 0x58
 8000822:	4619      	mov	r1, r3
 8000824:	f003 fc68 	bl	80040f8 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000828:	4a63      	ldr	r2, [pc, #396]	; (80009b8 <NRF24_begin+0x1b4>)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 800082e:	4a63      	ldr	r2, [pc, #396]	; (80009bc <NRF24_begin+0x1b8>)
 8000830:	887b      	ldrh	r3, [r7, #2]
 8000832:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000834:	4a62      	ldr	r2, [pc, #392]	; (80009c0 <NRF24_begin+0x1bc>)
 8000836:	883b      	ldrh	r3, [r7, #0]
 8000838:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 800083a:	2001      	movs	r0, #1
 800083c:	f7ff fec8 	bl	80005d0 <NRF24_csn>
	NRF24_ce(0);
 8000840:	2000      	movs	r0, #0
 8000842:	f7ff fee5 	bl	8000610 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000846:	2005      	movs	r0, #5
 8000848:	f001 fb32 	bl	8001eb0 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 800084c:	2108      	movs	r1, #8
 800084e:	2000      	movs	r0, #0
 8000850:	f7ff ff4e 	bl	80006f0 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000854:	213f      	movs	r1, #63	; 0x3f
 8000856:	2001      	movs	r0, #1
 8000858:	f7ff ff4a 	bl	80006f0 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 800085c:	2103      	movs	r1, #3
 800085e:	2002      	movs	r0, #2
 8000860:	f7ff ff46 	bl	80006f0 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000864:	2103      	movs	r1, #3
 8000866:	2003      	movs	r0, #3
 8000868:	f7ff ff42 	bl	80006f0 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 800086c:	2103      	movs	r1, #3
 800086e:	2004      	movs	r0, #4
 8000870:	f7ff ff3e 	bl	80006f0 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000874:	2102      	movs	r1, #2
 8000876:	2005      	movs	r0, #5
 8000878:	f7ff ff3a 	bl	80006f0 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 800087c:	210f      	movs	r1, #15
 800087e:	2006      	movs	r0, #6
 8000880:	f7ff ff36 	bl	80006f0 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000884:	210e      	movs	r1, #14
 8000886:	2007      	movs	r0, #7
 8000888:	f7ff ff32 	bl	80006f0 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 800088c:	2100      	movs	r1, #0
 800088e:	2008      	movs	r0, #8
 8000890:	f7ff ff2e 	bl	80006f0 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000894:	2100      	movs	r1, #0
 8000896:	2009      	movs	r0, #9
 8000898:	f7ff ff2a 	bl	80006f0 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 800089c:	23e7      	movs	r3, #231	; 0xe7
 800089e:	733b      	strb	r3, [r7, #12]
 80008a0:	23e7      	movs	r3, #231	; 0xe7
 80008a2:	72fb      	strb	r3, [r7, #11]
 80008a4:	23e7      	movs	r3, #231	; 0xe7
 80008a6:	72bb      	strb	r3, [r7, #10]
 80008a8:	23e7      	movs	r3, #231	; 0xe7
 80008aa:	727b      	strb	r3, [r7, #9]
 80008ac:	23e7      	movs	r3, #231	; 0xe7
 80008ae:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 80008b0:	f107 0308 	add.w	r3, r7, #8
 80008b4:	2205      	movs	r2, #5
 80008b6:	4619      	mov	r1, r3
 80008b8:	200a      	movs	r0, #10
 80008ba:	f7ff ff3b 	bl	8000734 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 80008be:	23c2      	movs	r3, #194	; 0xc2
 80008c0:	733b      	strb	r3, [r7, #12]
 80008c2:	23c2      	movs	r3, #194	; 0xc2
 80008c4:	72fb      	strb	r3, [r7, #11]
 80008c6:	23c2      	movs	r3, #194	; 0xc2
 80008c8:	72bb      	strb	r3, [r7, #10]
 80008ca:	23c2      	movs	r3, #194	; 0xc2
 80008cc:	727b      	strb	r3, [r7, #9]
 80008ce:	23c2      	movs	r3, #194	; 0xc2
 80008d0:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 80008d2:	f107 0308 	add.w	r3, r7, #8
 80008d6:	2205      	movs	r2, #5
 80008d8:	4619      	mov	r1, r3
 80008da:	200b      	movs	r0, #11
 80008dc:	f7ff ff2a 	bl	8000734 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 80008e0:	21c3      	movs	r1, #195	; 0xc3
 80008e2:	200c      	movs	r0, #12
 80008e4:	f7ff ff04 	bl	80006f0 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 80008e8:	21c4      	movs	r1, #196	; 0xc4
 80008ea:	200d      	movs	r0, #13
 80008ec:	f7ff ff00 	bl	80006f0 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 80008f0:	21c5      	movs	r1, #197	; 0xc5
 80008f2:	200e      	movs	r0, #14
 80008f4:	f7ff fefc 	bl	80006f0 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 80008f8:	21c6      	movs	r1, #198	; 0xc6
 80008fa:	200f      	movs	r0, #15
 80008fc:	f7ff fef8 	bl	80006f0 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000900:	23e7      	movs	r3, #231	; 0xe7
 8000902:	733b      	strb	r3, [r7, #12]
 8000904:	23e7      	movs	r3, #231	; 0xe7
 8000906:	72fb      	strb	r3, [r7, #11]
 8000908:	23e7      	movs	r3, #231	; 0xe7
 800090a:	72bb      	strb	r3, [r7, #10]
 800090c:	23e7      	movs	r3, #231	; 0xe7
 800090e:	727b      	strb	r3, [r7, #9]
 8000910:	23e7      	movs	r3, #231	; 0xe7
 8000912:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000914:	f107 0308 	add.w	r3, r7, #8
 8000918:	2205      	movs	r2, #5
 800091a:	4619      	mov	r1, r3
 800091c:	2010      	movs	r0, #16
 800091e:	f7ff ff09 	bl	8000734 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000922:	2100      	movs	r1, #0
 8000924:	2011      	movs	r0, #17
 8000926:	f7ff fee3 	bl	80006f0 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 800092a:	2100      	movs	r1, #0
 800092c:	2012      	movs	r0, #18
 800092e:	f7ff fedf 	bl	80006f0 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000932:	2100      	movs	r1, #0
 8000934:	2013      	movs	r0, #19
 8000936:	f7ff fedb 	bl	80006f0 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 800093a:	2100      	movs	r1, #0
 800093c:	2014      	movs	r0, #20
 800093e:	f7ff fed7 	bl	80006f0 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000942:	2100      	movs	r1, #0
 8000944:	2015      	movs	r0, #21
 8000946:	f7ff fed3 	bl	80006f0 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 800094a:	2100      	movs	r1, #0
 800094c:	2016      	movs	r0, #22
 800094e:	f7ff fecf 	bl	80006f0 <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 8000952:	f000 fa89 	bl	8000e68 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000956:	2100      	movs	r1, #0
 8000958:	201c      	movs	r0, #28
 800095a:	f7ff fec9 	bl	80006f0 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 800095e:	2100      	movs	r1, #0
 8000960:	201d      	movs	r0, #29
 8000962:	f7ff fec5 	bl	80006f0 <NRF24_write_register>
	printRadioSettings();
 8000966:	f000 fa99 	bl	8000e9c <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 800096a:	210f      	movs	r1, #15
 800096c:	200f      	movs	r0, #15
 800096e:	f000 f8ad 	bl	8000acc <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000972:	2003      	movs	r0, #3
 8000974:	f000 f927 	bl	8000bc6 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000978:	2001      	movs	r0, #1
 800097a:	f000 f95d 	bl	8000c38 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 800097e:	2002      	movs	r0, #2
 8000980:	f000 f9a0 	bl	8000cc4 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000984:	f000 f8f2 	bl	8000b6c <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000988:	2020      	movs	r0, #32
 800098a:	f000 f8cf 	bl	8000b2c <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 800098e:	f000 fa62 	bl	8000e56 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8000992:	204c      	movs	r0, #76	; 0x4c
 8000994:	f000 f8b5 	bl	8000b02 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000998:	f7ff ff16 	bl	80007c8 <NRF24_flush_tx>
	NRF24_flush_rx();
 800099c:	f7ff ff1c 	bl	80007d8 <NRF24_flush_rx>
	
	NRF24_powerDown();
 80009a0:	f000 f9b8 	bl	8000d14 <NRF24_powerDown>
	
}
 80009a4:	bf00      	nop
 80009a6:	3710      	adds	r7, #16
 80009a8:	46bd      	mov	sp, r7
 80009aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80009ae:	b002      	add	sp, #8
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	200000c4 	.word	0x200000c4
 80009b8:	200000bc 	.word	0x200000bc
 80009bc:	200000c0 	.word	0x200000c0
 80009c0:	200000c2 	.word	0x200000c2

080009c4 <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 80009c8:	2000      	movs	r0, #0
 80009ca:	f7ff fe21 	bl	8000610 <NRF24_ce>
	NRF24_flush_tx();
 80009ce:	f7ff fefb 	bl	80007c8 <NRF24_flush_tx>
	NRF24_flush_rx();
 80009d2:	f7ff ff01 	bl	80007d8 <NRF24_flush_rx>
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
	...

080009dc <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b086      	sub	sp, #24
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	460b      	mov	r3, r1
 80009e6:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 80009e8:	f000 fa35 	bl	8000e56 <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 80009ec:	78fb      	ldrb	r3, [r7, #3]
 80009ee:	4619      	mov	r1, r3
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	f000 f9ce 	bl	8000d92 <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 80009f6:	f001 fa4f 	bl	8001e98 <HAL_GetTick>
 80009fa:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 80009fc:	230a      	movs	r3, #10
 80009fe:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 8000a00:	f107 030d 	add.w	r3, r7, #13
 8000a04:	2201      	movs	r2, #1
 8000a06:	4619      	mov	r1, r3
 8000a08:	2008      	movs	r0, #8
 8000a0a:	f7ff fe49 	bl	80006a0 <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 8000a0e:	f7ff feeb 	bl	80007e8 <NRF24_get_status>
 8000a12:	4603      	mov	r3, r0
 8000a14:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 8000a16:	7bfb      	ldrb	r3, [r7, #15]
 8000a18:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d107      	bne.n	8000a30 <NRF24_write+0x54>
 8000a20:	f001 fa3a 	bl	8001e98 <HAL_GetTick>
 8000a24:	4602      	mov	r2, r0
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	1ad3      	subs	r3, r2, r3
 8000a2a:	693a      	ldr	r2, [r7, #16]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d8e7      	bhi.n	8000a00 <NRF24_write+0x24>
	
//	printConfigReg();
//	printStatusReg();
	
	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 8000a30:	f107 010b 	add.w	r1, r7, #11
 8000a34:	f107 030c 	add.w	r3, r7, #12
 8000a38:	4a0c      	ldr	r2, [pc, #48]	; (8000a6c <NRF24_write+0x90>)
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f000 f9d8 	bl	8000df0 <NRF24_whatHappened>
	retStatus = tx_ok;
 8000a40:	7b3b      	ldrb	r3, [r7, #12]
 8000a42:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 8000a44:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <NRF24_write+0x90>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d005      	beq.n	8000a58 <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8000a4c:	f000 f886 	bl	8000b5c <NRF24_getDynamicPayloadSize>
 8000a50:	4603      	mov	r3, r0
 8000a52:	461a      	mov	r2, r3
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <NRF24_write+0x94>)
 8000a56:	701a      	strb	r2, [r3, #0]
	}
	
	//Power down
	NRF24_available();
 8000a58:	f000 f80c 	bl	8000a74 <NRF24_available>
	NRF24_flush_tx();
 8000a5c:	f7ff feb4 	bl	80007c8 <NRF24_flush_tx>
	return retStatus;
 8000a60:	7bbb      	ldrb	r3, [r7, #14]
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3718      	adds	r7, #24
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	200000b4 	.word	0x200000b4
 8000a70:	200000b5 	.word	0x200000b5

08000a74 <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f000 f95a 	bl	8000d32 <NRF24_availablePipe>
 8000a7e:	4603      	mov	r3, r0
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 8000a8e:	463b      	mov	r3, r7
 8000a90:	2205      	movs	r2, #5
 8000a92:	4619      	mov	r1, r3
 8000a94:	200a      	movs	r0, #10
 8000a96:	f7ff fe4d 	bl	8000734 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8000a9a:	463b      	mov	r3, r7
 8000a9c:	2205      	movs	r2, #5
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	2010      	movs	r0, #16
 8000aa2:	f7ff fe47 	bl	8000734 <NRF24_write_registerN>
	
	const uint8_t max_payload_size = 32;
 8000aa6:	2320      	movs	r3, #32
 8000aa8:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8000aaa:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <NRF24_openWritingPipe+0x44>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	7bfa      	ldrb	r2, [r7, #15]
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	bf28      	it	cs
 8000ab4:	4613      	movcs	r3, r2
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	4619      	mov	r1, r3
 8000aba:	2011      	movs	r0, #17
 8000abc:	f7ff fe18 	bl	80006f0 <NRF24_write_register>
}
 8000ac0:	bf00      	nop
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	200000b6 	.word	0x200000b6

08000acc <NRF24_setRetries>:
	}
	
}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	460a      	mov	r2, r1
 8000ad6:	71fb      	strb	r3, [r7, #7]
 8000ad8:	4613      	mov	r3, r2
 8000ada:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	011b      	lsls	r3, r3, #4
 8000ae0:	b25a      	sxtb	r2, r3
 8000ae2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000ae6:	f003 030f 	and.w	r3, r3, #15
 8000aea:	b25b      	sxtb	r3, r3
 8000aec:	4313      	orrs	r3, r2
 8000aee:	b25b      	sxtb	r3, r3
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	4619      	mov	r1, r3
 8000af4:	2004      	movs	r0, #4
 8000af6:	f7ff fdfb 	bl	80006f0 <NRF24_write_register>
}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b084      	sub	sp, #16
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	4603      	mov	r3, r0
 8000b0a:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000b0c:	237f      	movs	r3, #127	; 0x7f
 8000b0e:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000b10:	7bfa      	ldrb	r2, [r7, #15]
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	4293      	cmp	r3, r2
 8000b16:	bf28      	it	cs
 8000b18:	4613      	movcs	r3, r2
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	2005      	movs	r0, #5
 8000b20:	f7ff fde6 	bl	80006f0 <NRF24_write_register>
}
 8000b24:	bf00      	nop
 8000b26:	3710      	adds	r7, #16
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8000b36:	2320      	movs	r3, #32
 8000b38:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8000b3a:	7bfa      	ldrb	r2, [r7, #15]
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	bf28      	it	cs
 8000b42:	4613      	movcs	r3, r2
 8000b44:	b2da      	uxtb	r2, r3
 8000b46:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <NRF24_setPayloadSize+0x2c>)
 8000b48:	701a      	strb	r2, [r3, #0]
}
 8000b4a:	bf00      	nop
 8000b4c:	3714      	adds	r7, #20
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	200000b6 	.word	0x200000b6

08000b5c <NRF24_getDynamicPayloadSize>:
{
	return payload_size;
}
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8000b60:	2060      	movs	r0, #96	; 0x60
 8000b62:	f7ff fd75 	bl	8000650 <NRF24_read_register>
 8000b66:	4603      	mov	r3, r0
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000b70:	201d      	movs	r0, #29
 8000b72:	f7ff fd6d 	bl	8000650 <NRF24_read_register>
 8000b76:	4603      	mov	r3, r0
 8000b78:	f023 0304 	bic.w	r3, r3, #4
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	4619      	mov	r1, r3
 8000b80:	201d      	movs	r0, #29
 8000b82:	f7ff fdb5 	bl	80006f0 <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 8000b86:	2100      	movs	r1, #0
 8000b88:	201c      	movs	r0, #28
 8000b8a:	f7ff fdb1 	bl	80006f0 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000b8e:	4b02      	ldr	r3, [pc, #8]	; (8000b98 <NRF24_disableDynamicPayloads+0x2c>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	701a      	strb	r2, [r3, #0]
}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	200000b7 	.word	0x200000b7

08000b9c <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d004      	beq.n	8000bb6 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8000bac:	213f      	movs	r1, #63	; 0x3f
 8000bae:	2001      	movs	r0, #1
 8000bb0:	f7ff fd9e 	bl	80006f0 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8000bb4:	e003      	b.n	8000bbe <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	2001      	movs	r0, #1
 8000bba:	f7ff fd99 	bl	80006f0 <NRF24_write_register>
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b084      	sub	sp, #16
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	4603      	mov	r3, r0
 8000bce:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000bd0:	2006      	movs	r0, #6
 8000bd2:	f7ff fd3d 	bl	8000650 <NRF24_read_register>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000bda:	7bfb      	ldrb	r3, [r7, #15]
 8000bdc:	f023 0306 	bic.w	r3, r3, #6
 8000be0:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	2b03      	cmp	r3, #3
 8000be6:	d104      	bne.n	8000bf2 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000be8:	7bfb      	ldrb	r3, [r7, #15]
 8000bea:	f043 0306 	orr.w	r3, r3, #6
 8000bee:	73fb      	strb	r3, [r7, #15]
 8000bf0:	e019      	b.n	8000c26 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	2b02      	cmp	r3, #2
 8000bf6:	d104      	bne.n	8000c02 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000bf8:	7bfb      	ldrb	r3, [r7, #15]
 8000bfa:	f043 0304 	orr.w	r3, r3, #4
 8000bfe:	73fb      	strb	r3, [r7, #15]
 8000c00:	e011      	b.n	8000c26 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d104      	bne.n	8000c12 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8000c08:	7bfb      	ldrb	r3, [r7, #15]
 8000c0a:	f043 0302 	orr.w	r3, r3, #2
 8000c0e:	73fb      	strb	r3, [r7, #15]
 8000c10:	e009      	b.n	8000c26 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d006      	beq.n	8000c26 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	2b04      	cmp	r3, #4
 8000c1c:	d103      	bne.n	8000c26 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000c1e:	7bfb      	ldrb	r3, [r7, #15]
 8000c20:	f043 0306 	orr.w	r3, r3, #6
 8000c24:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000c26:	7bfb      	ldrb	r3, [r7, #15]
 8000c28:	4619      	mov	r1, r3
 8000c2a:	2006      	movs	r0, #6
 8000c2c:	f7ff fd60 	bl	80006f0 <NRF24_write_register>
}
 8000c30:	bf00      	nop
 8000c32:	3710      	adds	r7, #16
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8000c42:	2300      	movs	r3, #0
 8000c44:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000c46:	2006      	movs	r0, #6
 8000c48:	f7ff fd02 	bl	8000650 <NRF24_read_register>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000c50:	4b1b      	ldr	r3, [pc, #108]	; (8000cc0 <NRF24_setDataRate+0x88>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000c56:	7bbb      	ldrb	r3, [r7, #14]
 8000c58:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000c5c:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	2b02      	cmp	r3, #2
 8000c62:	d107      	bne.n	8000c74 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000c64:	4b16      	ldr	r3, [pc, #88]	; (8000cc0 <NRF24_setDataRate+0x88>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000c6a:	7bbb      	ldrb	r3, [r7, #14]
 8000c6c:	f043 0320 	orr.w	r3, r3, #32
 8000c70:	73bb      	strb	r3, [r7, #14]
 8000c72:	e00d      	b.n	8000c90 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d107      	bne.n	8000c8a <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8000c7a:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <NRF24_setDataRate+0x88>)
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000c80:	7bbb      	ldrb	r3, [r7, #14]
 8000c82:	f043 0308 	orr.w	r3, r3, #8
 8000c86:	73bb      	strb	r3, [r7, #14]
 8000c88:	e002      	b.n	8000c90 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000c8a:	4b0d      	ldr	r3, [pc, #52]	; (8000cc0 <NRF24_setDataRate+0x88>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000c90:	7bbb      	ldrb	r3, [r7, #14]
 8000c92:	4619      	mov	r1, r3
 8000c94:	2006      	movs	r0, #6
 8000c96:	f7ff fd2b 	bl	80006f0 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000c9a:	2006      	movs	r0, #6
 8000c9c:	f7ff fcd8 	bl	8000650 <NRF24_read_register>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	7bbb      	ldrb	r3, [r7, #14]
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d102      	bne.n	8000cb0 <NRF24_setDataRate+0x78>
  {
    result = true;
 8000caa:	2301      	movs	r3, #1
 8000cac:	73fb      	strb	r3, [r7, #15]
 8000cae:	e002      	b.n	8000cb6 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8000cb0:	4b03      	ldr	r3, [pc, #12]	; (8000cc0 <NRF24_setDataRate+0x88>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8000cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3710      	adds	r7, #16
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	200000b8 	.word	0x200000b8

08000cc4 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000cce:	2000      	movs	r0, #0
 8000cd0:	f7ff fcbe 	bl	8000650 <NRF24_read_register>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	f023 030c 	bic.w	r3, r3, #12
 8000cda:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d00f      	beq.n	8000d02 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d104      	bne.n	8000cf2 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
 8000cea:	f043 0308 	orr.w	r3, r3, #8
 8000cee:	73fb      	strb	r3, [r7, #15]
 8000cf0:	e007      	b.n	8000d02 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8000cf2:	7bfb      	ldrb	r3, [r7, #15]
 8000cf4:	f043 0308 	orr.w	r3, r3, #8
 8000cf8:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8000cfa:	7bfb      	ldrb	r3, [r7, #15]
 8000cfc:	f043 0304 	orr.w	r3, r3, #4
 8000d00:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8000d02:	7bfb      	ldrb	r3, [r7, #15]
 8000d04:	4619      	mov	r1, r3
 8000d06:	2000      	movs	r0, #0
 8000d08:	f7ff fcf2 	bl	80006f0 <NRF24_write_register>
}
 8000d0c:	bf00      	nop
 8000d0e:	3710      	adds	r7, #16
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8000d18:	2000      	movs	r0, #0
 8000d1a:	f7ff fc99 	bl	8000650 <NRF24_read_register>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	f023 0302 	bic.w	r3, r3, #2
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	4619      	mov	r1, r3
 8000d28:	2000      	movs	r0, #0
 8000d2a:	f7ff fce1 	bl	80006f0 <NRF24_write_register>
}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b084      	sub	sp, #16
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000d3a:	f7ff fd55 	bl	80007e8 <NRF24_get_status>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8000d42:	7bfb      	ldrb	r3, [r7, #15]
 8000d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	bf14      	ite	ne
 8000d4c:	2301      	movne	r3, #1
 8000d4e:	2300      	moveq	r3, #0
 8000d50:	73bb      	strb	r3, [r7, #14]

  if (result)
 8000d52:	7bbb      	ldrb	r3, [r7, #14]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d017      	beq.n	8000d88 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d007      	beq.n	8000d6e <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8000d5e:	7bfb      	ldrb	r3, [r7, #15]
 8000d60:	085b      	lsrs	r3, r3, #1
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	f003 0307 	and.w	r3, r3, #7
 8000d68:	b2da      	uxtb	r2, r3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8000d6e:	2140      	movs	r1, #64	; 0x40
 8000d70:	2007      	movs	r0, #7
 8000d72:	f7ff fcbd 	bl	80006f0 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8000d76:	7bfb      	ldrb	r3, [r7, #15]
 8000d78:	f003 0320 	and.w	r3, r3, #32
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d003      	beq.n	8000d88 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8000d80:	2120      	movs	r1, #32
 8000d82:	2007      	movs	r0, #7
 8000d84:	f7ff fcb4 	bl	80006f0 <NRF24_write_register>
    }
  }
  return result;
 8000d88:	7bbb      	ldrb	r3, [r7, #14]
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3710      	adds	r7, #16
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b082      	sub	sp, #8
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
 8000d9a:	460b      	mov	r3, r1
 8000d9c:	70fb      	strb	r3, [r7, #3]
  // Transmitter power-up
  NRF24_ce(0);
 8000d9e:	2000      	movs	r0, #0
 8000da0:	f7ff fc36 	bl	8000610 <NRF24_ce>
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8000da4:	2000      	movs	r0, #0
 8000da6:	f7ff fc53 	bl	8000650 <NRF24_read_register>
 8000daa:	4603      	mov	r3, r0
 8000dac:	f043 0302 	orr.w	r3, r3, #2
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	f023 0301 	bic.w	r3, r3, #1
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	4619      	mov	r1, r3
 8000dba:	2000      	movs	r0, #0
 8000dbc:	f7ff fc98 	bl	80006f0 <NRF24_write_register>
  NRF24_ce(1);
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	f7ff fc25 	bl	8000610 <NRF24_ce>
  NRF24_DelayMicroSeconds(150);
 8000dc6:	2096      	movs	r0, #150	; 0x96
 8000dc8:	f7ff fbe2 	bl	8000590 <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8000dcc:	78fb      	ldrb	r3, [r7, #3]
 8000dce:	4619      	mov	r1, r3
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f7ff fcd7 	bl	8000784 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 8000dd6:	2001      	movs	r0, #1
 8000dd8:	f7ff fc1a 	bl	8000610 <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 8000ddc:	200f      	movs	r0, #15
 8000dde:	f7ff fbd7 	bl	8000590 <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 8000de2:	2000      	movs	r0, #0
 8000de4:	f7ff fc14 	bl	8000610 <NRF24_ce>
}
 8000de8:	bf00      	nop
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000dfc:	f7ff fcf4 	bl	80007e8 <NRF24_get_status>
 8000e00:	4603      	mov	r3, r0
 8000e02:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	2200      	movs	r2, #0
 8000e08:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000e0a:	2170      	movs	r1, #112	; 0x70
 8000e0c:	2007      	movs	r0, #7
 8000e0e:	f7ff fc6f 	bl	80006f0 <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 8000e12:	7dfb      	ldrb	r3, [r7, #23]
 8000e14:	f003 0320 	and.w	r3, r3, #32
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	bf14      	ite	ne
 8000e1c:	2301      	movne	r3, #1
 8000e1e:	2300      	moveq	r3, #0
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 8000e26:	7dfb      	ldrb	r3, [r7, #23]
 8000e28:	f003 0310 	and.w	r3, r3, #16
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	bf14      	ite	ne
 8000e30:	2301      	movne	r3, #1
 8000e32:	2300      	moveq	r3, #0
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 8000e3a:	7dfb      	ldrb	r3, [r7, #23]
 8000e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	bf14      	ite	ne
 8000e44:	2301      	movne	r3, #1
 8000e46:	2300      	moveq	r3, #0
 8000e48:	b2da      	uxtb	r2, r3
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	701a      	strb	r2, [r3, #0]
}
 8000e4e:	bf00      	nop
 8000e50:	3718      	adds	r7, #24
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000e5a:	2170      	movs	r1, #112	; 0x70
 8000e5c:	2007      	movs	r0, #7
 8000e5e:	f7ff fc47 	bl	80006f0 <NRF24_write_register>
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
	...

08000e68 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8000e6e:	2000      	movs	r0, #0
 8000e70:	f7ff fbae 	bl	80005d0 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8000e74:	2350      	movs	r3, #80	; 0x50
 8000e76:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8000e78:	2373      	movs	r3, #115	; 0x73
 8000e7a:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8000e7c:	1d39      	adds	r1, r7, #4
 8000e7e:	2364      	movs	r3, #100	; 0x64
 8000e80:	2202      	movs	r2, #2
 8000e82:	4805      	ldr	r0, [pc, #20]	; (8000e98 <NRF24_ACTIVATE_cmd+0x30>)
 8000e84:	f001 ff72 	bl	8002d6c <HAL_SPI_Transmit>
	NRF24_csn(1);
 8000e88:	2001      	movs	r0, #1
 8000e8a:	f7ff fba1 	bl	80005d0 <NRF24_csn>
}
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	200000c4 	.word	0x200000c4

08000e9c <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8000e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e9e:	b0a1      	sub	sp, #132	; 0x84
 8000ea0:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8000ea2:	f107 0308 	add.w	r3, r7, #8
 8000ea6:	4ab6      	ldr	r2, [pc, #728]	; (8001180 <printRadioSettings+0x2e4>)
 8000ea8:	461c      	mov	r4, r3
 8000eaa:	4615      	mov	r5, r2
 8000eac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eb8:	682b      	ldr	r3, [r5, #0]
 8000eba:	461a      	mov	r2, r3
 8000ebc:	8022      	strh	r2, [r4, #0]
 8000ebe:	3402      	adds	r4, #2
 8000ec0:	0c1b      	lsrs	r3, r3, #16
 8000ec2:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000ec4:	f107 0308 	add.w	r3, r7, #8
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff f989 	bl	80001e0 <strlen>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	b29a      	uxth	r2, r3
 8000ed2:	f107 0108 	add.w	r1, r7, #8
 8000ed6:	230a      	movs	r3, #10
 8000ed8:	48aa      	ldr	r0, [pc, #680]	; (8001184 <printRadioSettings+0x2e8>)
 8000eda:	f002 fc84 	bl	80037e6 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8000ede:	2000      	movs	r0, #0
 8000ee0:	f7ff fbb6 	bl	8000650 <NRF24_read_register>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8000eea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000eee:	f003 0308 	and.w	r3, r3, #8
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d020      	beq.n	8000f38 <printRadioSettings+0x9c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8000ef6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000efa:	f003 0304 	and.w	r3, r3, #4
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d00b      	beq.n	8000f1a <printRadioSettings+0x7e>
 8000f02:	f107 0308 	add.w	r3, r7, #8
 8000f06:	4aa0      	ldr	r2, [pc, #640]	; (8001188 <printRadioSettings+0x2ec>)
 8000f08:	461c      	mov	r4, r3
 8000f0a:	4615      	mov	r5, r2
 8000f0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f10:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f14:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000f18:	e017      	b.n	8000f4a <printRadioSettings+0xae>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 8000f1a:	f107 0308 	add.w	r3, r7, #8
 8000f1e:	4a9b      	ldr	r2, [pc, #620]	; (800118c <printRadioSettings+0x2f0>)
 8000f20:	461c      	mov	r4, r3
 8000f22:	4615      	mov	r5, r2
 8000f24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f28:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f2c:	c403      	stmia	r4!, {r0, r1}
 8000f2e:	8022      	strh	r2, [r4, #0]
 8000f30:	3402      	adds	r4, #2
 8000f32:	0c13      	lsrs	r3, r2, #16
 8000f34:	7023      	strb	r3, [r4, #0]
 8000f36:	e008      	b.n	8000f4a <printRadioSettings+0xae>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8000f38:	f107 0308 	add.w	r3, r7, #8
 8000f3c:	4a94      	ldr	r2, [pc, #592]	; (8001190 <printRadioSettings+0x2f4>)
 8000f3e:	461c      	mov	r4, r3
 8000f40:	4615      	mov	r5, r2
 8000f42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f46:	682b      	ldr	r3, [r5, #0]
 8000f48:	6023      	str	r3, [r4, #0]
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000f4a:	f107 0308 	add.w	r3, r7, #8
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff f946 	bl	80001e0 <strlen>
 8000f54:	4603      	mov	r3, r0
 8000f56:	b29a      	uxth	r2, r3
 8000f58:	f107 0108 	add.w	r1, r7, #8
 8000f5c:	230a      	movs	r3, #10
 8000f5e:	4889      	ldr	r0, [pc, #548]	; (8001184 <printRadioSettings+0x2e8>)
 8000f60:	f002 fc41 	bl	80037e6 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8000f64:	2001      	movs	r0, #1
 8000f66:	f7ff fb73 	bl	8000650 <NRF24_read_register>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000f70:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f74:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	bfcc      	ite	gt
 8000f7c:	2301      	movgt	r3, #1
 8000f7e:	2300      	movle	r3, #0
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000f84:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f88:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	bfcc      	ite	gt
 8000f90:	2301      	movgt	r3, #1
 8000f92:	2300      	movle	r3, #0
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000f98:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f9c:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	bfcc      	ite	gt
 8000fa4:	2301      	movgt	r3, #1
 8000fa6:	2300      	movle	r3, #0
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000fac:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000fb0:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	bfcc      	ite	gt
 8000fb8:	2301      	movgt	r3, #1
 8000fba:	2300      	movle	r3, #0
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000fc0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000fc4:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	bfcc      	ite	gt
 8000fcc:	2301      	movgt	r3, #1
 8000fce:	2300      	movle	r3, #0
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000fd4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000fd8:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	bfcc      	ite	gt
 8000fe0:	2301      	movgt	r3, #1
 8000fe2:	2300      	movle	r3, #0
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	f107 0008 	add.w	r0, r7, #8
 8000fea:	9303      	str	r3, [sp, #12]
 8000fec:	9402      	str	r4, [sp, #8]
 8000fee:	9101      	str	r1, [sp, #4]
 8000ff0:	9200      	str	r2, [sp, #0]
 8000ff2:	4633      	mov	r3, r6
 8000ff4:	462a      	mov	r2, r5
 8000ff6:	4967      	ldr	r1, [pc, #412]	; (8001194 <printRadioSettings+0x2f8>)
 8000ff8:	f003 f892 	bl	8004120 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000ffc:	f107 0308 	add.w	r3, r7, #8
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff f8ed 	bl	80001e0 <strlen>
 8001006:	4603      	mov	r3, r0
 8001008:	b29a      	uxth	r2, r3
 800100a:	f107 0108 	add.w	r1, r7, #8
 800100e:	230a      	movs	r3, #10
 8001010:	485c      	ldr	r0, [pc, #368]	; (8001184 <printRadioSettings+0x2e8>)
 8001012:	f002 fbe8 	bl	80037e6 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8001016:	2002      	movs	r0, #2
 8001018:	f7ff fb1a 	bl	8000650 <NRF24_read_register>
 800101c:	4603      	mov	r3, r0
 800101e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001022:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001026:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800102a:	2b00      	cmp	r3, #0
 800102c:	bfcc      	ite	gt
 800102e:	2301      	movgt	r3, #1
 8001030:	2300      	movle	r3, #0
 8001032:	b2db      	uxtb	r3, r3
 8001034:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001036:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800103a:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800103e:	2b00      	cmp	r3, #0
 8001040:	bfcc      	ite	gt
 8001042:	2301      	movgt	r3, #1
 8001044:	2300      	movle	r3, #0
 8001046:	b2db      	uxtb	r3, r3
 8001048:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800104a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800104e:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001052:	2b00      	cmp	r3, #0
 8001054:	bfcc      	ite	gt
 8001056:	2301      	movgt	r3, #1
 8001058:	2300      	movle	r3, #0
 800105a:	b2db      	uxtb	r3, r3
 800105c:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800105e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001062:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001066:	2b00      	cmp	r3, #0
 8001068:	bfcc      	ite	gt
 800106a:	2301      	movgt	r3, #1
 800106c:	2300      	movle	r3, #0
 800106e:	b2db      	uxtb	r3, r3
 8001070:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001072:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001076:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800107a:	2b00      	cmp	r3, #0
 800107c:	bfcc      	ite	gt
 800107e:	2301      	movgt	r3, #1
 8001080:	2300      	movle	r3, #0
 8001082:	b2db      	uxtb	r3, r3
 8001084:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001086:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800108a:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800108e:	2b00      	cmp	r3, #0
 8001090:	bfcc      	ite	gt
 8001092:	2301      	movgt	r3, #1
 8001094:	2300      	movle	r3, #0
 8001096:	b2db      	uxtb	r3, r3
 8001098:	f107 0008 	add.w	r0, r7, #8
 800109c:	9303      	str	r3, [sp, #12]
 800109e:	9402      	str	r4, [sp, #8]
 80010a0:	9101      	str	r1, [sp, #4]
 80010a2:	9200      	str	r2, [sp, #0]
 80010a4:	4633      	mov	r3, r6
 80010a6:	462a      	mov	r2, r5
 80010a8:	493b      	ldr	r1, [pc, #236]	; (8001198 <printRadioSettings+0x2fc>)
 80010aa:	f003 f839 	bl	8004120 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010ae:	f107 0308 	add.w	r3, r7, #8
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff f894 	bl	80001e0 <strlen>
 80010b8:	4603      	mov	r3, r0
 80010ba:	b29a      	uxth	r2, r3
 80010bc:	f107 0108 	add.w	r1, r7, #8
 80010c0:	230a      	movs	r3, #10
 80010c2:	4830      	ldr	r0, [pc, #192]	; (8001184 <printRadioSettings+0x2e8>)
 80010c4:	f002 fb8f 	bl	80037e6 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 80010c8:	2003      	movs	r0, #3
 80010ca:	f7ff fac1 	bl	8000650 <NRF24_read_register>
 80010ce:	4603      	mov	r3, r0
 80010d0:	f003 0303 	and.w	r3, r3, #3
 80010d4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 80010d8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010dc:	3302      	adds	r3, #2
 80010de:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 80010e2:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80010e6:	f107 0308 	add.w	r3, r7, #8
 80010ea:	492c      	ldr	r1, [pc, #176]	; (800119c <printRadioSettings+0x300>)
 80010ec:	4618      	mov	r0, r3
 80010ee:	f003 f817 	bl	8004120 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010f2:	f107 0308 	add.w	r3, r7, #8
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff f872 	bl	80001e0 <strlen>
 80010fc:	4603      	mov	r3, r0
 80010fe:	b29a      	uxth	r2, r3
 8001100:	f107 0108 	add.w	r1, r7, #8
 8001104:	230a      	movs	r3, #10
 8001106:	481f      	ldr	r0, [pc, #124]	; (8001184 <printRadioSettings+0x2e8>)
 8001108:	f002 fb6d 	bl	80037e6 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 800110c:	2005      	movs	r0, #5
 800110e:	f7ff fa9f 	bl	8000650 <NRF24_read_register>
 8001112:	4603      	mov	r3, r0
 8001114:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8001118:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800111c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001120:	f107 0308 	add.w	r3, r7, #8
 8001124:	491e      	ldr	r1, [pc, #120]	; (80011a0 <printRadioSettings+0x304>)
 8001126:	4618      	mov	r0, r3
 8001128:	f002 fffa 	bl	8004120 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800112c:	f107 0308 	add.w	r3, r7, #8
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff f855 	bl	80001e0 <strlen>
 8001136:	4603      	mov	r3, r0
 8001138:	b29a      	uxth	r2, r3
 800113a:	f107 0108 	add.w	r1, r7, #8
 800113e:	230a      	movs	r3, #10
 8001140:	4810      	ldr	r0, [pc, #64]	; (8001184 <printRadioSettings+0x2e8>)
 8001142:	f002 fb50 	bl	80037e6 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8001146:	2006      	movs	r0, #6
 8001148:	f7ff fa82 	bl	8000650 <NRF24_read_register>
 800114c:	4603      	mov	r3, r0
 800114e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8001152:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001156:	f003 0308 	and.w	r3, r3, #8
 800115a:	2b00      	cmp	r3, #0
 800115c:	d024      	beq.n	80011a8 <printRadioSettings+0x30c>
 800115e:	f107 0308 	add.w	r3, r7, #8
 8001162:	4a10      	ldr	r2, [pc, #64]	; (80011a4 <printRadioSettings+0x308>)
 8001164:	461c      	mov	r4, r3
 8001166:	4615      	mov	r5, r2
 8001168:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800116a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800116c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001170:	6020      	str	r0, [r4, #0]
 8001172:	3404      	adds	r4, #4
 8001174:	8021      	strh	r1, [r4, #0]
 8001176:	3402      	adds	r4, #2
 8001178:	0c0b      	lsrs	r3, r1, #16
 800117a:	7023      	strb	r3, [r4, #0]
 800117c:	e023      	b.n	80011c6 <printRadioSettings+0x32a>
 800117e:	bf00      	nop
 8001180:	08004930 	.word	0x08004930
 8001184:	2000011c 	.word	0x2000011c
 8001188:	08004964 	.word	0x08004964
 800118c:	08004980 	.word	0x08004980
 8001190:	0800499c 	.word	0x0800499c
 8001194:	080049b0 	.word	0x080049b0
 8001198:	080049f4 	.word	0x080049f4
 800119c:	08004a40 	.word	0x08004a40
 80011a0:	08004a5c 	.word	0x08004a5c
 80011a4:	08004a70 	.word	0x08004a70
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 80011a8:	f107 0308 	add.w	r3, r7, #8
 80011ac:	4a29      	ldr	r2, [pc, #164]	; (8001254 <printRadioSettings+0x3b8>)
 80011ae:	461c      	mov	r4, r3
 80011b0:	4615      	mov	r5, r2
 80011b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011b6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80011ba:	6020      	str	r0, [r4, #0]
 80011bc:	3404      	adds	r4, #4
 80011be:	8021      	strh	r1, [r4, #0]
 80011c0:	3402      	adds	r4, #2
 80011c2:	0c0b      	lsrs	r3, r1, #16
 80011c4:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011c6:	f107 0308 	add.w	r3, r7, #8
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff f808 	bl	80001e0 <strlen>
 80011d0:	4603      	mov	r3, r0
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	f107 0108 	add.w	r1, r7, #8
 80011d8:	230a      	movs	r3, #10
 80011da:	481f      	ldr	r0, [pc, #124]	; (8001258 <printRadioSettings+0x3bc>)
 80011dc:	f002 fb03 	bl	80037e6 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 80011e0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011e4:	f003 0306 	and.w	r3, r3, #6
 80011e8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 80011ec:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011f0:	085b      	lsrs	r3, r3, #1
 80011f2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 80011f6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d109      	bne.n	8001212 <printRadioSettings+0x376>
 80011fe:	f107 0308 	add.w	r3, r7, #8
 8001202:	4a16      	ldr	r2, [pc, #88]	; (800125c <printRadioSettings+0x3c0>)
 8001204:	461c      	mov	r4, r3
 8001206:	4615      	mov	r5, r2
 8001208:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800120a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800120c:	682b      	ldr	r3, [r5, #0]
 800120e:	6023      	str	r3, [r4, #0]
 8001210:	e037      	b.n	8001282 <printRadioSettings+0x3e6>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8001212:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001216:	2b01      	cmp	r3, #1
 8001218:	d109      	bne.n	800122e <printRadioSettings+0x392>
 800121a:	f107 0308 	add.w	r3, r7, #8
 800121e:	4a10      	ldr	r2, [pc, #64]	; (8001260 <printRadioSettings+0x3c4>)
 8001220:	461c      	mov	r4, r3
 8001222:	4615      	mov	r5, r2
 8001224:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001226:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001228:	682b      	ldr	r3, [r5, #0]
 800122a:	6023      	str	r3, [r4, #0]
 800122c:	e029      	b.n	8001282 <printRadioSettings+0x3e6>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 800122e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001232:	2b02      	cmp	r3, #2
 8001234:	d118      	bne.n	8001268 <printRadioSettings+0x3cc>
 8001236:	f107 0308 	add.w	r3, r7, #8
 800123a:	4a0a      	ldr	r2, [pc, #40]	; (8001264 <printRadioSettings+0x3c8>)
 800123c:	461c      	mov	r4, r3
 800123e:	4615      	mov	r5, r2
 8001240:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001242:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001244:	682b      	ldr	r3, [r5, #0]
 8001246:	461a      	mov	r2, r3
 8001248:	8022      	strh	r2, [r4, #0]
 800124a:	3402      	adds	r4, #2
 800124c:	0c1b      	lsrs	r3, r3, #16
 800124e:	7023      	strb	r3, [r4, #0]
 8001250:	e017      	b.n	8001282 <printRadioSettings+0x3e6>
 8001252:	bf00      	nop
 8001254:	08004a88 	.word	0x08004a88
 8001258:	2000011c 	.word	0x2000011c
 800125c:	08004aa0 	.word	0x08004aa0
 8001260:	08004ab4 	.word	0x08004ab4
 8001264:	08004ac8 	.word	0x08004ac8
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8001268:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800126c:	2b03      	cmp	r3, #3
 800126e:	d108      	bne.n	8001282 <printRadioSettings+0x3e6>
 8001270:	f107 0308 	add.w	r3, r7, #8
 8001274:	4ad7      	ldr	r2, [pc, #860]	; (80015d4 <printRadioSettings+0x738>)
 8001276:	461c      	mov	r4, r3
 8001278:	4615      	mov	r5, r2
 800127a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800127c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800127e:	682b      	ldr	r3, [r5, #0]
 8001280:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001282:	f107 0308 	add.w	r3, r7, #8
 8001286:	4618      	mov	r0, r3
 8001288:	f7fe ffaa 	bl	80001e0 <strlen>
 800128c:	4603      	mov	r3, r0
 800128e:	b29a      	uxth	r2, r3
 8001290:	f107 0108 	add.w	r1, r7, #8
 8001294:	230a      	movs	r3, #10
 8001296:	48d0      	ldr	r0, [pc, #832]	; (80015d8 <printRadioSettings+0x73c>)
 8001298:	f002 faa5 	bl	80037e6 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 800129c:	463b      	mov	r3, r7
 800129e:	2205      	movs	r2, #5
 80012a0:	4619      	mov	r1, r3
 80012a2:	200a      	movs	r0, #10
 80012a4:	f7ff f9fc 	bl	80006a0 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80012a8:	793b      	ldrb	r3, [r7, #4]
 80012aa:	461c      	mov	r4, r3
 80012ac:	78fb      	ldrb	r3, [r7, #3]
 80012ae:	461d      	mov	r5, r3
 80012b0:	78bb      	ldrb	r3, [r7, #2]
 80012b2:	787a      	ldrb	r2, [r7, #1]
 80012b4:	7839      	ldrb	r1, [r7, #0]
 80012b6:	f107 0008 	add.w	r0, r7, #8
 80012ba:	9102      	str	r1, [sp, #8]
 80012bc:	9201      	str	r2, [sp, #4]
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	462b      	mov	r3, r5
 80012c2:	4622      	mov	r2, r4
 80012c4:	49c5      	ldr	r1, [pc, #788]	; (80015dc <printRadioSettings+0x740>)
 80012c6:	f002 ff2b 	bl	8004120 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012ca:	f107 0308 	add.w	r3, r7, #8
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7fe ff86 	bl	80001e0 <strlen>
 80012d4:	4603      	mov	r3, r0
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	f107 0108 	add.w	r1, r7, #8
 80012dc:	230a      	movs	r3, #10
 80012de:	48be      	ldr	r0, [pc, #760]	; (80015d8 <printRadioSettings+0x73c>)
 80012e0:	f002 fa81 	bl	80037e6 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 80012e4:	463b      	mov	r3, r7
 80012e6:	2205      	movs	r2, #5
 80012e8:	4619      	mov	r1, r3
 80012ea:	200b      	movs	r0, #11
 80012ec:	f7ff f9d8 	bl	80006a0 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80012f0:	793b      	ldrb	r3, [r7, #4]
 80012f2:	461c      	mov	r4, r3
 80012f4:	78fb      	ldrb	r3, [r7, #3]
 80012f6:	461d      	mov	r5, r3
 80012f8:	78bb      	ldrb	r3, [r7, #2]
 80012fa:	787a      	ldrb	r2, [r7, #1]
 80012fc:	7839      	ldrb	r1, [r7, #0]
 80012fe:	f107 0008 	add.w	r0, r7, #8
 8001302:	9102      	str	r1, [sp, #8]
 8001304:	9201      	str	r2, [sp, #4]
 8001306:	9300      	str	r3, [sp, #0]
 8001308:	462b      	mov	r3, r5
 800130a:	4622      	mov	r2, r4
 800130c:	49b4      	ldr	r1, [pc, #720]	; (80015e0 <printRadioSettings+0x744>)
 800130e:	f002 ff07 	bl	8004120 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001312:	f107 0308 	add.w	r3, r7, #8
 8001316:	4618      	mov	r0, r3
 8001318:	f7fe ff62 	bl	80001e0 <strlen>
 800131c:	4603      	mov	r3, r0
 800131e:	b29a      	uxth	r2, r3
 8001320:	f107 0108 	add.w	r1, r7, #8
 8001324:	230a      	movs	r3, #10
 8001326:	48ac      	ldr	r0, [pc, #688]	; (80015d8 <printRadioSettings+0x73c>)
 8001328:	f002 fa5d 	bl	80037e6 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 800132c:	463b      	mov	r3, r7
 800132e:	2201      	movs	r2, #1
 8001330:	4619      	mov	r1, r3
 8001332:	200c      	movs	r0, #12
 8001334:	f7ff f9b4 	bl	80006a0 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001338:	783b      	ldrb	r3, [r7, #0]
 800133a:	461a      	mov	r2, r3
 800133c:	f107 0308 	add.w	r3, r7, #8
 8001340:	49a8      	ldr	r1, [pc, #672]	; (80015e4 <printRadioSettings+0x748>)
 8001342:	4618      	mov	r0, r3
 8001344:	f002 feec 	bl	8004120 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001348:	f107 0308 	add.w	r3, r7, #8
 800134c:	4618      	mov	r0, r3
 800134e:	f7fe ff47 	bl	80001e0 <strlen>
 8001352:	4603      	mov	r3, r0
 8001354:	b29a      	uxth	r2, r3
 8001356:	f107 0108 	add.w	r1, r7, #8
 800135a:	230a      	movs	r3, #10
 800135c:	489e      	ldr	r0, [pc, #632]	; (80015d8 <printRadioSettings+0x73c>)
 800135e:	f002 fa42 	bl	80037e6 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8001362:	463b      	mov	r3, r7
 8001364:	2201      	movs	r2, #1
 8001366:	4619      	mov	r1, r3
 8001368:	200d      	movs	r0, #13
 800136a:	f7ff f999 	bl	80006a0 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800136e:	783b      	ldrb	r3, [r7, #0]
 8001370:	461a      	mov	r2, r3
 8001372:	f107 0308 	add.w	r3, r7, #8
 8001376:	499c      	ldr	r1, [pc, #624]	; (80015e8 <printRadioSettings+0x74c>)
 8001378:	4618      	mov	r0, r3
 800137a:	f002 fed1 	bl	8004120 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800137e:	f107 0308 	add.w	r3, r7, #8
 8001382:	4618      	mov	r0, r3
 8001384:	f7fe ff2c 	bl	80001e0 <strlen>
 8001388:	4603      	mov	r3, r0
 800138a:	b29a      	uxth	r2, r3
 800138c:	f107 0108 	add.w	r1, r7, #8
 8001390:	230a      	movs	r3, #10
 8001392:	4891      	ldr	r0, [pc, #580]	; (80015d8 <printRadioSettings+0x73c>)
 8001394:	f002 fa27 	bl	80037e6 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8001398:	463b      	mov	r3, r7
 800139a:	2201      	movs	r2, #1
 800139c:	4619      	mov	r1, r3
 800139e:	200e      	movs	r0, #14
 80013a0:	f7ff f97e 	bl	80006a0 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80013a4:	783b      	ldrb	r3, [r7, #0]
 80013a6:	461a      	mov	r2, r3
 80013a8:	f107 0308 	add.w	r3, r7, #8
 80013ac:	498f      	ldr	r1, [pc, #572]	; (80015ec <printRadioSettings+0x750>)
 80013ae:	4618      	mov	r0, r3
 80013b0:	f002 feb6 	bl	8004120 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80013b4:	f107 0308 	add.w	r3, r7, #8
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7fe ff11 	bl	80001e0 <strlen>
 80013be:	4603      	mov	r3, r0
 80013c0:	b29a      	uxth	r2, r3
 80013c2:	f107 0108 	add.w	r1, r7, #8
 80013c6:	230a      	movs	r3, #10
 80013c8:	4883      	ldr	r0, [pc, #524]	; (80015d8 <printRadioSettings+0x73c>)
 80013ca:	f002 fa0c 	bl	80037e6 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 80013ce:	463b      	mov	r3, r7
 80013d0:	2201      	movs	r2, #1
 80013d2:	4619      	mov	r1, r3
 80013d4:	200f      	movs	r0, #15
 80013d6:	f7ff f963 	bl	80006a0 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80013da:	783b      	ldrb	r3, [r7, #0]
 80013dc:	461a      	mov	r2, r3
 80013de:	f107 0308 	add.w	r3, r7, #8
 80013e2:	4983      	ldr	r1, [pc, #524]	; (80015f0 <printRadioSettings+0x754>)
 80013e4:	4618      	mov	r0, r3
 80013e6:	f002 fe9b 	bl	8004120 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80013ea:	f107 0308 	add.w	r3, r7, #8
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7fe fef6 	bl	80001e0 <strlen>
 80013f4:	4603      	mov	r3, r0
 80013f6:	b29a      	uxth	r2, r3
 80013f8:	f107 0108 	add.w	r1, r7, #8
 80013fc:	230a      	movs	r3, #10
 80013fe:	4876      	ldr	r0, [pc, #472]	; (80015d8 <printRadioSettings+0x73c>)
 8001400:	f002 f9f1 	bl	80037e6 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8001404:	463b      	mov	r3, r7
 8001406:	2205      	movs	r2, #5
 8001408:	4619      	mov	r1, r3
 800140a:	2010      	movs	r0, #16
 800140c:	f7ff f948 	bl	80006a0 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001410:	793b      	ldrb	r3, [r7, #4]
 8001412:	461c      	mov	r4, r3
 8001414:	78fb      	ldrb	r3, [r7, #3]
 8001416:	461d      	mov	r5, r3
 8001418:	78bb      	ldrb	r3, [r7, #2]
 800141a:	787a      	ldrb	r2, [r7, #1]
 800141c:	7839      	ldrb	r1, [r7, #0]
 800141e:	f107 0008 	add.w	r0, r7, #8
 8001422:	9102      	str	r1, [sp, #8]
 8001424:	9201      	str	r2, [sp, #4]
 8001426:	9300      	str	r3, [sp, #0]
 8001428:	462b      	mov	r3, r5
 800142a:	4622      	mov	r2, r4
 800142c:	4971      	ldr	r1, [pc, #452]	; (80015f4 <printRadioSettings+0x758>)
 800142e:	f002 fe77 	bl	8004120 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001432:	f107 0308 	add.w	r3, r7, #8
 8001436:	4618      	mov	r0, r3
 8001438:	f7fe fed2 	bl	80001e0 <strlen>
 800143c:	4603      	mov	r3, r0
 800143e:	b29a      	uxth	r2, r3
 8001440:	f107 0108 	add.w	r1, r7, #8
 8001444:	230a      	movs	r3, #10
 8001446:	4864      	ldr	r0, [pc, #400]	; (80015d8 <printRadioSettings+0x73c>)
 8001448:	f002 f9cd 	bl	80037e6 <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 800144c:	2011      	movs	r0, #17
 800144e:	f7ff f8ff 	bl	8000650 <NRF24_read_register>
 8001452:	4603      	mov	r3, r0
 8001454:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001458:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800145c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001460:	f107 0308 	add.w	r3, r7, #8
 8001464:	4964      	ldr	r1, [pc, #400]	; (80015f8 <printRadioSettings+0x75c>)
 8001466:	4618      	mov	r0, r3
 8001468:	f002 fe5a 	bl	8004120 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800146c:	f107 0308 	add.w	r3, r7, #8
 8001470:	4618      	mov	r0, r3
 8001472:	f7fe feb5 	bl	80001e0 <strlen>
 8001476:	4603      	mov	r3, r0
 8001478:	b29a      	uxth	r2, r3
 800147a:	f107 0108 	add.w	r1, r7, #8
 800147e:	230a      	movs	r3, #10
 8001480:	4855      	ldr	r0, [pc, #340]	; (80015d8 <printRadioSettings+0x73c>)
 8001482:	f002 f9b0 	bl	80037e6 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 8001486:	2012      	movs	r0, #18
 8001488:	f7ff f8e2 	bl	8000650 <NRF24_read_register>
 800148c:	4603      	mov	r3, r0
 800148e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001492:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001496:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800149a:	f107 0308 	add.w	r3, r7, #8
 800149e:	4957      	ldr	r1, [pc, #348]	; (80015fc <printRadioSettings+0x760>)
 80014a0:	4618      	mov	r0, r3
 80014a2:	f002 fe3d 	bl	8004120 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014a6:	f107 0308 	add.w	r3, r7, #8
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7fe fe98 	bl	80001e0 <strlen>
 80014b0:	4603      	mov	r3, r0
 80014b2:	b29a      	uxth	r2, r3
 80014b4:	f107 0108 	add.w	r1, r7, #8
 80014b8:	230a      	movs	r3, #10
 80014ba:	4847      	ldr	r0, [pc, #284]	; (80015d8 <printRadioSettings+0x73c>)
 80014bc:	f002 f993 	bl	80037e6 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 80014c0:	2013      	movs	r0, #19
 80014c2:	f7ff f8c5 	bl	8000650 <NRF24_read_register>
 80014c6:	4603      	mov	r3, r0
 80014c8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80014cc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014d4:	f107 0308 	add.w	r3, r7, #8
 80014d8:	4949      	ldr	r1, [pc, #292]	; (8001600 <printRadioSettings+0x764>)
 80014da:	4618      	mov	r0, r3
 80014dc:	f002 fe20 	bl	8004120 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014e0:	f107 0308 	add.w	r3, r7, #8
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7fe fe7b 	bl	80001e0 <strlen>
 80014ea:	4603      	mov	r3, r0
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	f107 0108 	add.w	r1, r7, #8
 80014f2:	230a      	movs	r3, #10
 80014f4:	4838      	ldr	r0, [pc, #224]	; (80015d8 <printRadioSettings+0x73c>)
 80014f6:	f002 f976 	bl	80037e6 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 80014fa:	2014      	movs	r0, #20
 80014fc:	f7ff f8a8 	bl	8000650 <NRF24_read_register>
 8001500:	4603      	mov	r3, r0
 8001502:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001506:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800150a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800150e:	f107 0308 	add.w	r3, r7, #8
 8001512:	493c      	ldr	r1, [pc, #240]	; (8001604 <printRadioSettings+0x768>)
 8001514:	4618      	mov	r0, r3
 8001516:	f002 fe03 	bl	8004120 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800151a:	f107 0308 	add.w	r3, r7, #8
 800151e:	4618      	mov	r0, r3
 8001520:	f7fe fe5e 	bl	80001e0 <strlen>
 8001524:	4603      	mov	r3, r0
 8001526:	b29a      	uxth	r2, r3
 8001528:	f107 0108 	add.w	r1, r7, #8
 800152c:	230a      	movs	r3, #10
 800152e:	482a      	ldr	r0, [pc, #168]	; (80015d8 <printRadioSettings+0x73c>)
 8001530:	f002 f959 	bl	80037e6 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 8001534:	2015      	movs	r0, #21
 8001536:	f7ff f88b 	bl	8000650 <NRF24_read_register>
 800153a:	4603      	mov	r3, r0
 800153c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001540:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001544:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001548:	f107 0308 	add.w	r3, r7, #8
 800154c:	492e      	ldr	r1, [pc, #184]	; (8001608 <printRadioSettings+0x76c>)
 800154e:	4618      	mov	r0, r3
 8001550:	f002 fde6 	bl	8004120 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001554:	f107 0308 	add.w	r3, r7, #8
 8001558:	4618      	mov	r0, r3
 800155a:	f7fe fe41 	bl	80001e0 <strlen>
 800155e:	4603      	mov	r3, r0
 8001560:	b29a      	uxth	r2, r3
 8001562:	f107 0108 	add.w	r1, r7, #8
 8001566:	230a      	movs	r3, #10
 8001568:	481b      	ldr	r0, [pc, #108]	; (80015d8 <printRadioSettings+0x73c>)
 800156a:	f002 f93c 	bl	80037e6 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 800156e:	2016      	movs	r0, #22
 8001570:	f7ff f86e 	bl	8000650 <NRF24_read_register>
 8001574:	4603      	mov	r3, r0
 8001576:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800157a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800157e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001582:	f107 0308 	add.w	r3, r7, #8
 8001586:	4921      	ldr	r1, [pc, #132]	; (800160c <printRadioSettings+0x770>)
 8001588:	4618      	mov	r0, r3
 800158a:	f002 fdc9 	bl	8004120 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800158e:	f107 0308 	add.w	r3, r7, #8
 8001592:	4618      	mov	r0, r3
 8001594:	f7fe fe24 	bl	80001e0 <strlen>
 8001598:	4603      	mov	r3, r0
 800159a:	b29a      	uxth	r2, r3
 800159c:	f107 0108 	add.w	r1, r7, #8
 80015a0:	230a      	movs	r3, #10
 80015a2:	480d      	ldr	r0, [pc, #52]	; (80015d8 <printRadioSettings+0x73c>)
 80015a4:	f002 f91f 	bl	80037e6 <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 80015a8:	201c      	movs	r0, #28
 80015aa:	f7ff f851 	bl	8000650 <NRF24_read_register>
 80015ae:	4603      	mov	r3, r0
 80015b0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80015b4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015b8:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80015bc:	2b00      	cmp	r3, #0
 80015be:	bfcc      	ite	gt
 80015c0:	2301      	movgt	r3, #1
 80015c2:	2300      	movle	r3, #0
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80015c8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	e01e      	b.n	8001610 <printRadioSettings+0x774>
 80015d2:	bf00      	nop
 80015d4:	08004adc 	.word	0x08004adc
 80015d8:	2000011c 	.word	0x2000011c
 80015dc:	08004af0 	.word	0x08004af0
 80015e0:	08004b20 	.word	0x08004b20
 80015e4:	08004b50 	.word	0x08004b50
 80015e8:	08004b78 	.word	0x08004b78
 80015ec:	08004ba0 	.word	0x08004ba0
 80015f0:	08004bc8 	.word	0x08004bc8
 80015f4:	08004bf0 	.word	0x08004bf0
 80015f8:	08004c1c 	.word	0x08004c1c
 80015fc:	08004c38 	.word	0x08004c38
 8001600:	08004c54 	.word	0x08004c54
 8001604:	08004c70 	.word	0x08004c70
 8001608:	08004c8c 	.word	0x08004c8c
 800160c:	08004ca8 	.word	0x08004ca8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001610:	2b00      	cmp	r3, #0
 8001612:	bfcc      	ite	gt
 8001614:	2301      	movgt	r3, #1
 8001616:	2300      	movle	r3, #0
 8001618:	b2db      	uxtb	r3, r3
 800161a:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800161c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001620:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001624:	2b00      	cmp	r3, #0
 8001626:	bfcc      	ite	gt
 8001628:	2301      	movgt	r3, #1
 800162a:	2300      	movle	r3, #0
 800162c:	b2db      	uxtb	r3, r3
 800162e:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001630:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001634:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001638:	2b00      	cmp	r3, #0
 800163a:	bfcc      	ite	gt
 800163c:	2301      	movgt	r3, #1
 800163e:	2300      	movle	r3, #0
 8001640:	b2db      	uxtb	r3, r3
 8001642:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001644:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001648:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800164c:	2b00      	cmp	r3, #0
 800164e:	bfcc      	ite	gt
 8001650:	2301      	movgt	r3, #1
 8001652:	2300      	movle	r3, #0
 8001654:	b2db      	uxtb	r3, r3
 8001656:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001658:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800165c:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001660:	2b00      	cmp	r3, #0
 8001662:	bfcc      	ite	gt
 8001664:	2301      	movgt	r3, #1
 8001666:	2300      	movle	r3, #0
 8001668:	b2db      	uxtb	r3, r3
 800166a:	f107 0008 	add.w	r0, r7, #8
 800166e:	9303      	str	r3, [sp, #12]
 8001670:	9402      	str	r4, [sp, #8]
 8001672:	9101      	str	r1, [sp, #4]
 8001674:	9200      	str	r2, [sp, #0]
 8001676:	4633      	mov	r3, r6
 8001678:	462a      	mov	r2, r5
 800167a:	494a      	ldr	r1, [pc, #296]	; (80017a4 <printRadioSettings+0x908>)
 800167c:	f002 fd50 	bl	8004120 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001680:	f107 0308 	add.w	r3, r7, #8
 8001684:	4618      	mov	r0, r3
 8001686:	f7fe fdab 	bl	80001e0 <strlen>
 800168a:	4603      	mov	r3, r0
 800168c:	b29a      	uxth	r2, r3
 800168e:	f107 0108 	add.w	r1, r7, #8
 8001692:	230a      	movs	r3, #10
 8001694:	4844      	ldr	r0, [pc, #272]	; (80017a8 <printRadioSettings+0x90c>)
 8001696:	f002 f8a6 	bl	80037e6 <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 800169a:	201d      	movs	r0, #29
 800169c:	f7fe ffd8 	bl	8000650 <NRF24_read_register>
 80016a0:	4603      	mov	r3, r0
 80016a2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 80016a6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016aa:	f003 0304 	and.w	r3, r3, #4
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d00c      	beq.n	80016cc <printRadioSettings+0x830>
 80016b2:	f107 0308 	add.w	r3, r7, #8
 80016b6:	4a3d      	ldr	r2, [pc, #244]	; (80017ac <printRadioSettings+0x910>)
 80016b8:	461c      	mov	r4, r3
 80016ba:	4615      	mov	r5, r2
 80016bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016c0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80016c4:	6020      	str	r0, [r4, #0]
 80016c6:	3404      	adds	r4, #4
 80016c8:	8021      	strh	r1, [r4, #0]
 80016ca:	e00e      	b.n	80016ea <printRadioSettings+0x84e>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 80016cc:	f107 0308 	add.w	r3, r7, #8
 80016d0:	4a37      	ldr	r2, [pc, #220]	; (80017b0 <printRadioSettings+0x914>)
 80016d2:	461c      	mov	r4, r3
 80016d4:	4615      	mov	r5, r2
 80016d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016da:	e895 0003 	ldmia.w	r5, {r0, r1}
 80016de:	6020      	str	r0, [r4, #0]
 80016e0:	3404      	adds	r4, #4
 80016e2:	8021      	strh	r1, [r4, #0]
 80016e4:	3402      	adds	r4, #2
 80016e6:	0c0b      	lsrs	r3, r1, #16
 80016e8:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016ea:	f107 0308 	add.w	r3, r7, #8
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7fe fd76 	bl	80001e0 <strlen>
 80016f4:	4603      	mov	r3, r0
 80016f6:	b29a      	uxth	r2, r3
 80016f8:	f107 0108 	add.w	r1, r7, #8
 80016fc:	230a      	movs	r3, #10
 80016fe:	482a      	ldr	r0, [pc, #168]	; (80017a8 <printRadioSettings+0x90c>)
 8001700:	f002 f871 	bl	80037e6 <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8001704:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d00b      	beq.n	8001728 <printRadioSettings+0x88c>
 8001710:	f107 0308 	add.w	r3, r7, #8
 8001714:	4a27      	ldr	r2, [pc, #156]	; (80017b4 <printRadioSettings+0x918>)
 8001716:	461c      	mov	r4, r3
 8001718:	4615      	mov	r5, r2
 800171a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800171c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800171e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001722:	c403      	stmia	r4!, {r0, r1}
 8001724:	8022      	strh	r2, [r4, #0]
 8001726:	e00d      	b.n	8001744 <printRadioSettings+0x8a8>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8001728:	f107 0308 	add.w	r3, r7, #8
 800172c:	4a22      	ldr	r2, [pc, #136]	; (80017b8 <printRadioSettings+0x91c>)
 800172e:	461c      	mov	r4, r3
 8001730:	4615      	mov	r5, r2
 8001732:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001734:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001736:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800173a:	c403      	stmia	r4!, {r0, r1}
 800173c:	8022      	strh	r2, [r4, #0]
 800173e:	3402      	adds	r4, #2
 8001740:	0c13      	lsrs	r3, r2, #16
 8001742:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001744:	f107 0308 	add.w	r3, r7, #8
 8001748:	4618      	mov	r0, r3
 800174a:	f7fe fd49 	bl	80001e0 <strlen>
 800174e:	4603      	mov	r3, r0
 8001750:	b29a      	uxth	r2, r3
 8001752:	f107 0108 	add.w	r1, r7, #8
 8001756:	230a      	movs	r3, #10
 8001758:	4813      	ldr	r0, [pc, #76]	; (80017a8 <printRadioSettings+0x90c>)
 800175a:	f002 f844 	bl	80037e6 <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 800175e:	f107 0308 	add.w	r3, r7, #8
 8001762:	4a16      	ldr	r2, [pc, #88]	; (80017bc <printRadioSettings+0x920>)
 8001764:	461c      	mov	r4, r3
 8001766:	4615      	mov	r5, r2
 8001768:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800176a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800176c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800176e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001770:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001772:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001774:	682b      	ldr	r3, [r5, #0]
 8001776:	461a      	mov	r2, r3
 8001778:	8022      	strh	r2, [r4, #0]
 800177a:	3402      	adds	r4, #2
 800177c:	0c1b      	lsrs	r3, r3, #16
 800177e:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001780:	f107 0308 	add.w	r3, r7, #8
 8001784:	4618      	mov	r0, r3
 8001786:	f7fe fd2b 	bl	80001e0 <strlen>
 800178a:	4603      	mov	r3, r0
 800178c:	b29a      	uxth	r2, r3
 800178e:	f107 0108 	add.w	r1, r7, #8
 8001792:	230a      	movs	r3, #10
 8001794:	4804      	ldr	r0, [pc, #16]	; (80017a8 <printRadioSettings+0x90c>)
 8001796:	f002 f826 	bl	80037e6 <HAL_UART_Transmit>
}
 800179a:	bf00      	nop
 800179c:	3774      	adds	r7, #116	; 0x74
 800179e:	46bd      	mov	sp, r7
 80017a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017a2:	bf00      	nop
 80017a4:	08004cc4 	.word	0x08004cc4
 80017a8:	2000011c 	.word	0x2000011c
 80017ac:	08004d10 	.word	0x08004d10
 80017b0:	08004d28 	.word	0x08004d28
 80017b4:	08004d40 	.word	0x08004d40
 80017b8:	08004d5c 	.word	0x08004d5c
 80017bc:	08004930 	.word	0x08004930

080017c0 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 80017c0:	b084      	sub	sp, #16
 80017c2:	b4b0      	push	{r4, r5, r7}
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	f107 040c 	add.w	r4, r7, #12
 80017ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 80017ce:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <nrf24_DebugUART_Init+0x34>)
 80017d0:	461c      	mov	r4, r3
 80017d2:	f107 050c 	add.w	r5, r7, #12
 80017d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017e2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80017e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80017ea:	bf00      	nop
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bcb0      	pop	{r4, r5, r7}
 80017f0:	b004      	add	sp, #16
 80017f2:	4770      	bx	lr
 80017f4:	2000011c 	.word	0x2000011c

080017f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017fa:	b097      	sub	sp, #92	; 0x5c
 80017fc:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017fe:	f000 fae5 	bl	8001dcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001802:	f000 f86d 	bl	80018e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001806:	f000 f92b 	bl	8001a60 <MX_GPIO_Init>
  MX_SPI1_Init();
 800180a:	f000 f8c9 	bl	80019a0 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800180e:	f000 f8fd 	bl	8001a0c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  NRF24_begin(CEpin_GPIO_Port, CSNpin_Pin, CEpin_Pin, hspi1);
 8001812:	4c2c      	ldr	r4, [pc, #176]	; (80018c4 <main+0xcc>)
 8001814:	4668      	mov	r0, sp
 8001816:	1d23      	adds	r3, r4, #4
 8001818:	2254      	movs	r2, #84	; 0x54
 800181a:	4619      	mov	r1, r3
 800181c:	f002 fc6c 	bl	80040f8 <memcpy>
 8001820:	6823      	ldr	r3, [r4, #0]
 8001822:	2202      	movs	r2, #2
 8001824:	2101      	movs	r1, #1
 8001826:	4828      	ldr	r0, [pc, #160]	; (80018c8 <main+0xd0>)
 8001828:	f7fe ffec 	bl	8000804 <NRF24_begin>
  nrf24_DebugUART_Init(huart2);
 800182c:	4e27      	ldr	r6, [pc, #156]	; (80018cc <main+0xd4>)
 800182e:	466d      	mov	r5, sp
 8001830:	f106 0410 	add.w	r4, r6, #16
 8001834:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001836:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001838:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800183a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800183c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001840:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001844:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001848:	f7ff ffba 	bl	80017c0 <nrf24_DebugUART_Init>

  // no ack transmitting
  NRF24_stopListening();
 800184c:	f7ff f8ba 	bl	80009c4 <NRF24_stopListening>
  NRF24_openWritingPipe(txPipe);
 8001850:	4b1f      	ldr	r3, [pc, #124]	; (80018d0 <main+0xd8>)
 8001852:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001856:	4618      	mov	r0, r3
 8001858:	4621      	mov	r1, r4
 800185a:	f7ff f913 	bl	8000a84 <NRF24_openWritingPipe>
  NRF24_setAutoAck(false);
 800185e:	2000      	movs	r0, #0
 8001860:	f7ff f99c 	bl	8000b9c <NRF24_setAutoAck>
  NRF24_setDataRate(250);
 8001864:	20fa      	movs	r0, #250	; 0xfa
 8001866:	f7ff f9e7 	bl	8000c38 <NRF24_setDataRate>
  NRF24_setChannel(23);
 800186a:	2017      	movs	r0, #23
 800186c:	f7ff f949 	bl	8000b02 <NRF24_setChannel>
  NRF24_setPayloadSize(32);
 8001870:	2020      	movs	r0, #32
 8001872:	f7ff f95b 	bl	8000b2c <NRF24_setPayloadSize>

  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8001876:	2200      	movs	r2, #0
 8001878:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800187c:	4815      	ldr	r0, [pc, #84]	; (80018d4 <main+0xdc>)
 800187e:	f000 fda1 	bl	80023c4 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(NRF24_write(txData, 32)){
 8001882:	2120      	movs	r1, #32
 8001884:	4814      	ldr	r0, [pc, #80]	; (80018d8 <main+0xe0>)
 8001886:	f7ff f8a9 	bl	80009dc <NRF24_write>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d013      	beq.n	80018b8 <main+0xc0>
		  HAL_UART_Transmit(&huart2, (uint8_t *)"Transmitted successfully\r\n", strlen("Transmitted successfully\r\n"), 10);
 8001890:	230a      	movs	r3, #10
 8001892:	221a      	movs	r2, #26
 8001894:	4911      	ldr	r1, [pc, #68]	; (80018dc <main+0xe4>)
 8001896:	480d      	ldr	r0, [pc, #52]	; (80018cc <main+0xd4>)
 8001898:	f001 ffa5 	bl	80037e6 <HAL_UART_Transmit>
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800189c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018a0:	480c      	ldr	r0, [pc, #48]	; (80018d4 <main+0xdc>)
 80018a2:	f000 fda8 	bl	80023f6 <HAL_GPIO_TogglePin>
		  HAL_Delay(500);
 80018a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018aa:	f000 fb01 	bl	8001eb0 <HAL_Delay>
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80018ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018b2:	4808      	ldr	r0, [pc, #32]	; (80018d4 <main+0xdc>)
 80018b4:	f000 fd9f 	bl	80023f6 <HAL_GPIO_TogglePin>
	  }
	  HAL_Delay(1000);
 80018b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018bc:	f000 faf8 	bl	8001eb0 <HAL_Delay>
	  if(NRF24_write(txData, 32)){
 80018c0:	e7df      	b.n	8001882 <main+0x8a>
 80018c2:	bf00      	nop
 80018c4:	20000168 	.word	0x20000168
 80018c8:	40020000 	.word	0x40020000
 80018cc:	200001c0 	.word	0x200001c0
 80018d0:	20000000 	.word	0x20000000
 80018d4:	40020800 	.word	0x40020800
 80018d8:	20000008 	.word	0x20000008
 80018dc:	08004e74 	.word	0x08004e74

080018e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b094      	sub	sp, #80	; 0x50
 80018e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018e6:	f107 0320 	add.w	r3, r7, #32
 80018ea:	2230      	movs	r2, #48	; 0x30
 80018ec:	2100      	movs	r1, #0
 80018ee:	4618      	mov	r0, r3
 80018f0:	f002 fc0d 	bl	800410e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018f4:	f107 030c 	add.w	r3, r7, #12
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001904:	2300      	movs	r3, #0
 8001906:	60bb      	str	r3, [r7, #8]
 8001908:	4b23      	ldr	r3, [pc, #140]	; (8001998 <SystemClock_Config+0xb8>)
 800190a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190c:	4a22      	ldr	r2, [pc, #136]	; (8001998 <SystemClock_Config+0xb8>)
 800190e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001912:	6413      	str	r3, [r2, #64]	; 0x40
 8001914:	4b20      	ldr	r3, [pc, #128]	; (8001998 <SystemClock_Config+0xb8>)
 8001916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191c:	60bb      	str	r3, [r7, #8]
 800191e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001920:	2300      	movs	r3, #0
 8001922:	607b      	str	r3, [r7, #4]
 8001924:	4b1d      	ldr	r3, [pc, #116]	; (800199c <SystemClock_Config+0xbc>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800192c:	4a1b      	ldr	r2, [pc, #108]	; (800199c <SystemClock_Config+0xbc>)
 800192e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001932:	6013      	str	r3, [r2, #0]
 8001934:	4b19      	ldr	r3, [pc, #100]	; (800199c <SystemClock_Config+0xbc>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800193c:	607b      	str	r3, [r7, #4]
 800193e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001940:	2302      	movs	r3, #2
 8001942:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001944:	2301      	movs	r3, #1
 8001946:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001948:	2310      	movs	r3, #16
 800194a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800194c:	2300      	movs	r3, #0
 800194e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001950:	f107 0320 	add.w	r3, r7, #32
 8001954:	4618      	mov	r0, r3
 8001956:	f000 fd69 	bl	800242c <HAL_RCC_OscConfig>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001960:	f000 f8d8 	bl	8001b14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001964:	230f      	movs	r3, #15
 8001966:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001968:	2300      	movs	r3, #0
 800196a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001970:	2300      	movs	r3, #0
 8001972:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001974:	2300      	movs	r3, #0
 8001976:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001978:	f107 030c 	add.w	r3, r7, #12
 800197c:	2100      	movs	r1, #0
 800197e:	4618      	mov	r0, r3
 8001980:	f000 ffc4 	bl	800290c <HAL_RCC_ClockConfig>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800198a:	f000 f8c3 	bl	8001b14 <Error_Handler>
  }
}
 800198e:	bf00      	nop
 8001990:	3750      	adds	r7, #80	; 0x50
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40023800 	.word	0x40023800
 800199c:	40007000 	.word	0x40007000

080019a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80019a4:	4b17      	ldr	r3, [pc, #92]	; (8001a04 <MX_SPI1_Init+0x64>)
 80019a6:	4a18      	ldr	r2, [pc, #96]	; (8001a08 <MX_SPI1_Init+0x68>)
 80019a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019aa:	4b16      	ldr	r3, [pc, #88]	; (8001a04 <MX_SPI1_Init+0x64>)
 80019ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019b2:	4b14      	ldr	r3, [pc, #80]	; (8001a04 <MX_SPI1_Init+0x64>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80019b8:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <MX_SPI1_Init+0x64>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019be:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <MX_SPI1_Init+0x64>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019c4:	4b0f      	ldr	r3, [pc, #60]	; (8001a04 <MX_SPI1_Init+0x64>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80019ca:	4b0e      	ldr	r3, [pc, #56]	; (8001a04 <MX_SPI1_Init+0x64>)
 80019cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019d2:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <MX_SPI1_Init+0x64>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019d8:	4b0a      	ldr	r3, [pc, #40]	; (8001a04 <MX_SPI1_Init+0x64>)
 80019da:	2200      	movs	r2, #0
 80019dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019de:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <MX_SPI1_Init+0x64>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019e4:	4b07      	ldr	r3, [pc, #28]	; (8001a04 <MX_SPI1_Init+0x64>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80019ea:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <MX_SPI1_Init+0x64>)
 80019ec:	220a      	movs	r2, #10
 80019ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019f0:	4804      	ldr	r0, [pc, #16]	; (8001a04 <MX_SPI1_Init+0x64>)
 80019f2:	f001 f957 	bl	8002ca4 <HAL_SPI_Init>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80019fc:	f000 f88a 	bl	8001b14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a00:	bf00      	nop
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20000168 	.word	0x20000168
 8001a08:	40013000 	.word	0x40013000

08001a0c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a10:	4b11      	ldr	r3, [pc, #68]	; (8001a58 <MX_USART2_UART_Init+0x4c>)
 8001a12:	4a12      	ldr	r2, [pc, #72]	; (8001a5c <MX_USART2_UART_Init+0x50>)
 8001a14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a16:	4b10      	ldr	r3, [pc, #64]	; (8001a58 <MX_USART2_UART_Init+0x4c>)
 8001a18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a1e:	4b0e      	ldr	r3, [pc, #56]	; (8001a58 <MX_USART2_UART_Init+0x4c>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a24:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <MX_USART2_UART_Init+0x4c>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a2a:	4b0b      	ldr	r3, [pc, #44]	; (8001a58 <MX_USART2_UART_Init+0x4c>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a30:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <MX_USART2_UART_Init+0x4c>)
 8001a32:	220c      	movs	r2, #12
 8001a34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a36:	4b08      	ldr	r3, [pc, #32]	; (8001a58 <MX_USART2_UART_Init+0x4c>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a3c:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <MX_USART2_UART_Init+0x4c>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a42:	4805      	ldr	r0, [pc, #20]	; (8001a58 <MX_USART2_UART_Init+0x4c>)
 8001a44:	f001 fe82 	bl	800374c <HAL_UART_Init>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a4e:	f000 f861 	bl	8001b14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	200001c0 	.word	0x200001c0
 8001a5c:	40004400 	.word	0x40004400

08001a60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b088      	sub	sp, #32
 8001a64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a66:	f107 030c 	add.w	r3, r7, #12
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	605a      	str	r2, [r3, #4]
 8001a70:	609a      	str	r2, [r3, #8]
 8001a72:	60da      	str	r2, [r3, #12]
 8001a74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	60bb      	str	r3, [r7, #8]
 8001a7a:	4b23      	ldr	r3, [pc, #140]	; (8001b08 <MX_GPIO_Init+0xa8>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	4a22      	ldr	r2, [pc, #136]	; (8001b08 <MX_GPIO_Init+0xa8>)
 8001a80:	f043 0304 	orr.w	r3, r3, #4
 8001a84:	6313      	str	r3, [r2, #48]	; 0x30
 8001a86:	4b20      	ldr	r3, [pc, #128]	; (8001b08 <MX_GPIO_Init+0xa8>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	f003 0304 	and.w	r3, r3, #4
 8001a8e:	60bb      	str	r3, [r7, #8]
 8001a90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	607b      	str	r3, [r7, #4]
 8001a96:	4b1c      	ldr	r3, [pc, #112]	; (8001b08 <MX_GPIO_Init+0xa8>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	4a1b      	ldr	r2, [pc, #108]	; (8001b08 <MX_GPIO_Init+0xa8>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa2:	4b19      	ldr	r3, [pc, #100]	; (8001b08 <MX_GPIO_Init+0xa8>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	607b      	str	r3, [r7, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ab4:	4815      	ldr	r0, [pc, #84]	; (8001b0c <MX_GPIO_Init+0xac>)
 8001ab6:	f000 fc85 	bl	80023c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CSNpin_Pin|CEpin_Pin, GPIO_PIN_RESET);
 8001aba:	2200      	movs	r2, #0
 8001abc:	2103      	movs	r1, #3
 8001abe:	4814      	ldr	r0, [pc, #80]	; (8001b10 <MX_GPIO_Init+0xb0>)
 8001ac0:	f000 fc80 	bl	80023c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001ac4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ac8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aca:	2301      	movs	r3, #1
 8001acc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001ad6:	f107 030c 	add.w	r3, r7, #12
 8001ada:	4619      	mov	r1, r3
 8001adc:	480b      	ldr	r0, [pc, #44]	; (8001b0c <MX_GPIO_Init+0xac>)
 8001ade:	f000 faef 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSNpin_Pin CEpin_Pin */
  GPIO_InitStruct.Pin = CSNpin_Pin|CEpin_Pin;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aee:	2300      	movs	r3, #0
 8001af0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af2:	f107 030c 	add.w	r3, r7, #12
 8001af6:	4619      	mov	r1, r3
 8001af8:	4805      	ldr	r0, [pc, #20]	; (8001b10 <MX_GPIO_Init+0xb0>)
 8001afa:	f000 fae1 	bl	80020c0 <HAL_GPIO_Init>

}
 8001afe:	bf00      	nop
 8001b00:	3720      	adds	r7, #32
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	40020800 	.word	0x40020800
 8001b10:	40020000 	.word	0x40020000

08001b14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b18:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b1a:	e7fe      	b.n	8001b1a <Error_Handler+0x6>

08001b1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	607b      	str	r3, [r7, #4]
 8001b26:	4b10      	ldr	r3, [pc, #64]	; (8001b68 <HAL_MspInit+0x4c>)
 8001b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2a:	4a0f      	ldr	r2, [pc, #60]	; (8001b68 <HAL_MspInit+0x4c>)
 8001b2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b30:	6453      	str	r3, [r2, #68]	; 0x44
 8001b32:	4b0d      	ldr	r3, [pc, #52]	; (8001b68 <HAL_MspInit+0x4c>)
 8001b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b3a:	607b      	str	r3, [r7, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	603b      	str	r3, [r7, #0]
 8001b42:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <HAL_MspInit+0x4c>)
 8001b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b46:	4a08      	ldr	r2, [pc, #32]	; (8001b68 <HAL_MspInit+0x4c>)
 8001b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b4e:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <HAL_MspInit+0x4c>)
 8001b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b56:	603b      	str	r3, [r7, #0]
 8001b58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	40023800 	.word	0x40023800

08001b6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b08a      	sub	sp, #40	; 0x28
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b74:	f107 0314 	add.w	r3, r7, #20
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
 8001b80:	60da      	str	r2, [r3, #12]
 8001b82:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a19      	ldr	r2, [pc, #100]	; (8001bf0 <HAL_SPI_MspInit+0x84>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d12b      	bne.n	8001be6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	613b      	str	r3, [r7, #16]
 8001b92:	4b18      	ldr	r3, [pc, #96]	; (8001bf4 <HAL_SPI_MspInit+0x88>)
 8001b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b96:	4a17      	ldr	r2, [pc, #92]	; (8001bf4 <HAL_SPI_MspInit+0x88>)
 8001b98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b9e:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <HAL_SPI_MspInit+0x88>)
 8001ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ba6:	613b      	str	r3, [r7, #16]
 8001ba8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	4b11      	ldr	r3, [pc, #68]	; (8001bf4 <HAL_SPI_MspInit+0x88>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	4a10      	ldr	r2, [pc, #64]	; (8001bf4 <HAL_SPI_MspInit+0x88>)
 8001bb4:	f043 0301 	orr.w	r3, r3, #1
 8001bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bba:	4b0e      	ldr	r3, [pc, #56]	; (8001bf4 <HAL_SPI_MspInit+0x88>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001bc6:	23e0      	movs	r3, #224	; 0xe0
 8001bc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bd6:	2305      	movs	r3, #5
 8001bd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bda:	f107 0314 	add.w	r3, r7, #20
 8001bde:	4619      	mov	r1, r3
 8001be0:	4805      	ldr	r0, [pc, #20]	; (8001bf8 <HAL_SPI_MspInit+0x8c>)
 8001be2:	f000 fa6d 	bl	80020c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001be6:	bf00      	nop
 8001be8:	3728      	adds	r7, #40	; 0x28
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40013000 	.word	0x40013000
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	40020000 	.word	0x40020000

08001bfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b08a      	sub	sp, #40	; 0x28
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c04:	f107 0314 	add.w	r3, r7, #20
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	605a      	str	r2, [r3, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
 8001c10:	60da      	str	r2, [r3, #12]
 8001c12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a19      	ldr	r2, [pc, #100]	; (8001c80 <HAL_UART_MspInit+0x84>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d12b      	bne.n	8001c76 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	613b      	str	r3, [r7, #16]
 8001c22:	4b18      	ldr	r3, [pc, #96]	; (8001c84 <HAL_UART_MspInit+0x88>)
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	4a17      	ldr	r2, [pc, #92]	; (8001c84 <HAL_UART_MspInit+0x88>)
 8001c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c2e:	4b15      	ldr	r3, [pc, #84]	; (8001c84 <HAL_UART_MspInit+0x88>)
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c36:	613b      	str	r3, [r7, #16]
 8001c38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60fb      	str	r3, [r7, #12]
 8001c3e:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <HAL_UART_MspInit+0x88>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	4a10      	ldr	r2, [pc, #64]	; (8001c84 <HAL_UART_MspInit+0x88>)
 8001c44:	f043 0301 	orr.w	r3, r3, #1
 8001c48:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4a:	4b0e      	ldr	r3, [pc, #56]	; (8001c84 <HAL_UART_MspInit+0x88>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c56:	230c      	movs	r3, #12
 8001c58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c62:	2303      	movs	r3, #3
 8001c64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c66:	2307      	movs	r3, #7
 8001c68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c6a:	f107 0314 	add.w	r3, r7, #20
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4805      	ldr	r0, [pc, #20]	; (8001c88 <HAL_UART_MspInit+0x8c>)
 8001c72:	f000 fa25 	bl	80020c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c76:	bf00      	nop
 8001c78:	3728      	adds	r7, #40	; 0x28
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40004400 	.word	0x40004400
 8001c84:	40023800 	.word	0x40023800
 8001c88:	40020000 	.word	0x40020000

08001c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c90:	e7fe      	b.n	8001c90 <NMI_Handler+0x4>

08001c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c92:	b480      	push	{r7}
 8001c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c96:	e7fe      	b.n	8001c96 <HardFault_Handler+0x4>

08001c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c9c:	e7fe      	b.n	8001c9c <MemManage_Handler+0x4>

08001c9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ca2:	e7fe      	b.n	8001ca2 <BusFault_Handler+0x4>

08001ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ca8:	e7fe      	b.n	8001ca8 <UsageFault_Handler+0x4>

08001caa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001caa:	b480      	push	{r7}
 8001cac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cbc:	bf00      	nop
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cd8:	f000 f8ca 	bl	8001e70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cdc:	bf00      	nop
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ce8:	4a14      	ldr	r2, [pc, #80]	; (8001d3c <_sbrk+0x5c>)
 8001cea:	4b15      	ldr	r3, [pc, #84]	; (8001d40 <_sbrk+0x60>)
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cf4:	4b13      	ldr	r3, [pc, #76]	; (8001d44 <_sbrk+0x64>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d102      	bne.n	8001d02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cfc:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <_sbrk+0x64>)
 8001cfe:	4a12      	ldr	r2, [pc, #72]	; (8001d48 <_sbrk+0x68>)
 8001d00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d02:	4b10      	ldr	r3, [pc, #64]	; (8001d44 <_sbrk+0x64>)
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4413      	add	r3, r2
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d207      	bcs.n	8001d20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d10:	f002 f9c8 	bl	80040a4 <__errno>
 8001d14:	4602      	mov	r2, r0
 8001d16:	230c      	movs	r3, #12
 8001d18:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001d1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d1e:	e009      	b.n	8001d34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d20:	4b08      	ldr	r3, [pc, #32]	; (8001d44 <_sbrk+0x64>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d26:	4b07      	ldr	r3, [pc, #28]	; (8001d44 <_sbrk+0x64>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	4a05      	ldr	r2, [pc, #20]	; (8001d44 <_sbrk+0x64>)
 8001d30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d32:	68fb      	ldr	r3, [r7, #12]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3718      	adds	r7, #24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	20010000 	.word	0x20010000
 8001d40:	00000400 	.word	0x00000400
 8001d44:	2000015c 	.word	0x2000015c
 8001d48:	20000208 	.word	0x20000208

08001d4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d50:	4b08      	ldr	r3, [pc, #32]	; (8001d74 <SystemInit+0x28>)
 8001d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d56:	4a07      	ldr	r2, [pc, #28]	; (8001d74 <SystemInit+0x28>)
 8001d58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d60:	4b04      	ldr	r3, [pc, #16]	; (8001d74 <SystemInit+0x28>)
 8001d62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d66:	609a      	str	r2, [r3, #8]
#endif
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	e000ed00 	.word	0xe000ed00

08001d78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001db0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d7c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d7e:	e003      	b.n	8001d88 <LoopCopyDataInit>

08001d80 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d80:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d82:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d84:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d86:	3104      	adds	r1, #4

08001d88 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d88:	480b      	ldr	r0, [pc, #44]	; (8001db8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d8a:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d8c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d8e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d90:	d3f6      	bcc.n	8001d80 <CopyDataInit>
  ldr  r2, =_sbss
 8001d92:	4a0b      	ldr	r2, [pc, #44]	; (8001dc0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001d94:	e002      	b.n	8001d9c <LoopFillZerobss>

08001d96 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d96:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d98:	f842 3b04 	str.w	r3, [r2], #4

08001d9c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d9c:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001d9e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001da0:	d3f9      	bcc.n	8001d96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001da2:	f7ff ffd3 	bl	8001d4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001da6:	f002 f983 	bl	80040b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001daa:	f7ff fd25 	bl	80017f8 <main>
  bx  lr    
 8001dae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001db0:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8001db4:	08004eec 	.word	0x08004eec
  ldr  r0, =_sdata
 8001db8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001dbc:	20000098 	.word	0x20000098
  ldr  r2, =_sbss
 8001dc0:	20000098 	.word	0x20000098
  ldr  r3, = _ebss
 8001dc4:	20000208 	.word	0x20000208

08001dc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dc8:	e7fe      	b.n	8001dc8 <ADC_IRQHandler>
	...

08001dcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dd0:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <HAL_Init+0x40>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a0d      	ldr	r2, [pc, #52]	; (8001e0c <HAL_Init+0x40>)
 8001dd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ddc:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <HAL_Init+0x40>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a0a      	ldr	r2, [pc, #40]	; (8001e0c <HAL_Init+0x40>)
 8001de2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001de6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001de8:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <HAL_Init+0x40>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a07      	ldr	r2, [pc, #28]	; (8001e0c <HAL_Init+0x40>)
 8001dee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001df2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001df4:	2003      	movs	r0, #3
 8001df6:	f000 f92f 	bl	8002058 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dfa:	2000      	movs	r0, #0
 8001dfc:	f000 f808 	bl	8001e10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e00:	f7ff fe8c 	bl	8001b1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40023c00 	.word	0x40023c00

08001e10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e18:	4b12      	ldr	r3, [pc, #72]	; (8001e64 <HAL_InitTick+0x54>)
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	4b12      	ldr	r3, [pc, #72]	; (8001e68 <HAL_InitTick+0x58>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	4619      	mov	r1, r3
 8001e22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f000 f939 	bl	80020a6 <HAL_SYSTICK_Config>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e00e      	b.n	8001e5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b0f      	cmp	r3, #15
 8001e42:	d80a      	bhi.n	8001e5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e44:	2200      	movs	r2, #0
 8001e46:	6879      	ldr	r1, [r7, #4]
 8001e48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e4c:	f000 f90f 	bl	800206e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e50:	4a06      	ldr	r2, [pc, #24]	; (8001e6c <HAL_InitTick+0x5c>)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e56:	2300      	movs	r3, #0
 8001e58:	e000      	b.n	8001e5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	20000028 	.word	0x20000028
 8001e68:	20000030 	.word	0x20000030
 8001e6c:	2000002c 	.word	0x2000002c

08001e70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e74:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <HAL_IncTick+0x20>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	461a      	mov	r2, r3
 8001e7a:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <HAL_IncTick+0x24>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4413      	add	r3, r2
 8001e80:	4a04      	ldr	r2, [pc, #16]	; (8001e94 <HAL_IncTick+0x24>)
 8001e82:	6013      	str	r3, [r2, #0]
}
 8001e84:	bf00      	nop
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	20000030 	.word	0x20000030
 8001e94:	20000200 	.word	0x20000200

08001e98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e9c:	4b03      	ldr	r3, [pc, #12]	; (8001eac <HAL_GetTick+0x14>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	20000200 	.word	0x20000200

08001eb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eb8:	f7ff ffee 	bl	8001e98 <HAL_GetTick>
 8001ebc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ec8:	d005      	beq.n	8001ed6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eca:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <HAL_Delay+0x40>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ed6:	bf00      	nop
 8001ed8:	f7ff ffde 	bl	8001e98 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d8f7      	bhi.n	8001ed8 <HAL_Delay+0x28>
  {
  }
}
 8001ee8:	bf00      	nop
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	20000030 	.word	0x20000030

08001ef4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f003 0307 	and.w	r3, r3, #7
 8001f02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f04:	4b0c      	ldr	r3, [pc, #48]	; (8001f38 <__NVIC_SetPriorityGrouping+0x44>)
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f0a:	68ba      	ldr	r2, [r7, #8]
 8001f0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f10:	4013      	ands	r3, r2
 8001f12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f26:	4a04      	ldr	r2, [pc, #16]	; (8001f38 <__NVIC_SetPriorityGrouping+0x44>)
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	60d3      	str	r3, [r2, #12]
}
 8001f2c:	bf00      	nop
 8001f2e:	3714      	adds	r7, #20
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	e000ed00 	.word	0xe000ed00

08001f3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f40:	4b04      	ldr	r3, [pc, #16]	; (8001f54 <__NVIC_GetPriorityGrouping+0x18>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	0a1b      	lsrs	r3, r3, #8
 8001f46:	f003 0307 	and.w	r3, r3, #7
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	e000ed00 	.word	0xe000ed00

08001f58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	4603      	mov	r3, r0
 8001f60:	6039      	str	r1, [r7, #0]
 8001f62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	db0a      	blt.n	8001f82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	b2da      	uxtb	r2, r3
 8001f70:	490c      	ldr	r1, [pc, #48]	; (8001fa4 <__NVIC_SetPriority+0x4c>)
 8001f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f76:	0112      	lsls	r2, r2, #4
 8001f78:	b2d2      	uxtb	r2, r2
 8001f7a:	440b      	add	r3, r1
 8001f7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f80:	e00a      	b.n	8001f98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	4908      	ldr	r1, [pc, #32]	; (8001fa8 <__NVIC_SetPriority+0x50>)
 8001f88:	79fb      	ldrb	r3, [r7, #7]
 8001f8a:	f003 030f 	and.w	r3, r3, #15
 8001f8e:	3b04      	subs	r3, #4
 8001f90:	0112      	lsls	r2, r2, #4
 8001f92:	b2d2      	uxtb	r2, r2
 8001f94:	440b      	add	r3, r1
 8001f96:	761a      	strb	r2, [r3, #24]
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	e000e100 	.word	0xe000e100
 8001fa8:	e000ed00 	.word	0xe000ed00

08001fac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b089      	sub	sp, #36	; 0x24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	f1c3 0307 	rsb	r3, r3, #7
 8001fc6:	2b04      	cmp	r3, #4
 8001fc8:	bf28      	it	cs
 8001fca:	2304      	movcs	r3, #4
 8001fcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	3304      	adds	r3, #4
 8001fd2:	2b06      	cmp	r3, #6
 8001fd4:	d902      	bls.n	8001fdc <NVIC_EncodePriority+0x30>
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	3b03      	subs	r3, #3
 8001fda:	e000      	b.n	8001fde <NVIC_EncodePriority+0x32>
 8001fdc:	2300      	movs	r3, #0
 8001fde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	43da      	mvns	r2, r3
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	401a      	ands	r2, r3
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ff4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffe:	43d9      	mvns	r1, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002004:	4313      	orrs	r3, r2
         );
}
 8002006:	4618      	mov	r0, r3
 8002008:	3724      	adds	r7, #36	; 0x24
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
	...

08002014 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3b01      	subs	r3, #1
 8002020:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002024:	d301      	bcc.n	800202a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002026:	2301      	movs	r3, #1
 8002028:	e00f      	b.n	800204a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800202a:	4a0a      	ldr	r2, [pc, #40]	; (8002054 <SysTick_Config+0x40>)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	3b01      	subs	r3, #1
 8002030:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002032:	210f      	movs	r1, #15
 8002034:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002038:	f7ff ff8e 	bl	8001f58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800203c:	4b05      	ldr	r3, [pc, #20]	; (8002054 <SysTick_Config+0x40>)
 800203e:	2200      	movs	r2, #0
 8002040:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002042:	4b04      	ldr	r3, [pc, #16]	; (8002054 <SysTick_Config+0x40>)
 8002044:	2207      	movs	r2, #7
 8002046:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	e000e010 	.word	0xe000e010

08002058 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f7ff ff47 	bl	8001ef4 <__NVIC_SetPriorityGrouping>
}
 8002066:	bf00      	nop
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800206e:	b580      	push	{r7, lr}
 8002070:	b086      	sub	sp, #24
 8002072:	af00      	add	r7, sp, #0
 8002074:	4603      	mov	r3, r0
 8002076:	60b9      	str	r1, [r7, #8]
 8002078:	607a      	str	r2, [r7, #4]
 800207a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800207c:	2300      	movs	r3, #0
 800207e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002080:	f7ff ff5c 	bl	8001f3c <__NVIC_GetPriorityGrouping>
 8002084:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	68b9      	ldr	r1, [r7, #8]
 800208a:	6978      	ldr	r0, [r7, #20]
 800208c:	f7ff ff8e 	bl	8001fac <NVIC_EncodePriority>
 8002090:	4602      	mov	r2, r0
 8002092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002096:	4611      	mov	r1, r2
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff ff5d 	bl	8001f58 <__NVIC_SetPriority>
}
 800209e:	bf00      	nop
 80020a0:	3718      	adds	r7, #24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b082      	sub	sp, #8
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7ff ffb0 	bl	8002014 <SysTick_Config>
 80020b4:	4603      	mov	r3, r0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
	...

080020c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b089      	sub	sp, #36	; 0x24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020ca:	2300      	movs	r3, #0
 80020cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020ce:	2300      	movs	r3, #0
 80020d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020d2:	2300      	movs	r3, #0
 80020d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020d6:	2300      	movs	r3, #0
 80020d8:	61fb      	str	r3, [r7, #28]
 80020da:	e159      	b.n	8002390 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020dc:	2201      	movs	r2, #1
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	697a      	ldr	r2, [r7, #20]
 80020ec:	4013      	ands	r3, r2
 80020ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	f040 8148 	bne.w	800238a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d00b      	beq.n	800211a <HAL_GPIO_Init+0x5a>
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	2b02      	cmp	r3, #2
 8002108:	d007      	beq.n	800211a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800210e:	2b11      	cmp	r3, #17
 8002110:	d003      	beq.n	800211a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b12      	cmp	r3, #18
 8002118:	d130      	bne.n	800217c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	2203      	movs	r2, #3
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	43db      	mvns	r3, r3
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	4013      	ands	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	68da      	ldr	r2, [r3, #12]
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	4313      	orrs	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002150:	2201      	movs	r2, #1
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4013      	ands	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	091b      	lsrs	r3, r3, #4
 8002166:	f003 0201 	and.w	r2, r3, #1
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4313      	orrs	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	2203      	movs	r2, #3
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4013      	ands	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d003      	beq.n	80021bc <HAL_GPIO_Init+0xfc>
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	2b12      	cmp	r3, #18
 80021ba:	d123      	bne.n	8002204 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	08da      	lsrs	r2, r3, #3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3208      	adds	r2, #8
 80021c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	f003 0307 	and.w	r3, r3, #7
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	220f      	movs	r2, #15
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	43db      	mvns	r3, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4013      	ands	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	691a      	ldr	r2, [r3, #16]
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	f003 0307 	and.w	r3, r3, #7
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	08da      	lsrs	r2, r3, #3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	3208      	adds	r2, #8
 80021fe:	69b9      	ldr	r1, [r7, #24]
 8002200:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	2203      	movs	r2, #3
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	43db      	mvns	r3, r3
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	4013      	ands	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f003 0203 	and.w	r2, r3, #3
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	4313      	orrs	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002240:	2b00      	cmp	r3, #0
 8002242:	f000 80a2 	beq.w	800238a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002246:	2300      	movs	r3, #0
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	4b56      	ldr	r3, [pc, #344]	; (80023a4 <HAL_GPIO_Init+0x2e4>)
 800224c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224e:	4a55      	ldr	r2, [pc, #340]	; (80023a4 <HAL_GPIO_Init+0x2e4>)
 8002250:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002254:	6453      	str	r3, [r2, #68]	; 0x44
 8002256:	4b53      	ldr	r3, [pc, #332]	; (80023a4 <HAL_GPIO_Init+0x2e4>)
 8002258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002262:	4a51      	ldr	r2, [pc, #324]	; (80023a8 <HAL_GPIO_Init+0x2e8>)
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	089b      	lsrs	r3, r3, #2
 8002268:	3302      	adds	r3, #2
 800226a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800226e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	f003 0303 	and.w	r3, r3, #3
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	220f      	movs	r2, #15
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	43db      	mvns	r3, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4013      	ands	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a48      	ldr	r2, [pc, #288]	; (80023ac <HAL_GPIO_Init+0x2ec>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d019      	beq.n	80022c2 <HAL_GPIO_Init+0x202>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a47      	ldr	r2, [pc, #284]	; (80023b0 <HAL_GPIO_Init+0x2f0>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d013      	beq.n	80022be <HAL_GPIO_Init+0x1fe>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a46      	ldr	r2, [pc, #280]	; (80023b4 <HAL_GPIO_Init+0x2f4>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d00d      	beq.n	80022ba <HAL_GPIO_Init+0x1fa>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a45      	ldr	r2, [pc, #276]	; (80023b8 <HAL_GPIO_Init+0x2f8>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d007      	beq.n	80022b6 <HAL_GPIO_Init+0x1f6>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a44      	ldr	r2, [pc, #272]	; (80023bc <HAL_GPIO_Init+0x2fc>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d101      	bne.n	80022b2 <HAL_GPIO_Init+0x1f2>
 80022ae:	2304      	movs	r3, #4
 80022b0:	e008      	b.n	80022c4 <HAL_GPIO_Init+0x204>
 80022b2:	2307      	movs	r3, #7
 80022b4:	e006      	b.n	80022c4 <HAL_GPIO_Init+0x204>
 80022b6:	2303      	movs	r3, #3
 80022b8:	e004      	b.n	80022c4 <HAL_GPIO_Init+0x204>
 80022ba:	2302      	movs	r3, #2
 80022bc:	e002      	b.n	80022c4 <HAL_GPIO_Init+0x204>
 80022be:	2301      	movs	r3, #1
 80022c0:	e000      	b.n	80022c4 <HAL_GPIO_Init+0x204>
 80022c2:	2300      	movs	r3, #0
 80022c4:	69fa      	ldr	r2, [r7, #28]
 80022c6:	f002 0203 	and.w	r2, r2, #3
 80022ca:	0092      	lsls	r2, r2, #2
 80022cc:	4093      	lsls	r3, r2
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022d4:	4934      	ldr	r1, [pc, #208]	; (80023a8 <HAL_GPIO_Init+0x2e8>)
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	089b      	lsrs	r3, r3, #2
 80022da:	3302      	adds	r3, #2
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022e2:	4b37      	ldr	r3, [pc, #220]	; (80023c0 <HAL_GPIO_Init+0x300>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	43db      	mvns	r3, r3
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	4013      	ands	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d003      	beq.n	8002306 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	4313      	orrs	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002306:	4a2e      	ldr	r2, [pc, #184]	; (80023c0 <HAL_GPIO_Init+0x300>)
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800230c:	4b2c      	ldr	r3, [pc, #176]	; (80023c0 <HAL_GPIO_Init+0x300>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	43db      	mvns	r3, r3
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	4013      	ands	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d003      	beq.n	8002330 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	4313      	orrs	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002330:	4a23      	ldr	r2, [pc, #140]	; (80023c0 <HAL_GPIO_Init+0x300>)
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002336:	4b22      	ldr	r3, [pc, #136]	; (80023c0 <HAL_GPIO_Init+0x300>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	43db      	mvns	r3, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4013      	ands	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	4313      	orrs	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800235a:	4a19      	ldr	r2, [pc, #100]	; (80023c0 <HAL_GPIO_Init+0x300>)
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002360:	4b17      	ldr	r3, [pc, #92]	; (80023c0 <HAL_GPIO_Init+0x300>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	43db      	mvns	r3, r3
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4013      	ands	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d003      	beq.n	8002384 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	4313      	orrs	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002384:	4a0e      	ldr	r2, [pc, #56]	; (80023c0 <HAL_GPIO_Init+0x300>)
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	3301      	adds	r3, #1
 800238e:	61fb      	str	r3, [r7, #28]
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	2b0f      	cmp	r3, #15
 8002394:	f67f aea2 	bls.w	80020dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002398:	bf00      	nop
 800239a:	3724      	adds	r7, #36	; 0x24
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	40023800 	.word	0x40023800
 80023a8:	40013800 	.word	0x40013800
 80023ac:	40020000 	.word	0x40020000
 80023b0:	40020400 	.word	0x40020400
 80023b4:	40020800 	.word	0x40020800
 80023b8:	40020c00 	.word	0x40020c00
 80023bc:	40021000 	.word	0x40021000
 80023c0:	40013c00 	.word	0x40013c00

080023c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	460b      	mov	r3, r1
 80023ce:	807b      	strh	r3, [r7, #2]
 80023d0:	4613      	mov	r3, r2
 80023d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023d4:	787b      	ldrb	r3, [r7, #1]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023da:	887a      	ldrh	r2, [r7, #2]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023e0:	e003      	b.n	80023ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023e2:	887b      	ldrh	r3, [r7, #2]
 80023e4:	041a      	lsls	r2, r3, #16
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	619a      	str	r2, [r3, #24]
}
 80023ea:	bf00      	nop
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr

080023f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023f6:	b480      	push	{r7}
 80023f8:	b083      	sub	sp, #12
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
 80023fe:	460b      	mov	r3, r1
 8002400:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	695a      	ldr	r2, [r3, #20]
 8002406:	887b      	ldrh	r3, [r7, #2]
 8002408:	401a      	ands	r2, r3
 800240a:	887b      	ldrh	r3, [r7, #2]
 800240c:	429a      	cmp	r2, r3
 800240e:	d104      	bne.n	800241a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002410:	887b      	ldrh	r3, [r7, #2]
 8002412:	041a      	lsls	r2, r3, #16
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002418:	e002      	b.n	8002420 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800241a:	887a      	ldrh	r2, [r7, #2]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	619a      	str	r2, [r3, #24]
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e25b      	b.n	80028f6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b00      	cmp	r3, #0
 8002448:	d075      	beq.n	8002536 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800244a:	4ba3      	ldr	r3, [pc, #652]	; (80026d8 <HAL_RCC_OscConfig+0x2ac>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f003 030c 	and.w	r3, r3, #12
 8002452:	2b04      	cmp	r3, #4
 8002454:	d00c      	beq.n	8002470 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002456:	4ba0      	ldr	r3, [pc, #640]	; (80026d8 <HAL_RCC_OscConfig+0x2ac>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800245e:	2b08      	cmp	r3, #8
 8002460:	d112      	bne.n	8002488 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002462:	4b9d      	ldr	r3, [pc, #628]	; (80026d8 <HAL_RCC_OscConfig+0x2ac>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800246a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800246e:	d10b      	bne.n	8002488 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002470:	4b99      	ldr	r3, [pc, #612]	; (80026d8 <HAL_RCC_OscConfig+0x2ac>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d05b      	beq.n	8002534 <HAL_RCC_OscConfig+0x108>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d157      	bne.n	8002534 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e236      	b.n	80028f6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002490:	d106      	bne.n	80024a0 <HAL_RCC_OscConfig+0x74>
 8002492:	4b91      	ldr	r3, [pc, #580]	; (80026d8 <HAL_RCC_OscConfig+0x2ac>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a90      	ldr	r2, [pc, #576]	; (80026d8 <HAL_RCC_OscConfig+0x2ac>)
 8002498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800249c:	6013      	str	r3, [r2, #0]
 800249e:	e01d      	b.n	80024dc <HAL_RCC_OscConfig+0xb0>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024a8:	d10c      	bne.n	80024c4 <HAL_RCC_OscConfig+0x98>
 80024aa:	4b8b      	ldr	r3, [pc, #556]	; (80026d8 <HAL_RCC_OscConfig+0x2ac>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a8a      	ldr	r2, [pc, #552]	; (80026d8 <HAL_RCC_OscConfig+0x2ac>)
 80024b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024b4:	6013      	str	r3, [r2, #0]
 80024b6:	4b88      	ldr	r3, [pc, #544]	; (80026d8 <HAL_RCC_OscConfig+0x2ac>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a87      	ldr	r2, [pc, #540]	; (80026d8 <HAL_RCC_OscConfig+0x2ac>)
 80024bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c0:	6013      	str	r3, [r2, #0]
 80024c2:	e00b      	b.n	80024dc <HAL_RCC_OscConfig+0xb0>
 80024c4:	4b84      	ldr	r3, [pc, #528]	; (80026d8 <HAL_RCC_OscConfig+0x2ac>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a83      	ldr	r2, [pc, #524]	; (80026d8 <HAL_RCC_OscConfig+0x2ac>)
 80024ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ce:	6013      	str	r3, [r2, #0]
 80024d0:	4b81      	ldr	r3, [pc, #516]	; (80026d8 <HAL_RCC_OscConfig+0x2ac>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a80      	ldr	r2, [pc, #512]	; (80026d8 <HAL_RCC_OscConfig+0x2ac>)
 80024d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d013      	beq.n	800250c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e4:	f7ff fcd8 	bl	8001e98 <HAL_GetTick>
 80024e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ea:	e008      	b.n	80024fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024ec:	f7ff fcd4 	bl	8001e98 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b64      	cmp	r3, #100	; 0x64
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e1fb      	b.n	80028f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024fe:	4b76      	ldr	r3, [pc, #472]	; (80026d8 <HAL_RCC_OscConfig+0x2ac>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d0f0      	beq.n	80024ec <HAL_RCC_OscConfig+0xc0>
 800250a:	e014      	b.n	8002536 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250c:	f7ff fcc4 	bl	8001e98 <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002514:	f7ff fcc0 	bl	8001e98 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b64      	cmp	r3, #100	; 0x64
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e1e7      	b.n	80028f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002526:	4b6c      	ldr	r3, [pc, #432]	; (80026d8 <HAL_RCC_OscConfig+0x2ac>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1f0      	bne.n	8002514 <HAL_RCC_OscConfig+0xe8>
 8002532:	e000      	b.n	8002536 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d063      	beq.n	800260a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002542:	4b65      	ldr	r3, [pc, #404]	; (80026d8 <HAL_RCC_OscConfig+0x2ac>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f003 030c 	and.w	r3, r3, #12
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00b      	beq.n	8002566 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800254e:	4b62      	ldr	r3, [pc, #392]	; (80026d8 <HAL_RCC_OscConfig+0x2ac>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002556:	2b08      	cmp	r3, #8
 8002558:	d11c      	bne.n	8002594 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800255a:	4b5f      	ldr	r3, [pc, #380]	; (80026d8 <HAL_RCC_OscConfig+0x2ac>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d116      	bne.n	8002594 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002566:	4b5c      	ldr	r3, [pc, #368]	; (80026d8 <HAL_RCC_OscConfig+0x2ac>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d005      	beq.n	800257e <HAL_RCC_OscConfig+0x152>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d001      	beq.n	800257e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e1bb      	b.n	80028f6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800257e:	4b56      	ldr	r3, [pc, #344]	; (80026d8 <HAL_RCC_OscConfig+0x2ac>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	4952      	ldr	r1, [pc, #328]	; (80026d8 <HAL_RCC_OscConfig+0x2ac>)
 800258e:	4313      	orrs	r3, r2
 8002590:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002592:	e03a      	b.n	800260a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d020      	beq.n	80025de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800259c:	4b4f      	ldr	r3, [pc, #316]	; (80026dc <HAL_RCC_OscConfig+0x2b0>)
 800259e:	2201      	movs	r2, #1
 80025a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a2:	f7ff fc79 	bl	8001e98 <HAL_GetTick>
 80025a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a8:	e008      	b.n	80025bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025aa:	f7ff fc75 	bl	8001e98 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e19c      	b.n	80028f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025bc:	4b46      	ldr	r3, [pc, #280]	; (80026d8 <HAL_RCC_OscConfig+0x2ac>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d0f0      	beq.n	80025aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c8:	4b43      	ldr	r3, [pc, #268]	; (80026d8 <HAL_RCC_OscConfig+0x2ac>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	4940      	ldr	r1, [pc, #256]	; (80026d8 <HAL_RCC_OscConfig+0x2ac>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	600b      	str	r3, [r1, #0]
 80025dc:	e015      	b.n	800260a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025de:	4b3f      	ldr	r3, [pc, #252]	; (80026dc <HAL_RCC_OscConfig+0x2b0>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e4:	f7ff fc58 	bl	8001e98 <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025ec:	f7ff fc54 	bl	8001e98 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e17b      	b.n	80028f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025fe:	4b36      	ldr	r3, [pc, #216]	; (80026d8 <HAL_RCC_OscConfig+0x2ac>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1f0      	bne.n	80025ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0308 	and.w	r3, r3, #8
 8002612:	2b00      	cmp	r3, #0
 8002614:	d030      	beq.n	8002678 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d016      	beq.n	800264c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800261e:	4b30      	ldr	r3, [pc, #192]	; (80026e0 <HAL_RCC_OscConfig+0x2b4>)
 8002620:	2201      	movs	r2, #1
 8002622:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002624:	f7ff fc38 	bl	8001e98 <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800262c:	f7ff fc34 	bl	8001e98 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e15b      	b.n	80028f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800263e:	4b26      	ldr	r3, [pc, #152]	; (80026d8 <HAL_RCC_OscConfig+0x2ac>)
 8002640:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d0f0      	beq.n	800262c <HAL_RCC_OscConfig+0x200>
 800264a:	e015      	b.n	8002678 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800264c:	4b24      	ldr	r3, [pc, #144]	; (80026e0 <HAL_RCC_OscConfig+0x2b4>)
 800264e:	2200      	movs	r2, #0
 8002650:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002652:	f7ff fc21 	bl	8001e98 <HAL_GetTick>
 8002656:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002658:	e008      	b.n	800266c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800265a:	f7ff fc1d 	bl	8001e98 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e144      	b.n	80028f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800266c:	4b1a      	ldr	r3, [pc, #104]	; (80026d8 <HAL_RCC_OscConfig+0x2ac>)
 800266e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1f0      	bne.n	800265a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b00      	cmp	r3, #0
 8002682:	f000 80a0 	beq.w	80027c6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002686:	2300      	movs	r3, #0
 8002688:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800268a:	4b13      	ldr	r3, [pc, #76]	; (80026d8 <HAL_RCC_OscConfig+0x2ac>)
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10f      	bne.n	80026b6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002696:	2300      	movs	r3, #0
 8002698:	60bb      	str	r3, [r7, #8]
 800269a:	4b0f      	ldr	r3, [pc, #60]	; (80026d8 <HAL_RCC_OscConfig+0x2ac>)
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	4a0e      	ldr	r2, [pc, #56]	; (80026d8 <HAL_RCC_OscConfig+0x2ac>)
 80026a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026a4:	6413      	str	r3, [r2, #64]	; 0x40
 80026a6:	4b0c      	ldr	r3, [pc, #48]	; (80026d8 <HAL_RCC_OscConfig+0x2ac>)
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ae:	60bb      	str	r3, [r7, #8]
 80026b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026b2:	2301      	movs	r3, #1
 80026b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b6:	4b0b      	ldr	r3, [pc, #44]	; (80026e4 <HAL_RCC_OscConfig+0x2b8>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d121      	bne.n	8002706 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026c2:	4b08      	ldr	r3, [pc, #32]	; (80026e4 <HAL_RCC_OscConfig+0x2b8>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a07      	ldr	r2, [pc, #28]	; (80026e4 <HAL_RCC_OscConfig+0x2b8>)
 80026c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ce:	f7ff fbe3 	bl	8001e98 <HAL_GetTick>
 80026d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d4:	e011      	b.n	80026fa <HAL_RCC_OscConfig+0x2ce>
 80026d6:	bf00      	nop
 80026d8:	40023800 	.word	0x40023800
 80026dc:	42470000 	.word	0x42470000
 80026e0:	42470e80 	.word	0x42470e80
 80026e4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026e8:	f7ff fbd6 	bl	8001e98 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e0fd      	b.n	80028f6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026fa:	4b81      	ldr	r3, [pc, #516]	; (8002900 <HAL_RCC_OscConfig+0x4d4>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002702:	2b00      	cmp	r3, #0
 8002704:	d0f0      	beq.n	80026e8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d106      	bne.n	800271c <HAL_RCC_OscConfig+0x2f0>
 800270e:	4b7d      	ldr	r3, [pc, #500]	; (8002904 <HAL_RCC_OscConfig+0x4d8>)
 8002710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002712:	4a7c      	ldr	r2, [pc, #496]	; (8002904 <HAL_RCC_OscConfig+0x4d8>)
 8002714:	f043 0301 	orr.w	r3, r3, #1
 8002718:	6713      	str	r3, [r2, #112]	; 0x70
 800271a:	e01c      	b.n	8002756 <HAL_RCC_OscConfig+0x32a>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	2b05      	cmp	r3, #5
 8002722:	d10c      	bne.n	800273e <HAL_RCC_OscConfig+0x312>
 8002724:	4b77      	ldr	r3, [pc, #476]	; (8002904 <HAL_RCC_OscConfig+0x4d8>)
 8002726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002728:	4a76      	ldr	r2, [pc, #472]	; (8002904 <HAL_RCC_OscConfig+0x4d8>)
 800272a:	f043 0304 	orr.w	r3, r3, #4
 800272e:	6713      	str	r3, [r2, #112]	; 0x70
 8002730:	4b74      	ldr	r3, [pc, #464]	; (8002904 <HAL_RCC_OscConfig+0x4d8>)
 8002732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002734:	4a73      	ldr	r2, [pc, #460]	; (8002904 <HAL_RCC_OscConfig+0x4d8>)
 8002736:	f043 0301 	orr.w	r3, r3, #1
 800273a:	6713      	str	r3, [r2, #112]	; 0x70
 800273c:	e00b      	b.n	8002756 <HAL_RCC_OscConfig+0x32a>
 800273e:	4b71      	ldr	r3, [pc, #452]	; (8002904 <HAL_RCC_OscConfig+0x4d8>)
 8002740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002742:	4a70      	ldr	r2, [pc, #448]	; (8002904 <HAL_RCC_OscConfig+0x4d8>)
 8002744:	f023 0301 	bic.w	r3, r3, #1
 8002748:	6713      	str	r3, [r2, #112]	; 0x70
 800274a:	4b6e      	ldr	r3, [pc, #440]	; (8002904 <HAL_RCC_OscConfig+0x4d8>)
 800274c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800274e:	4a6d      	ldr	r2, [pc, #436]	; (8002904 <HAL_RCC_OscConfig+0x4d8>)
 8002750:	f023 0304 	bic.w	r3, r3, #4
 8002754:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d015      	beq.n	800278a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800275e:	f7ff fb9b 	bl	8001e98 <HAL_GetTick>
 8002762:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002764:	e00a      	b.n	800277c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002766:	f7ff fb97 	bl	8001e98 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	f241 3288 	movw	r2, #5000	; 0x1388
 8002774:	4293      	cmp	r3, r2
 8002776:	d901      	bls.n	800277c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e0bc      	b.n	80028f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800277c:	4b61      	ldr	r3, [pc, #388]	; (8002904 <HAL_RCC_OscConfig+0x4d8>)
 800277e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d0ee      	beq.n	8002766 <HAL_RCC_OscConfig+0x33a>
 8002788:	e014      	b.n	80027b4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800278a:	f7ff fb85 	bl	8001e98 <HAL_GetTick>
 800278e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002790:	e00a      	b.n	80027a8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002792:	f7ff fb81 	bl	8001e98 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e0a6      	b.n	80028f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027a8:	4b56      	ldr	r3, [pc, #344]	; (8002904 <HAL_RCC_OscConfig+0x4d8>)
 80027aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1ee      	bne.n	8002792 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027b4:	7dfb      	ldrb	r3, [r7, #23]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d105      	bne.n	80027c6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027ba:	4b52      	ldr	r3, [pc, #328]	; (8002904 <HAL_RCC_OscConfig+0x4d8>)
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	4a51      	ldr	r2, [pc, #324]	; (8002904 <HAL_RCC_OscConfig+0x4d8>)
 80027c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	f000 8092 	beq.w	80028f4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027d0:	4b4c      	ldr	r3, [pc, #304]	; (8002904 <HAL_RCC_OscConfig+0x4d8>)
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f003 030c 	and.w	r3, r3, #12
 80027d8:	2b08      	cmp	r3, #8
 80027da:	d05c      	beq.n	8002896 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d141      	bne.n	8002868 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027e4:	4b48      	ldr	r3, [pc, #288]	; (8002908 <HAL_RCC_OscConfig+0x4dc>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ea:	f7ff fb55 	bl	8001e98 <HAL_GetTick>
 80027ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027f0:	e008      	b.n	8002804 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027f2:	f7ff fb51 	bl	8001e98 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e078      	b.n	80028f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002804:	4b3f      	ldr	r3, [pc, #252]	; (8002904 <HAL_RCC_OscConfig+0x4d8>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1f0      	bne.n	80027f2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	69da      	ldr	r2, [r3, #28]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a1b      	ldr	r3, [r3, #32]
 8002818:	431a      	orrs	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281e:	019b      	lsls	r3, r3, #6
 8002820:	431a      	orrs	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002826:	085b      	lsrs	r3, r3, #1
 8002828:	3b01      	subs	r3, #1
 800282a:	041b      	lsls	r3, r3, #16
 800282c:	431a      	orrs	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002832:	061b      	lsls	r3, r3, #24
 8002834:	4933      	ldr	r1, [pc, #204]	; (8002904 <HAL_RCC_OscConfig+0x4d8>)
 8002836:	4313      	orrs	r3, r2
 8002838:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800283a:	4b33      	ldr	r3, [pc, #204]	; (8002908 <HAL_RCC_OscConfig+0x4dc>)
 800283c:	2201      	movs	r2, #1
 800283e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002840:	f7ff fb2a 	bl	8001e98 <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002848:	f7ff fb26 	bl	8001e98 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e04d      	b.n	80028f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800285a:	4b2a      	ldr	r3, [pc, #168]	; (8002904 <HAL_RCC_OscConfig+0x4d8>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d0f0      	beq.n	8002848 <HAL_RCC_OscConfig+0x41c>
 8002866:	e045      	b.n	80028f4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002868:	4b27      	ldr	r3, [pc, #156]	; (8002908 <HAL_RCC_OscConfig+0x4dc>)
 800286a:	2200      	movs	r2, #0
 800286c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286e:	f7ff fb13 	bl	8001e98 <HAL_GetTick>
 8002872:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002874:	e008      	b.n	8002888 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002876:	f7ff fb0f 	bl	8001e98 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d901      	bls.n	8002888 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e036      	b.n	80028f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002888:	4b1e      	ldr	r3, [pc, #120]	; (8002904 <HAL_RCC_OscConfig+0x4d8>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d1f0      	bne.n	8002876 <HAL_RCC_OscConfig+0x44a>
 8002894:	e02e      	b.n	80028f4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	699b      	ldr	r3, [r3, #24]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d101      	bne.n	80028a2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e029      	b.n	80028f6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028a2:	4b18      	ldr	r3, [pc, #96]	; (8002904 <HAL_RCC_OscConfig+0x4d8>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d11c      	bne.n	80028f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d115      	bne.n	80028f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028ca:	4013      	ands	r3, r2
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d10d      	bne.n	80028f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80028de:	429a      	cmp	r2, r3
 80028e0:	d106      	bne.n	80028f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d001      	beq.n	80028f4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e000      	b.n	80028f6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3718      	adds	r7, #24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40007000 	.word	0x40007000
 8002904:	40023800 	.word	0x40023800
 8002908:	42470060 	.word	0x42470060

0800290c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e0cc      	b.n	8002aba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002920:	4b68      	ldr	r3, [pc, #416]	; (8002ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 030f 	and.w	r3, r3, #15
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	429a      	cmp	r2, r3
 800292c:	d90c      	bls.n	8002948 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800292e:	4b65      	ldr	r3, [pc, #404]	; (8002ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002936:	4b63      	ldr	r3, [pc, #396]	; (8002ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 030f 	and.w	r3, r3, #15
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	429a      	cmp	r2, r3
 8002942:	d001      	beq.n	8002948 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e0b8      	b.n	8002aba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d020      	beq.n	8002996 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0304 	and.w	r3, r3, #4
 800295c:	2b00      	cmp	r3, #0
 800295e:	d005      	beq.n	800296c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002960:	4b59      	ldr	r3, [pc, #356]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	4a58      	ldr	r2, [pc, #352]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002966:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800296a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0308 	and.w	r3, r3, #8
 8002974:	2b00      	cmp	r3, #0
 8002976:	d005      	beq.n	8002984 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002978:	4b53      	ldr	r3, [pc, #332]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	4a52      	ldr	r2, [pc, #328]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 800297e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002982:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002984:	4b50      	ldr	r3, [pc, #320]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	494d      	ldr	r1, [pc, #308]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002992:	4313      	orrs	r3, r2
 8002994:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d044      	beq.n	8002a2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d107      	bne.n	80029ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029aa:	4b47      	ldr	r3, [pc, #284]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d119      	bne.n	80029ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e07f      	b.n	8002aba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d003      	beq.n	80029ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029c6:	2b03      	cmp	r3, #3
 80029c8:	d107      	bne.n	80029da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ca:	4b3f      	ldr	r3, [pc, #252]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d109      	bne.n	80029ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e06f      	b.n	8002aba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029da:	4b3b      	ldr	r3, [pc, #236]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e067      	b.n	8002aba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ea:	4b37      	ldr	r3, [pc, #220]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f023 0203 	bic.w	r2, r3, #3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	4934      	ldr	r1, [pc, #208]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029fc:	f7ff fa4c 	bl	8001e98 <HAL_GetTick>
 8002a00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a02:	e00a      	b.n	8002a1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a04:	f7ff fa48 	bl	8001e98 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e04f      	b.n	8002aba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a1a:	4b2b      	ldr	r3, [pc, #172]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 020c 	and.w	r2, r3, #12
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d1eb      	bne.n	8002a04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a2c:	4b25      	ldr	r3, [pc, #148]	; (8002ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 030f 	and.w	r3, r3, #15
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d20c      	bcs.n	8002a54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a3a:	4b22      	ldr	r3, [pc, #136]	; (8002ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	b2d2      	uxtb	r2, r2
 8002a40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a42:	4b20      	ldr	r3, [pc, #128]	; (8002ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 030f 	and.w	r3, r3, #15
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d001      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e032      	b.n	8002aba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0304 	and.w	r3, r3, #4
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d008      	beq.n	8002a72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a60:	4b19      	ldr	r3, [pc, #100]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	4916      	ldr	r1, [pc, #88]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0308 	and.w	r3, r3, #8
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d009      	beq.n	8002a92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a7e:	4b12      	ldr	r3, [pc, #72]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	490e      	ldr	r1, [pc, #56]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a92:	f000 f821 	bl	8002ad8 <HAL_RCC_GetSysClockFreq>
 8002a96:	4601      	mov	r1, r0
 8002a98:	4b0b      	ldr	r3, [pc, #44]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	091b      	lsrs	r3, r3, #4
 8002a9e:	f003 030f 	and.w	r3, r3, #15
 8002aa2:	4a0a      	ldr	r2, [pc, #40]	; (8002acc <HAL_RCC_ClockConfig+0x1c0>)
 8002aa4:	5cd3      	ldrb	r3, [r2, r3]
 8002aa6:	fa21 f303 	lsr.w	r3, r1, r3
 8002aaa:	4a09      	ldr	r2, [pc, #36]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8002aac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002aae:	4b09      	ldr	r3, [pc, #36]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff f9ac 	bl	8001e10 <HAL_InitTick>

  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	40023c00 	.word	0x40023c00
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	08004e90 	.word	0x08004e90
 8002ad0:	20000028 	.word	0x20000028
 8002ad4:	2000002c 	.word	0x2000002c

08002ad8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	607b      	str	r3, [r7, #4]
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	60fb      	str	r3, [r7, #12]
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002aea:	2300      	movs	r3, #0
 8002aec:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002aee:	4b50      	ldr	r3, [pc, #320]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x158>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f003 030c 	and.w	r3, r3, #12
 8002af6:	2b04      	cmp	r3, #4
 8002af8:	d007      	beq.n	8002b0a <HAL_RCC_GetSysClockFreq+0x32>
 8002afa:	2b08      	cmp	r3, #8
 8002afc:	d008      	beq.n	8002b10 <HAL_RCC_GetSysClockFreq+0x38>
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f040 808d 	bne.w	8002c1e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b04:	4b4b      	ldr	r3, [pc, #300]	; (8002c34 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002b06:	60bb      	str	r3, [r7, #8]
       break;
 8002b08:	e08c      	b.n	8002c24 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b0a:	4b4b      	ldr	r3, [pc, #300]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x160>)
 8002b0c:	60bb      	str	r3, [r7, #8]
      break;
 8002b0e:	e089      	b.n	8002c24 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b10:	4b47      	ldr	r3, [pc, #284]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x158>)
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b18:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b1a:	4b45      	ldr	r3, [pc, #276]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x158>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d023      	beq.n	8002b6e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b26:	4b42      	ldr	r3, [pc, #264]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x158>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	099b      	lsrs	r3, r3, #6
 8002b2c:	f04f 0400 	mov.w	r4, #0
 8002b30:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b34:	f04f 0200 	mov.w	r2, #0
 8002b38:	ea03 0501 	and.w	r5, r3, r1
 8002b3c:	ea04 0602 	and.w	r6, r4, r2
 8002b40:	4a3d      	ldr	r2, [pc, #244]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x160>)
 8002b42:	fb02 f106 	mul.w	r1, r2, r6
 8002b46:	2200      	movs	r2, #0
 8002b48:	fb02 f205 	mul.w	r2, r2, r5
 8002b4c:	440a      	add	r2, r1
 8002b4e:	493a      	ldr	r1, [pc, #232]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x160>)
 8002b50:	fba5 0101 	umull	r0, r1, r5, r1
 8002b54:	1853      	adds	r3, r2, r1
 8002b56:	4619      	mov	r1, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f04f 0400 	mov.w	r4, #0
 8002b5e:	461a      	mov	r2, r3
 8002b60:	4623      	mov	r3, r4
 8002b62:	f7fd fb95 	bl	8000290 <__aeabi_uldivmod>
 8002b66:	4603      	mov	r3, r0
 8002b68:	460c      	mov	r4, r1
 8002b6a:	60fb      	str	r3, [r7, #12]
 8002b6c:	e049      	b.n	8002c02 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b6e:	4b30      	ldr	r3, [pc, #192]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x158>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	099b      	lsrs	r3, r3, #6
 8002b74:	f04f 0400 	mov.w	r4, #0
 8002b78:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b7c:	f04f 0200 	mov.w	r2, #0
 8002b80:	ea03 0501 	and.w	r5, r3, r1
 8002b84:	ea04 0602 	and.w	r6, r4, r2
 8002b88:	4629      	mov	r1, r5
 8002b8a:	4632      	mov	r2, r6
 8002b8c:	f04f 0300 	mov.w	r3, #0
 8002b90:	f04f 0400 	mov.w	r4, #0
 8002b94:	0154      	lsls	r4, r2, #5
 8002b96:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002b9a:	014b      	lsls	r3, r1, #5
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4622      	mov	r2, r4
 8002ba0:	1b49      	subs	r1, r1, r5
 8002ba2:	eb62 0206 	sbc.w	r2, r2, r6
 8002ba6:	f04f 0300 	mov.w	r3, #0
 8002baa:	f04f 0400 	mov.w	r4, #0
 8002bae:	0194      	lsls	r4, r2, #6
 8002bb0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002bb4:	018b      	lsls	r3, r1, #6
 8002bb6:	1a5b      	subs	r3, r3, r1
 8002bb8:	eb64 0402 	sbc.w	r4, r4, r2
 8002bbc:	f04f 0100 	mov.w	r1, #0
 8002bc0:	f04f 0200 	mov.w	r2, #0
 8002bc4:	00e2      	lsls	r2, r4, #3
 8002bc6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002bca:	00d9      	lsls	r1, r3, #3
 8002bcc:	460b      	mov	r3, r1
 8002bce:	4614      	mov	r4, r2
 8002bd0:	195b      	adds	r3, r3, r5
 8002bd2:	eb44 0406 	adc.w	r4, r4, r6
 8002bd6:	f04f 0100 	mov.w	r1, #0
 8002bda:	f04f 0200 	mov.w	r2, #0
 8002bde:	02a2      	lsls	r2, r4, #10
 8002be0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002be4:	0299      	lsls	r1, r3, #10
 8002be6:	460b      	mov	r3, r1
 8002be8:	4614      	mov	r4, r2
 8002bea:	4618      	mov	r0, r3
 8002bec:	4621      	mov	r1, r4
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f04f 0400 	mov.w	r4, #0
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	4623      	mov	r3, r4
 8002bf8:	f7fd fb4a 	bl	8000290 <__aeabi_uldivmod>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	460c      	mov	r4, r1
 8002c00:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c02:	4b0b      	ldr	r3, [pc, #44]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x158>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	0c1b      	lsrs	r3, r3, #16
 8002c08:	f003 0303 	and.w	r3, r3, #3
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c1a:	60bb      	str	r3, [r7, #8]
      break;
 8002c1c:	e002      	b.n	8002c24 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c1e:	4b05      	ldr	r3, [pc, #20]	; (8002c34 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002c20:	60bb      	str	r3, [r7, #8]
      break;
 8002c22:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c24:	68bb      	ldr	r3, [r7, #8]
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3714      	adds	r7, #20
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	40023800 	.word	0x40023800
 8002c34:	00f42400 	.word	0x00f42400
 8002c38:	017d7840 	.word	0x017d7840

08002c3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c40:	4b03      	ldr	r3, [pc, #12]	; (8002c50 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c42:	681b      	ldr	r3, [r3, #0]
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	20000028 	.word	0x20000028

08002c54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c58:	f7ff fff0 	bl	8002c3c <HAL_RCC_GetHCLKFreq>
 8002c5c:	4601      	mov	r1, r0
 8002c5e:	4b05      	ldr	r3, [pc, #20]	; (8002c74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	0a9b      	lsrs	r3, r3, #10
 8002c64:	f003 0307 	and.w	r3, r3, #7
 8002c68:	4a03      	ldr	r2, [pc, #12]	; (8002c78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c6a:	5cd3      	ldrb	r3, [r2, r3]
 8002c6c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	40023800 	.word	0x40023800
 8002c78:	08004ea0 	.word	0x08004ea0

08002c7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c80:	f7ff ffdc 	bl	8002c3c <HAL_RCC_GetHCLKFreq>
 8002c84:	4601      	mov	r1, r0
 8002c86:	4b05      	ldr	r3, [pc, #20]	; (8002c9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	0b5b      	lsrs	r3, r3, #13
 8002c8c:	f003 0307 	and.w	r3, r3, #7
 8002c90:	4a03      	ldr	r2, [pc, #12]	; (8002ca0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c92:	5cd3      	ldrb	r3, [r2, r3]
 8002c94:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	08004ea0 	.word	0x08004ea0

08002ca4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e056      	b.n	8002d64 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d106      	bne.n	8002cd6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f7fe ff4b 	bl	8001b6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2202      	movs	r2, #2
 8002cda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cec:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685a      	ldr	r2, [r3, #4]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	431a      	orrs	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	431a      	orrs	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d12:	431a      	orrs	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	69db      	ldr	r3, [r3, #28]
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
 8002d1e:	ea42 0103 	orr.w	r1, r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	0c1b      	lsrs	r3, r3, #16
 8002d34:	f003 0104 	and.w	r1, r3, #4
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	430a      	orrs	r2, r1
 8002d42:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	69da      	ldr	r2, [r3, #28]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d52:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3708      	adds	r7, #8
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b088      	sub	sp, #32
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	603b      	str	r3, [r7, #0]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d101      	bne.n	8002d8e <HAL_SPI_Transmit+0x22>
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	e11e      	b.n	8002fcc <HAL_SPI_Transmit+0x260>
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d96:	f7ff f87f 	bl	8001e98 <HAL_GetTick>
 8002d9a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002d9c:	88fb      	ldrh	r3, [r7, #6]
 8002d9e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d002      	beq.n	8002db2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002dac:	2302      	movs	r3, #2
 8002dae:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002db0:	e103      	b.n	8002fba <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d002      	beq.n	8002dbe <HAL_SPI_Transmit+0x52>
 8002db8:	88fb      	ldrh	r3, [r7, #6]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d102      	bne.n	8002dc4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002dc2:	e0fa      	b.n	8002fba <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2203      	movs	r2, #3
 8002dc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	68ba      	ldr	r2, [r7, #8]
 8002dd6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	88fa      	ldrh	r2, [r7, #6]
 8002ddc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	88fa      	ldrh	r2, [r7, #6]
 8002de2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2200      	movs	r2, #0
 8002de8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e0a:	d107      	bne.n	8002e1c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e1a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e26:	2b40      	cmp	r3, #64	; 0x40
 8002e28:	d007      	beq.n	8002e3a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e38:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e42:	d14b      	bne.n	8002edc <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d002      	beq.n	8002e52 <HAL_SPI_Transmit+0xe6>
 8002e4c:	8afb      	ldrh	r3, [r7, #22]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d13e      	bne.n	8002ed0 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e56:	881a      	ldrh	r2, [r3, #0]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e62:	1c9a      	adds	r2, r3, #2
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002e76:	e02b      	b.n	8002ed0 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d112      	bne.n	8002eac <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8a:	881a      	ldrh	r2, [r3, #0]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e96:	1c9a      	adds	r2, r3, #2
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	b29a      	uxth	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	86da      	strh	r2, [r3, #54]	; 0x36
 8002eaa:	e011      	b.n	8002ed0 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002eac:	f7fe fff4 	bl	8001e98 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	683a      	ldr	r2, [r7, #0]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d803      	bhi.n	8002ec4 <HAL_SPI_Transmit+0x158>
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ec2:	d102      	bne.n	8002eca <HAL_SPI_Transmit+0x15e>
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d102      	bne.n	8002ed0 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ece:	e074      	b.n	8002fba <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1ce      	bne.n	8002e78 <HAL_SPI_Transmit+0x10c>
 8002eda:	e04c      	b.n	8002f76 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d002      	beq.n	8002eea <HAL_SPI_Transmit+0x17e>
 8002ee4:	8afb      	ldrh	r3, [r7, #22]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d140      	bne.n	8002f6c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	330c      	adds	r3, #12
 8002ef4:	7812      	ldrb	r2, [r2, #0]
 8002ef6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efc:	1c5a      	adds	r2, r3, #1
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002f10:	e02c      	b.n	8002f6c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d113      	bne.n	8002f48 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	330c      	adds	r3, #12
 8002f2a:	7812      	ldrb	r2, [r2, #0]
 8002f2c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f32:	1c5a      	adds	r2, r3, #1
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	86da      	strh	r2, [r3, #54]	; 0x36
 8002f46:	e011      	b.n	8002f6c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f48:	f7fe ffa6 	bl	8001e98 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	683a      	ldr	r2, [r7, #0]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d803      	bhi.n	8002f60 <HAL_SPI_Transmit+0x1f4>
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f5e:	d102      	bne.n	8002f66 <HAL_SPI_Transmit+0x1fa>
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d102      	bne.n	8002f6c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002f6a:	e026      	b.n	8002fba <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1cd      	bne.n	8002f12 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	6839      	ldr	r1, [r7, #0]
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	f000 fba4 	bl	80036c8 <SPI_EndRxTxTransaction>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d002      	beq.n	8002f8c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2220      	movs	r2, #32
 8002f8a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d10a      	bne.n	8002faa <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f94:	2300      	movs	r3, #0
 8002f96:	613b      	str	r3, [r7, #16]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	613b      	str	r3, [r7, #16]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	613b      	str	r3, [r7, #16]
 8002fa8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d002      	beq.n	8002fb8 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	77fb      	strb	r3, [r7, #31]
 8002fb6:	e000      	b.n	8002fba <HAL_SPI_Transmit+0x24e>
  }

error:
 8002fb8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002fca:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3720      	adds	r7, #32
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b088      	sub	sp, #32
 8002fd8:	af02      	add	r7, sp, #8
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	603b      	str	r3, [r7, #0]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ff0:	d112      	bne.n	8003018 <HAL_SPI_Receive+0x44>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10e      	bne.n	8003018 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2204      	movs	r2, #4
 8002ffe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003002:	88fa      	ldrh	r2, [r7, #6]
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	9300      	str	r3, [sp, #0]
 8003008:	4613      	mov	r3, r2
 800300a:	68ba      	ldr	r2, [r7, #8]
 800300c:	68b9      	ldr	r1, [r7, #8]
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f000 f8e9 	bl	80031e6 <HAL_SPI_TransmitReceive>
 8003014:	4603      	mov	r3, r0
 8003016:	e0e2      	b.n	80031de <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800301e:	2b01      	cmp	r3, #1
 8003020:	d101      	bne.n	8003026 <HAL_SPI_Receive+0x52>
 8003022:	2302      	movs	r3, #2
 8003024:	e0db      	b.n	80031de <HAL_SPI_Receive+0x20a>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800302e:	f7fe ff33 	bl	8001e98 <HAL_GetTick>
 8003032:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800303a:	b2db      	uxtb	r3, r3
 800303c:	2b01      	cmp	r3, #1
 800303e:	d002      	beq.n	8003046 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003040:	2302      	movs	r3, #2
 8003042:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003044:	e0c2      	b.n	80031cc <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d002      	beq.n	8003052 <HAL_SPI_Receive+0x7e>
 800304c:	88fb      	ldrh	r3, [r7, #6]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d102      	bne.n	8003058 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003056:	e0b9      	b.n	80031cc <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2204      	movs	r2, #4
 800305c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	68ba      	ldr	r2, [r7, #8]
 800306a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	88fa      	ldrh	r2, [r7, #6]
 8003070:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	88fa      	ldrh	r2, [r7, #6]
 8003076:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800309e:	d107      	bne.n	80030b0 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80030ae:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ba:	2b40      	cmp	r3, #64	; 0x40
 80030bc:	d007      	beq.n	80030ce <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030cc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d162      	bne.n	800319c <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80030d6:	e02e      	b.n	8003136 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d115      	bne.n	8003112 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f103 020c 	add.w	r2, r3, #12
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f2:	7812      	ldrb	r2, [r2, #0]
 80030f4:	b2d2      	uxtb	r2, r2
 80030f6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030fc:	1c5a      	adds	r2, r3, #1
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003106:	b29b      	uxth	r3, r3
 8003108:	3b01      	subs	r3, #1
 800310a:	b29a      	uxth	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003110:	e011      	b.n	8003136 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003112:	f7fe fec1 	bl	8001e98 <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	683a      	ldr	r2, [r7, #0]
 800311e:	429a      	cmp	r2, r3
 8003120:	d803      	bhi.n	800312a <HAL_SPI_Receive+0x156>
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003128:	d102      	bne.n	8003130 <HAL_SPI_Receive+0x15c>
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d102      	bne.n	8003136 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003134:	e04a      	b.n	80031cc <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800313a:	b29b      	uxth	r3, r3
 800313c:	2b00      	cmp	r3, #0
 800313e:	d1cb      	bne.n	80030d8 <HAL_SPI_Receive+0x104>
 8003140:	e031      	b.n	80031a6 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	2b01      	cmp	r3, #1
 800314e:	d113      	bne.n	8003178 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68da      	ldr	r2, [r3, #12]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315a:	b292      	uxth	r2, r2
 800315c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003162:	1c9a      	adds	r2, r3, #2
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800316c:	b29b      	uxth	r3, r3
 800316e:	3b01      	subs	r3, #1
 8003170:	b29a      	uxth	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003176:	e011      	b.n	800319c <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003178:	f7fe fe8e 	bl	8001e98 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	683a      	ldr	r2, [r7, #0]
 8003184:	429a      	cmp	r2, r3
 8003186:	d803      	bhi.n	8003190 <HAL_SPI_Receive+0x1bc>
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800318e:	d102      	bne.n	8003196 <HAL_SPI_Receive+0x1c2>
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d102      	bne.n	800319c <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	75fb      	strb	r3, [r7, #23]
          goto error;
 800319a:	e017      	b.n	80031cc <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1cd      	bne.n	8003142 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	6839      	ldr	r1, [r7, #0]
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f000 fa27 	bl	80035fe <SPI_EndRxTransaction>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d002      	beq.n	80031bc <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2220      	movs	r2, #32
 80031ba:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d002      	beq.n	80031ca <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	75fb      	strb	r3, [r7, #23]
 80031c8:	e000      	b.n	80031cc <HAL_SPI_Receive+0x1f8>
  }

error :
 80031ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80031dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3718      	adds	r7, #24
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b08c      	sub	sp, #48	; 0x30
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	60f8      	str	r0, [r7, #12]
 80031ee:	60b9      	str	r1, [r7, #8]
 80031f0:	607a      	str	r2, [r7, #4]
 80031f2:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80031f4:	2301      	movs	r3, #1
 80031f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80031f8:	2300      	movs	r3, #0
 80031fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003204:	2b01      	cmp	r3, #1
 8003206:	d101      	bne.n	800320c <HAL_SPI_TransmitReceive+0x26>
 8003208:	2302      	movs	r3, #2
 800320a:	e18a      	b.n	8003522 <HAL_SPI_TransmitReceive+0x33c>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003214:	f7fe fe40 	bl	8001e98 <HAL_GetTick>
 8003218:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003220:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800322a:	887b      	ldrh	r3, [r7, #2]
 800322c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800322e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003232:	2b01      	cmp	r3, #1
 8003234:	d00f      	beq.n	8003256 <HAL_SPI_TransmitReceive+0x70>
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800323c:	d107      	bne.n	800324e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d103      	bne.n	800324e <HAL_SPI_TransmitReceive+0x68>
 8003246:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800324a:	2b04      	cmp	r3, #4
 800324c:	d003      	beq.n	8003256 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800324e:	2302      	movs	r3, #2
 8003250:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003254:	e15b      	b.n	800350e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d005      	beq.n	8003268 <HAL_SPI_TransmitReceive+0x82>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d002      	beq.n	8003268 <HAL_SPI_TransmitReceive+0x82>
 8003262:	887b      	ldrh	r3, [r7, #2]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d103      	bne.n	8003270 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800326e:	e14e      	b.n	800350e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b04      	cmp	r3, #4
 800327a:	d003      	beq.n	8003284 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2205      	movs	r2, #5
 8003280:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	887a      	ldrh	r2, [r7, #2]
 8003294:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	887a      	ldrh	r2, [r7, #2]
 800329a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	68ba      	ldr	r2, [r7, #8]
 80032a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	887a      	ldrh	r2, [r7, #2]
 80032a6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	887a      	ldrh	r2, [r7, #2]
 80032ac:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c4:	2b40      	cmp	r3, #64	; 0x40
 80032c6:	d007      	beq.n	80032d8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032e0:	d178      	bne.n	80033d4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d002      	beq.n	80032f0 <HAL_SPI_TransmitReceive+0x10a>
 80032ea:	8b7b      	ldrh	r3, [r7, #26]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d166      	bne.n	80033be <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f4:	881a      	ldrh	r2, [r3, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003300:	1c9a      	adds	r2, r3, #2
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800330a:	b29b      	uxth	r3, r3
 800330c:	3b01      	subs	r3, #1
 800330e:	b29a      	uxth	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003314:	e053      	b.n	80033be <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f003 0302 	and.w	r3, r3, #2
 8003320:	2b02      	cmp	r3, #2
 8003322:	d11b      	bne.n	800335c <HAL_SPI_TransmitReceive+0x176>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003328:	b29b      	uxth	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d016      	beq.n	800335c <HAL_SPI_TransmitReceive+0x176>
 800332e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003330:	2b01      	cmp	r3, #1
 8003332:	d113      	bne.n	800335c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003338:	881a      	ldrh	r2, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003344:	1c9a      	adds	r2, r3, #2
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800334e:	b29b      	uxth	r3, r3
 8003350:	3b01      	subs	r3, #1
 8003352:	b29a      	uxth	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003358:	2300      	movs	r3, #0
 800335a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b01      	cmp	r3, #1
 8003368:	d119      	bne.n	800339e <HAL_SPI_TransmitReceive+0x1b8>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800336e:	b29b      	uxth	r3, r3
 8003370:	2b00      	cmp	r3, #0
 8003372:	d014      	beq.n	800339e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68da      	ldr	r2, [r3, #12]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337e:	b292      	uxth	r2, r2
 8003380:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003386:	1c9a      	adds	r2, r3, #2
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003390:	b29b      	uxth	r3, r3
 8003392:	3b01      	subs	r3, #1
 8003394:	b29a      	uxth	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800339a:	2301      	movs	r3, #1
 800339c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800339e:	f7fe fd7b 	bl	8001e98 <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d807      	bhi.n	80033be <HAL_SPI_TransmitReceive+0x1d8>
 80033ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033b4:	d003      	beq.n	80033be <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80033bc:	e0a7      	b.n	800350e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1a6      	bne.n	8003316 <HAL_SPI_TransmitReceive+0x130>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1a1      	bne.n	8003316 <HAL_SPI_TransmitReceive+0x130>
 80033d2:	e07c      	b.n	80034ce <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d002      	beq.n	80033e2 <HAL_SPI_TransmitReceive+0x1fc>
 80033dc:	8b7b      	ldrh	r3, [r7, #26]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d16b      	bne.n	80034ba <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	330c      	adds	r3, #12
 80033ec:	7812      	ldrb	r2, [r2, #0]
 80033ee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f4:	1c5a      	adds	r2, r3, #1
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033fe:	b29b      	uxth	r3, r3
 8003400:	3b01      	subs	r3, #1
 8003402:	b29a      	uxth	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003408:	e057      	b.n	80034ba <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	2b02      	cmp	r3, #2
 8003416:	d11c      	bne.n	8003452 <HAL_SPI_TransmitReceive+0x26c>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800341c:	b29b      	uxth	r3, r3
 800341e:	2b00      	cmp	r3, #0
 8003420:	d017      	beq.n	8003452 <HAL_SPI_TransmitReceive+0x26c>
 8003422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003424:	2b01      	cmp	r3, #1
 8003426:	d114      	bne.n	8003452 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	330c      	adds	r3, #12
 8003432:	7812      	ldrb	r2, [r2, #0]
 8003434:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343a:	1c5a      	adds	r2, r3, #1
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003444:	b29b      	uxth	r3, r3
 8003446:	3b01      	subs	r3, #1
 8003448:	b29a      	uxth	r2, r3
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800344e:	2300      	movs	r3, #0
 8003450:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	2b01      	cmp	r3, #1
 800345e:	d119      	bne.n	8003494 <HAL_SPI_TransmitReceive+0x2ae>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003464:	b29b      	uxth	r3, r3
 8003466:	2b00      	cmp	r3, #0
 8003468:	d014      	beq.n	8003494 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68da      	ldr	r2, [r3, #12]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003474:	b2d2      	uxtb	r2, r2
 8003476:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800347c:	1c5a      	adds	r2, r3, #1
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003486:	b29b      	uxth	r3, r3
 8003488:	3b01      	subs	r3, #1
 800348a:	b29a      	uxth	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003490:	2301      	movs	r3, #1
 8003492:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003494:	f7fe fd00 	bl	8001e98 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d803      	bhi.n	80034ac <HAL_SPI_TransmitReceive+0x2c6>
 80034a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034aa:	d102      	bne.n	80034b2 <HAL_SPI_TransmitReceive+0x2cc>
 80034ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d103      	bne.n	80034ba <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80034b8:	e029      	b.n	800350e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034be:	b29b      	uxth	r3, r3
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1a2      	bne.n	800340a <HAL_SPI_TransmitReceive+0x224>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d19d      	bne.n	800340a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	f000 f8f8 	bl	80036c8 <SPI_EndRxTxTransaction>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d006      	beq.n	80034ec <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2220      	movs	r2, #32
 80034e8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80034ea:	e010      	b.n	800350e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d10b      	bne.n	800350c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034f4:	2300      	movs	r3, #0
 80034f6:	617b      	str	r3, [r7, #20]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	617b      	str	r3, [r7, #20]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	617b      	str	r3, [r7, #20]
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	e000      	b.n	800350e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800350c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2201      	movs	r2, #1
 8003512:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800351e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003522:	4618      	mov	r0, r3
 8003524:	3730      	adds	r7, #48	; 0x30
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b084      	sub	sp, #16
 800352e:	af00      	add	r7, sp, #0
 8003530:	60f8      	str	r0, [r7, #12]
 8003532:	60b9      	str	r1, [r7, #8]
 8003534:	603b      	str	r3, [r7, #0]
 8003536:	4613      	mov	r3, r2
 8003538:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800353a:	e04c      	b.n	80035d6 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003542:	d048      	beq.n	80035d6 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003544:	f7fe fca8 	bl	8001e98 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	683a      	ldr	r2, [r7, #0]
 8003550:	429a      	cmp	r2, r3
 8003552:	d902      	bls.n	800355a <SPI_WaitFlagStateUntilTimeout+0x30>
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d13d      	bne.n	80035d6 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	685a      	ldr	r2, [r3, #4]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003568:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003572:	d111      	bne.n	8003598 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800357c:	d004      	beq.n	8003588 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003586:	d107      	bne.n	8003598 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003596:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035a0:	d10f      	bne.n	80035c2 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035b0:	601a      	str	r2, [r3, #0]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e00f      	b.n	80035f6 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	4013      	ands	r3, r2
 80035e0:	68ba      	ldr	r2, [r7, #8]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	bf0c      	ite	eq
 80035e6:	2301      	moveq	r3, #1
 80035e8:	2300      	movne	r3, #0
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	461a      	mov	r2, r3
 80035ee:	79fb      	ldrb	r3, [r7, #7]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d1a3      	bne.n	800353c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	b086      	sub	sp, #24
 8003602:	af02      	add	r7, sp, #8
 8003604:	60f8      	str	r0, [r7, #12]
 8003606:	60b9      	str	r1, [r7, #8]
 8003608:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003612:	d111      	bne.n	8003638 <SPI_EndRxTransaction+0x3a>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800361c:	d004      	beq.n	8003628 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003626:	d107      	bne.n	8003638 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003636:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003640:	d12a      	bne.n	8003698 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800364a:	d012      	beq.n	8003672 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	9300      	str	r3, [sp, #0]
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	2200      	movs	r2, #0
 8003654:	2180      	movs	r1, #128	; 0x80
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	f7ff ff67 	bl	800352a <SPI_WaitFlagStateUntilTimeout>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d02d      	beq.n	80036be <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003666:	f043 0220 	orr.w	r2, r3, #32
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e026      	b.n	80036c0 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	9300      	str	r3, [sp, #0]
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	2200      	movs	r2, #0
 800367a:	2101      	movs	r1, #1
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	f7ff ff54 	bl	800352a <SPI_WaitFlagStateUntilTimeout>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d01a      	beq.n	80036be <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800368c:	f043 0220 	orr.w	r2, r3, #32
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e013      	b.n	80036c0 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	9300      	str	r3, [sp, #0]
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	2200      	movs	r2, #0
 80036a0:	2101      	movs	r1, #1
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f7ff ff41 	bl	800352a <SPI_WaitFlagStateUntilTimeout>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d007      	beq.n	80036be <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b2:	f043 0220 	orr.w	r2, r3, #32
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e000      	b.n	80036c0 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b088      	sub	sp, #32
 80036cc:	af02      	add	r7, sp, #8
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80036d4:	4b1b      	ldr	r3, [pc, #108]	; (8003744 <SPI_EndRxTxTransaction+0x7c>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a1b      	ldr	r2, [pc, #108]	; (8003748 <SPI_EndRxTxTransaction+0x80>)
 80036da:	fba2 2303 	umull	r2, r3, r2, r3
 80036de:	0d5b      	lsrs	r3, r3, #21
 80036e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80036e4:	fb02 f303 	mul.w	r3, r2, r3
 80036e8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036f2:	d112      	bne.n	800371a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	9300      	str	r3, [sp, #0]
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	2200      	movs	r2, #0
 80036fc:	2180      	movs	r1, #128	; 0x80
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f7ff ff13 	bl	800352a <SPI_WaitFlagStateUntilTimeout>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d016      	beq.n	8003738 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800370e:	f043 0220 	orr.w	r2, r3, #32
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e00f      	b.n	800373a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00a      	beq.n	8003736 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	3b01      	subs	r3, #1
 8003724:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003730:	2b80      	cmp	r3, #128	; 0x80
 8003732:	d0f2      	beq.n	800371a <SPI_EndRxTxTransaction+0x52>
 8003734:	e000      	b.n	8003738 <SPI_EndRxTxTransaction+0x70>
        break;
 8003736:	bf00      	nop
  }

  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3718      	adds	r7, #24
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	20000028 	.word	0x20000028
 8003748:	165e9f81 	.word	0x165e9f81

0800374c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e03f      	b.n	80037de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d106      	bne.n	8003778 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f7fe fa42 	bl	8001bfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2224      	movs	r2, #36	; 0x24
 800377c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68da      	ldr	r2, [r3, #12]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800378e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 f90b 	bl	80039ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	691a      	ldr	r2, [r3, #16]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	695a      	ldr	r2, [r3, #20]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68da      	ldr	r2, [r3, #12]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2220      	movs	r2, #32
 80037d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2220      	movs	r2, #32
 80037d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3708      	adds	r7, #8
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b088      	sub	sp, #32
 80037ea:	af02      	add	r7, sp, #8
 80037ec:	60f8      	str	r0, [r7, #12]
 80037ee:	60b9      	str	r1, [r7, #8]
 80037f0:	603b      	str	r3, [r7, #0]
 80037f2:	4613      	mov	r3, r2
 80037f4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80037f6:	2300      	movs	r3, #0
 80037f8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b20      	cmp	r3, #32
 8003804:	f040 8083 	bne.w	800390e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d002      	beq.n	8003814 <HAL_UART_Transmit+0x2e>
 800380e:	88fb      	ldrh	r3, [r7, #6]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d101      	bne.n	8003818 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e07b      	b.n	8003910 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800381e:	2b01      	cmp	r3, #1
 8003820:	d101      	bne.n	8003826 <HAL_UART_Transmit+0x40>
 8003822:	2302      	movs	r3, #2
 8003824:	e074      	b.n	8003910 <HAL_UART_Transmit+0x12a>
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2201      	movs	r2, #1
 800382a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2221      	movs	r2, #33	; 0x21
 8003838:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800383c:	f7fe fb2c 	bl	8001e98 <HAL_GetTick>
 8003840:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	88fa      	ldrh	r2, [r7, #6]
 8003846:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	88fa      	ldrh	r2, [r7, #6]
 800384c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003856:	e042      	b.n	80038de <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800385c:	b29b      	uxth	r3, r3
 800385e:	3b01      	subs	r3, #1
 8003860:	b29a      	uxth	r2, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800386e:	d122      	bne.n	80038b6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	9300      	str	r3, [sp, #0]
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	2200      	movs	r2, #0
 8003878:	2180      	movs	r1, #128	; 0x80
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f000 f84c 	bl	8003918 <UART_WaitOnFlagUntilTimeout>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e042      	b.n	8003910 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	881b      	ldrh	r3, [r3, #0]
 8003892:	461a      	mov	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800389c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d103      	bne.n	80038ae <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	3302      	adds	r3, #2
 80038aa:	60bb      	str	r3, [r7, #8]
 80038ac:	e017      	b.n	80038de <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	3301      	adds	r3, #1
 80038b2:	60bb      	str	r3, [r7, #8]
 80038b4:	e013      	b.n	80038de <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	9300      	str	r3, [sp, #0]
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	2200      	movs	r2, #0
 80038be:	2180      	movs	r1, #128	; 0x80
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f000 f829 	bl	8003918 <UART_WaitOnFlagUntilTimeout>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d001      	beq.n	80038d0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e01f      	b.n	8003910 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	1c5a      	adds	r2, r3, #1
 80038d4:	60ba      	str	r2, [r7, #8]
 80038d6:	781a      	ldrb	r2, [r3, #0]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1b7      	bne.n	8003858 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	2200      	movs	r2, #0
 80038f0:	2140      	movs	r1, #64	; 0x40
 80038f2:	68f8      	ldr	r0, [r7, #12]
 80038f4:	f000 f810 	bl	8003918 <UART_WaitOnFlagUntilTimeout>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d001      	beq.n	8003902 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e006      	b.n	8003910 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2220      	movs	r2, #32
 8003906:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800390a:	2300      	movs	r3, #0
 800390c:	e000      	b.n	8003910 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800390e:	2302      	movs	r3, #2
  }
}
 8003910:	4618      	mov	r0, r3
 8003912:	3718      	adds	r7, #24
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	603b      	str	r3, [r7, #0]
 8003924:	4613      	mov	r3, r2
 8003926:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003928:	e02c      	b.n	8003984 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003930:	d028      	beq.n	8003984 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d007      	beq.n	8003948 <UART_WaitOnFlagUntilTimeout+0x30>
 8003938:	f7fe faae 	bl	8001e98 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	429a      	cmp	r2, r3
 8003946:	d21d      	bcs.n	8003984 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68da      	ldr	r2, [r3, #12]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003956:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	695a      	ldr	r2, [r3, #20]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f022 0201 	bic.w	r2, r2, #1
 8003966:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2220      	movs	r2, #32
 800396c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2220      	movs	r2, #32
 8003974:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e00f      	b.n	80039a4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	4013      	ands	r3, r2
 800398e:	68ba      	ldr	r2, [r7, #8]
 8003990:	429a      	cmp	r2, r3
 8003992:	bf0c      	ite	eq
 8003994:	2301      	moveq	r3, #1
 8003996:	2300      	movne	r3, #0
 8003998:	b2db      	uxtb	r3, r3
 800399a:	461a      	mov	r2, r3
 800399c:	79fb      	ldrb	r3, [r7, #7]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d0c3      	beq.n	800392a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039b0:	b085      	sub	sp, #20
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	68da      	ldr	r2, [r3, #12]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	430a      	orrs	r2, r1
 80039ca:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689a      	ldr	r2, [r3, #8]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	431a      	orrs	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	431a      	orrs	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	69db      	ldr	r3, [r3, #28]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80039ee:	f023 030c 	bic.w	r3, r3, #12
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	6812      	ldr	r2, [r2, #0]
 80039f6:	68f9      	ldr	r1, [r7, #12]
 80039f8:	430b      	orrs	r3, r1
 80039fa:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	699a      	ldr	r2, [r3, #24]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a1a:	f040 818b 	bne.w	8003d34 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4ac1      	ldr	r2, [pc, #772]	; (8003d28 <UART_SetConfig+0x37c>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d005      	beq.n	8003a34 <UART_SetConfig+0x88>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4abf      	ldr	r2, [pc, #764]	; (8003d2c <UART_SetConfig+0x380>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	f040 80bd 	bne.w	8003bae <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a34:	f7ff f922 	bl	8002c7c <HAL_RCC_GetPCLK2Freq>
 8003a38:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	461d      	mov	r5, r3
 8003a3e:	f04f 0600 	mov.w	r6, #0
 8003a42:	46a8      	mov	r8, r5
 8003a44:	46b1      	mov	r9, r6
 8003a46:	eb18 0308 	adds.w	r3, r8, r8
 8003a4a:	eb49 0409 	adc.w	r4, r9, r9
 8003a4e:	4698      	mov	r8, r3
 8003a50:	46a1      	mov	r9, r4
 8003a52:	eb18 0805 	adds.w	r8, r8, r5
 8003a56:	eb49 0906 	adc.w	r9, r9, r6
 8003a5a:	f04f 0100 	mov.w	r1, #0
 8003a5e:	f04f 0200 	mov.w	r2, #0
 8003a62:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003a66:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003a6a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003a6e:	4688      	mov	r8, r1
 8003a70:	4691      	mov	r9, r2
 8003a72:	eb18 0005 	adds.w	r0, r8, r5
 8003a76:	eb49 0106 	adc.w	r1, r9, r6
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	461d      	mov	r5, r3
 8003a80:	f04f 0600 	mov.w	r6, #0
 8003a84:	196b      	adds	r3, r5, r5
 8003a86:	eb46 0406 	adc.w	r4, r6, r6
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	4623      	mov	r3, r4
 8003a8e:	f7fc fbff 	bl	8000290 <__aeabi_uldivmod>
 8003a92:	4603      	mov	r3, r0
 8003a94:	460c      	mov	r4, r1
 8003a96:	461a      	mov	r2, r3
 8003a98:	4ba5      	ldr	r3, [pc, #660]	; (8003d30 <UART_SetConfig+0x384>)
 8003a9a:	fba3 2302 	umull	r2, r3, r3, r2
 8003a9e:	095b      	lsrs	r3, r3, #5
 8003aa0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	461d      	mov	r5, r3
 8003aa8:	f04f 0600 	mov.w	r6, #0
 8003aac:	46a9      	mov	r9, r5
 8003aae:	46b2      	mov	sl, r6
 8003ab0:	eb19 0309 	adds.w	r3, r9, r9
 8003ab4:	eb4a 040a 	adc.w	r4, sl, sl
 8003ab8:	4699      	mov	r9, r3
 8003aba:	46a2      	mov	sl, r4
 8003abc:	eb19 0905 	adds.w	r9, r9, r5
 8003ac0:	eb4a 0a06 	adc.w	sl, sl, r6
 8003ac4:	f04f 0100 	mov.w	r1, #0
 8003ac8:	f04f 0200 	mov.w	r2, #0
 8003acc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ad0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ad4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ad8:	4689      	mov	r9, r1
 8003ada:	4692      	mov	sl, r2
 8003adc:	eb19 0005 	adds.w	r0, r9, r5
 8003ae0:	eb4a 0106 	adc.w	r1, sl, r6
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	461d      	mov	r5, r3
 8003aea:	f04f 0600 	mov.w	r6, #0
 8003aee:	196b      	adds	r3, r5, r5
 8003af0:	eb46 0406 	adc.w	r4, r6, r6
 8003af4:	461a      	mov	r2, r3
 8003af6:	4623      	mov	r3, r4
 8003af8:	f7fc fbca 	bl	8000290 <__aeabi_uldivmod>
 8003afc:	4603      	mov	r3, r0
 8003afe:	460c      	mov	r4, r1
 8003b00:	461a      	mov	r2, r3
 8003b02:	4b8b      	ldr	r3, [pc, #556]	; (8003d30 <UART_SetConfig+0x384>)
 8003b04:	fba3 1302 	umull	r1, r3, r3, r2
 8003b08:	095b      	lsrs	r3, r3, #5
 8003b0a:	2164      	movs	r1, #100	; 0x64
 8003b0c:	fb01 f303 	mul.w	r3, r1, r3
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	3332      	adds	r3, #50	; 0x32
 8003b16:	4a86      	ldr	r2, [pc, #536]	; (8003d30 <UART_SetConfig+0x384>)
 8003b18:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1c:	095b      	lsrs	r3, r3, #5
 8003b1e:	005b      	lsls	r3, r3, #1
 8003b20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b24:	4498      	add	r8, r3
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	461d      	mov	r5, r3
 8003b2a:	f04f 0600 	mov.w	r6, #0
 8003b2e:	46a9      	mov	r9, r5
 8003b30:	46b2      	mov	sl, r6
 8003b32:	eb19 0309 	adds.w	r3, r9, r9
 8003b36:	eb4a 040a 	adc.w	r4, sl, sl
 8003b3a:	4699      	mov	r9, r3
 8003b3c:	46a2      	mov	sl, r4
 8003b3e:	eb19 0905 	adds.w	r9, r9, r5
 8003b42:	eb4a 0a06 	adc.w	sl, sl, r6
 8003b46:	f04f 0100 	mov.w	r1, #0
 8003b4a:	f04f 0200 	mov.w	r2, #0
 8003b4e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b52:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b56:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b5a:	4689      	mov	r9, r1
 8003b5c:	4692      	mov	sl, r2
 8003b5e:	eb19 0005 	adds.w	r0, r9, r5
 8003b62:	eb4a 0106 	adc.w	r1, sl, r6
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	461d      	mov	r5, r3
 8003b6c:	f04f 0600 	mov.w	r6, #0
 8003b70:	196b      	adds	r3, r5, r5
 8003b72:	eb46 0406 	adc.w	r4, r6, r6
 8003b76:	461a      	mov	r2, r3
 8003b78:	4623      	mov	r3, r4
 8003b7a:	f7fc fb89 	bl	8000290 <__aeabi_uldivmod>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	460c      	mov	r4, r1
 8003b82:	461a      	mov	r2, r3
 8003b84:	4b6a      	ldr	r3, [pc, #424]	; (8003d30 <UART_SetConfig+0x384>)
 8003b86:	fba3 1302 	umull	r1, r3, r3, r2
 8003b8a:	095b      	lsrs	r3, r3, #5
 8003b8c:	2164      	movs	r1, #100	; 0x64
 8003b8e:	fb01 f303 	mul.w	r3, r1, r3
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	00db      	lsls	r3, r3, #3
 8003b96:	3332      	adds	r3, #50	; 0x32
 8003b98:	4a65      	ldr	r2, [pc, #404]	; (8003d30 <UART_SetConfig+0x384>)
 8003b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9e:	095b      	lsrs	r3, r3, #5
 8003ba0:	f003 0207 	and.w	r2, r3, #7
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4442      	add	r2, r8
 8003baa:	609a      	str	r2, [r3, #8]
 8003bac:	e26f      	b.n	800408e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003bae:	f7ff f851 	bl	8002c54 <HAL_RCC_GetPCLK1Freq>
 8003bb2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	461d      	mov	r5, r3
 8003bb8:	f04f 0600 	mov.w	r6, #0
 8003bbc:	46a8      	mov	r8, r5
 8003bbe:	46b1      	mov	r9, r6
 8003bc0:	eb18 0308 	adds.w	r3, r8, r8
 8003bc4:	eb49 0409 	adc.w	r4, r9, r9
 8003bc8:	4698      	mov	r8, r3
 8003bca:	46a1      	mov	r9, r4
 8003bcc:	eb18 0805 	adds.w	r8, r8, r5
 8003bd0:	eb49 0906 	adc.w	r9, r9, r6
 8003bd4:	f04f 0100 	mov.w	r1, #0
 8003bd8:	f04f 0200 	mov.w	r2, #0
 8003bdc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003be0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003be4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003be8:	4688      	mov	r8, r1
 8003bea:	4691      	mov	r9, r2
 8003bec:	eb18 0005 	adds.w	r0, r8, r5
 8003bf0:	eb49 0106 	adc.w	r1, r9, r6
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	461d      	mov	r5, r3
 8003bfa:	f04f 0600 	mov.w	r6, #0
 8003bfe:	196b      	adds	r3, r5, r5
 8003c00:	eb46 0406 	adc.w	r4, r6, r6
 8003c04:	461a      	mov	r2, r3
 8003c06:	4623      	mov	r3, r4
 8003c08:	f7fc fb42 	bl	8000290 <__aeabi_uldivmod>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	460c      	mov	r4, r1
 8003c10:	461a      	mov	r2, r3
 8003c12:	4b47      	ldr	r3, [pc, #284]	; (8003d30 <UART_SetConfig+0x384>)
 8003c14:	fba3 2302 	umull	r2, r3, r3, r2
 8003c18:	095b      	lsrs	r3, r3, #5
 8003c1a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	461d      	mov	r5, r3
 8003c22:	f04f 0600 	mov.w	r6, #0
 8003c26:	46a9      	mov	r9, r5
 8003c28:	46b2      	mov	sl, r6
 8003c2a:	eb19 0309 	adds.w	r3, r9, r9
 8003c2e:	eb4a 040a 	adc.w	r4, sl, sl
 8003c32:	4699      	mov	r9, r3
 8003c34:	46a2      	mov	sl, r4
 8003c36:	eb19 0905 	adds.w	r9, r9, r5
 8003c3a:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c3e:	f04f 0100 	mov.w	r1, #0
 8003c42:	f04f 0200 	mov.w	r2, #0
 8003c46:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c4a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c4e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c52:	4689      	mov	r9, r1
 8003c54:	4692      	mov	sl, r2
 8003c56:	eb19 0005 	adds.w	r0, r9, r5
 8003c5a:	eb4a 0106 	adc.w	r1, sl, r6
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	461d      	mov	r5, r3
 8003c64:	f04f 0600 	mov.w	r6, #0
 8003c68:	196b      	adds	r3, r5, r5
 8003c6a:	eb46 0406 	adc.w	r4, r6, r6
 8003c6e:	461a      	mov	r2, r3
 8003c70:	4623      	mov	r3, r4
 8003c72:	f7fc fb0d 	bl	8000290 <__aeabi_uldivmod>
 8003c76:	4603      	mov	r3, r0
 8003c78:	460c      	mov	r4, r1
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	4b2c      	ldr	r3, [pc, #176]	; (8003d30 <UART_SetConfig+0x384>)
 8003c7e:	fba3 1302 	umull	r1, r3, r3, r2
 8003c82:	095b      	lsrs	r3, r3, #5
 8003c84:	2164      	movs	r1, #100	; 0x64
 8003c86:	fb01 f303 	mul.w	r3, r1, r3
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	00db      	lsls	r3, r3, #3
 8003c8e:	3332      	adds	r3, #50	; 0x32
 8003c90:	4a27      	ldr	r2, [pc, #156]	; (8003d30 <UART_SetConfig+0x384>)
 8003c92:	fba2 2303 	umull	r2, r3, r2, r3
 8003c96:	095b      	lsrs	r3, r3, #5
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c9e:	4498      	add	r8, r3
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	461d      	mov	r5, r3
 8003ca4:	f04f 0600 	mov.w	r6, #0
 8003ca8:	46a9      	mov	r9, r5
 8003caa:	46b2      	mov	sl, r6
 8003cac:	eb19 0309 	adds.w	r3, r9, r9
 8003cb0:	eb4a 040a 	adc.w	r4, sl, sl
 8003cb4:	4699      	mov	r9, r3
 8003cb6:	46a2      	mov	sl, r4
 8003cb8:	eb19 0905 	adds.w	r9, r9, r5
 8003cbc:	eb4a 0a06 	adc.w	sl, sl, r6
 8003cc0:	f04f 0100 	mov.w	r1, #0
 8003cc4:	f04f 0200 	mov.w	r2, #0
 8003cc8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ccc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003cd0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003cd4:	4689      	mov	r9, r1
 8003cd6:	4692      	mov	sl, r2
 8003cd8:	eb19 0005 	adds.w	r0, r9, r5
 8003cdc:	eb4a 0106 	adc.w	r1, sl, r6
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	461d      	mov	r5, r3
 8003ce6:	f04f 0600 	mov.w	r6, #0
 8003cea:	196b      	adds	r3, r5, r5
 8003cec:	eb46 0406 	adc.w	r4, r6, r6
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	4623      	mov	r3, r4
 8003cf4:	f7fc facc 	bl	8000290 <__aeabi_uldivmod>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	460c      	mov	r4, r1
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	4b0c      	ldr	r3, [pc, #48]	; (8003d30 <UART_SetConfig+0x384>)
 8003d00:	fba3 1302 	umull	r1, r3, r3, r2
 8003d04:	095b      	lsrs	r3, r3, #5
 8003d06:	2164      	movs	r1, #100	; 0x64
 8003d08:	fb01 f303 	mul.w	r3, r1, r3
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	00db      	lsls	r3, r3, #3
 8003d10:	3332      	adds	r3, #50	; 0x32
 8003d12:	4a07      	ldr	r2, [pc, #28]	; (8003d30 <UART_SetConfig+0x384>)
 8003d14:	fba2 2303 	umull	r2, r3, r2, r3
 8003d18:	095b      	lsrs	r3, r3, #5
 8003d1a:	f003 0207 	and.w	r2, r3, #7
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4442      	add	r2, r8
 8003d24:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003d26:	e1b2      	b.n	800408e <UART_SetConfig+0x6e2>
 8003d28:	40011000 	.word	0x40011000
 8003d2c:	40011400 	.word	0x40011400
 8003d30:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4ad7      	ldr	r2, [pc, #860]	; (8004098 <UART_SetConfig+0x6ec>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d005      	beq.n	8003d4a <UART_SetConfig+0x39e>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4ad6      	ldr	r2, [pc, #856]	; (800409c <UART_SetConfig+0x6f0>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	f040 80d1 	bne.w	8003eec <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d4a:	f7fe ff97 	bl	8002c7c <HAL_RCC_GetPCLK2Freq>
 8003d4e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	469a      	mov	sl, r3
 8003d54:	f04f 0b00 	mov.w	fp, #0
 8003d58:	46d0      	mov	r8, sl
 8003d5a:	46d9      	mov	r9, fp
 8003d5c:	eb18 0308 	adds.w	r3, r8, r8
 8003d60:	eb49 0409 	adc.w	r4, r9, r9
 8003d64:	4698      	mov	r8, r3
 8003d66:	46a1      	mov	r9, r4
 8003d68:	eb18 080a 	adds.w	r8, r8, sl
 8003d6c:	eb49 090b 	adc.w	r9, r9, fp
 8003d70:	f04f 0100 	mov.w	r1, #0
 8003d74:	f04f 0200 	mov.w	r2, #0
 8003d78:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003d7c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003d80:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003d84:	4688      	mov	r8, r1
 8003d86:	4691      	mov	r9, r2
 8003d88:	eb1a 0508 	adds.w	r5, sl, r8
 8003d8c:	eb4b 0609 	adc.w	r6, fp, r9
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	4619      	mov	r1, r3
 8003d96:	f04f 0200 	mov.w	r2, #0
 8003d9a:	f04f 0300 	mov.w	r3, #0
 8003d9e:	f04f 0400 	mov.w	r4, #0
 8003da2:	0094      	lsls	r4, r2, #2
 8003da4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003da8:	008b      	lsls	r3, r1, #2
 8003daa:	461a      	mov	r2, r3
 8003dac:	4623      	mov	r3, r4
 8003dae:	4628      	mov	r0, r5
 8003db0:	4631      	mov	r1, r6
 8003db2:	f7fc fa6d 	bl	8000290 <__aeabi_uldivmod>
 8003db6:	4603      	mov	r3, r0
 8003db8:	460c      	mov	r4, r1
 8003dba:	461a      	mov	r2, r3
 8003dbc:	4bb8      	ldr	r3, [pc, #736]	; (80040a0 <UART_SetConfig+0x6f4>)
 8003dbe:	fba3 2302 	umull	r2, r3, r3, r2
 8003dc2:	095b      	lsrs	r3, r3, #5
 8003dc4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	469b      	mov	fp, r3
 8003dcc:	f04f 0c00 	mov.w	ip, #0
 8003dd0:	46d9      	mov	r9, fp
 8003dd2:	46e2      	mov	sl, ip
 8003dd4:	eb19 0309 	adds.w	r3, r9, r9
 8003dd8:	eb4a 040a 	adc.w	r4, sl, sl
 8003ddc:	4699      	mov	r9, r3
 8003dde:	46a2      	mov	sl, r4
 8003de0:	eb19 090b 	adds.w	r9, r9, fp
 8003de4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003de8:	f04f 0100 	mov.w	r1, #0
 8003dec:	f04f 0200 	mov.w	r2, #0
 8003df0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003df4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003df8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003dfc:	4689      	mov	r9, r1
 8003dfe:	4692      	mov	sl, r2
 8003e00:	eb1b 0509 	adds.w	r5, fp, r9
 8003e04:	eb4c 060a 	adc.w	r6, ip, sl
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	f04f 0200 	mov.w	r2, #0
 8003e12:	f04f 0300 	mov.w	r3, #0
 8003e16:	f04f 0400 	mov.w	r4, #0
 8003e1a:	0094      	lsls	r4, r2, #2
 8003e1c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e20:	008b      	lsls	r3, r1, #2
 8003e22:	461a      	mov	r2, r3
 8003e24:	4623      	mov	r3, r4
 8003e26:	4628      	mov	r0, r5
 8003e28:	4631      	mov	r1, r6
 8003e2a:	f7fc fa31 	bl	8000290 <__aeabi_uldivmod>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	460c      	mov	r4, r1
 8003e32:	461a      	mov	r2, r3
 8003e34:	4b9a      	ldr	r3, [pc, #616]	; (80040a0 <UART_SetConfig+0x6f4>)
 8003e36:	fba3 1302 	umull	r1, r3, r3, r2
 8003e3a:	095b      	lsrs	r3, r3, #5
 8003e3c:	2164      	movs	r1, #100	; 0x64
 8003e3e:	fb01 f303 	mul.w	r3, r1, r3
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	011b      	lsls	r3, r3, #4
 8003e46:	3332      	adds	r3, #50	; 0x32
 8003e48:	4a95      	ldr	r2, [pc, #596]	; (80040a0 <UART_SetConfig+0x6f4>)
 8003e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e4e:	095b      	lsrs	r3, r3, #5
 8003e50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e54:	4498      	add	r8, r3
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	469b      	mov	fp, r3
 8003e5a:	f04f 0c00 	mov.w	ip, #0
 8003e5e:	46d9      	mov	r9, fp
 8003e60:	46e2      	mov	sl, ip
 8003e62:	eb19 0309 	adds.w	r3, r9, r9
 8003e66:	eb4a 040a 	adc.w	r4, sl, sl
 8003e6a:	4699      	mov	r9, r3
 8003e6c:	46a2      	mov	sl, r4
 8003e6e:	eb19 090b 	adds.w	r9, r9, fp
 8003e72:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003e76:	f04f 0100 	mov.w	r1, #0
 8003e7a:	f04f 0200 	mov.w	r2, #0
 8003e7e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e82:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e86:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e8a:	4689      	mov	r9, r1
 8003e8c:	4692      	mov	sl, r2
 8003e8e:	eb1b 0509 	adds.w	r5, fp, r9
 8003e92:	eb4c 060a 	adc.w	r6, ip, sl
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	f04f 0200 	mov.w	r2, #0
 8003ea0:	f04f 0300 	mov.w	r3, #0
 8003ea4:	f04f 0400 	mov.w	r4, #0
 8003ea8:	0094      	lsls	r4, r2, #2
 8003eaa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003eae:	008b      	lsls	r3, r1, #2
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	4623      	mov	r3, r4
 8003eb4:	4628      	mov	r0, r5
 8003eb6:	4631      	mov	r1, r6
 8003eb8:	f7fc f9ea 	bl	8000290 <__aeabi_uldivmod>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	460c      	mov	r4, r1
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	4b77      	ldr	r3, [pc, #476]	; (80040a0 <UART_SetConfig+0x6f4>)
 8003ec4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ec8:	095b      	lsrs	r3, r3, #5
 8003eca:	2164      	movs	r1, #100	; 0x64
 8003ecc:	fb01 f303 	mul.w	r3, r1, r3
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	011b      	lsls	r3, r3, #4
 8003ed4:	3332      	adds	r3, #50	; 0x32
 8003ed6:	4a72      	ldr	r2, [pc, #456]	; (80040a0 <UART_SetConfig+0x6f4>)
 8003ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8003edc:	095b      	lsrs	r3, r3, #5
 8003ede:	f003 020f 	and.w	r2, r3, #15
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4442      	add	r2, r8
 8003ee8:	609a      	str	r2, [r3, #8]
 8003eea:	e0d0      	b.n	800408e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003eec:	f7fe feb2 	bl	8002c54 <HAL_RCC_GetPCLK1Freq>
 8003ef0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	469a      	mov	sl, r3
 8003ef6:	f04f 0b00 	mov.w	fp, #0
 8003efa:	46d0      	mov	r8, sl
 8003efc:	46d9      	mov	r9, fp
 8003efe:	eb18 0308 	adds.w	r3, r8, r8
 8003f02:	eb49 0409 	adc.w	r4, r9, r9
 8003f06:	4698      	mov	r8, r3
 8003f08:	46a1      	mov	r9, r4
 8003f0a:	eb18 080a 	adds.w	r8, r8, sl
 8003f0e:	eb49 090b 	adc.w	r9, r9, fp
 8003f12:	f04f 0100 	mov.w	r1, #0
 8003f16:	f04f 0200 	mov.w	r2, #0
 8003f1a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003f1e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003f22:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003f26:	4688      	mov	r8, r1
 8003f28:	4691      	mov	r9, r2
 8003f2a:	eb1a 0508 	adds.w	r5, sl, r8
 8003f2e:	eb4b 0609 	adc.w	r6, fp, r9
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	4619      	mov	r1, r3
 8003f38:	f04f 0200 	mov.w	r2, #0
 8003f3c:	f04f 0300 	mov.w	r3, #0
 8003f40:	f04f 0400 	mov.w	r4, #0
 8003f44:	0094      	lsls	r4, r2, #2
 8003f46:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f4a:	008b      	lsls	r3, r1, #2
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	4623      	mov	r3, r4
 8003f50:	4628      	mov	r0, r5
 8003f52:	4631      	mov	r1, r6
 8003f54:	f7fc f99c 	bl	8000290 <__aeabi_uldivmod>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	460c      	mov	r4, r1
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	4b50      	ldr	r3, [pc, #320]	; (80040a0 <UART_SetConfig+0x6f4>)
 8003f60:	fba3 2302 	umull	r2, r3, r3, r2
 8003f64:	095b      	lsrs	r3, r3, #5
 8003f66:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	469b      	mov	fp, r3
 8003f6e:	f04f 0c00 	mov.w	ip, #0
 8003f72:	46d9      	mov	r9, fp
 8003f74:	46e2      	mov	sl, ip
 8003f76:	eb19 0309 	adds.w	r3, r9, r9
 8003f7a:	eb4a 040a 	adc.w	r4, sl, sl
 8003f7e:	4699      	mov	r9, r3
 8003f80:	46a2      	mov	sl, r4
 8003f82:	eb19 090b 	adds.w	r9, r9, fp
 8003f86:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003f8a:	f04f 0100 	mov.w	r1, #0
 8003f8e:	f04f 0200 	mov.w	r2, #0
 8003f92:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f96:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f9a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f9e:	4689      	mov	r9, r1
 8003fa0:	4692      	mov	sl, r2
 8003fa2:	eb1b 0509 	adds.w	r5, fp, r9
 8003fa6:	eb4c 060a 	adc.w	r6, ip, sl
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	4619      	mov	r1, r3
 8003fb0:	f04f 0200 	mov.w	r2, #0
 8003fb4:	f04f 0300 	mov.w	r3, #0
 8003fb8:	f04f 0400 	mov.w	r4, #0
 8003fbc:	0094      	lsls	r4, r2, #2
 8003fbe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003fc2:	008b      	lsls	r3, r1, #2
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	4623      	mov	r3, r4
 8003fc8:	4628      	mov	r0, r5
 8003fca:	4631      	mov	r1, r6
 8003fcc:	f7fc f960 	bl	8000290 <__aeabi_uldivmod>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	460c      	mov	r4, r1
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	4b32      	ldr	r3, [pc, #200]	; (80040a0 <UART_SetConfig+0x6f4>)
 8003fd8:	fba3 1302 	umull	r1, r3, r3, r2
 8003fdc:	095b      	lsrs	r3, r3, #5
 8003fde:	2164      	movs	r1, #100	; 0x64
 8003fe0:	fb01 f303 	mul.w	r3, r1, r3
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	011b      	lsls	r3, r3, #4
 8003fe8:	3332      	adds	r3, #50	; 0x32
 8003fea:	4a2d      	ldr	r2, [pc, #180]	; (80040a0 <UART_SetConfig+0x6f4>)
 8003fec:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff0:	095b      	lsrs	r3, r3, #5
 8003ff2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ff6:	4498      	add	r8, r3
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	469b      	mov	fp, r3
 8003ffc:	f04f 0c00 	mov.w	ip, #0
 8004000:	46d9      	mov	r9, fp
 8004002:	46e2      	mov	sl, ip
 8004004:	eb19 0309 	adds.w	r3, r9, r9
 8004008:	eb4a 040a 	adc.w	r4, sl, sl
 800400c:	4699      	mov	r9, r3
 800400e:	46a2      	mov	sl, r4
 8004010:	eb19 090b 	adds.w	r9, r9, fp
 8004014:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004018:	f04f 0100 	mov.w	r1, #0
 800401c:	f04f 0200 	mov.w	r2, #0
 8004020:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004024:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004028:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800402c:	4689      	mov	r9, r1
 800402e:	4692      	mov	sl, r2
 8004030:	eb1b 0509 	adds.w	r5, fp, r9
 8004034:	eb4c 060a 	adc.w	r6, ip, sl
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	4619      	mov	r1, r3
 800403e:	f04f 0200 	mov.w	r2, #0
 8004042:	f04f 0300 	mov.w	r3, #0
 8004046:	f04f 0400 	mov.w	r4, #0
 800404a:	0094      	lsls	r4, r2, #2
 800404c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004050:	008b      	lsls	r3, r1, #2
 8004052:	461a      	mov	r2, r3
 8004054:	4623      	mov	r3, r4
 8004056:	4628      	mov	r0, r5
 8004058:	4631      	mov	r1, r6
 800405a:	f7fc f919 	bl	8000290 <__aeabi_uldivmod>
 800405e:	4603      	mov	r3, r0
 8004060:	460c      	mov	r4, r1
 8004062:	461a      	mov	r2, r3
 8004064:	4b0e      	ldr	r3, [pc, #56]	; (80040a0 <UART_SetConfig+0x6f4>)
 8004066:	fba3 1302 	umull	r1, r3, r3, r2
 800406a:	095b      	lsrs	r3, r3, #5
 800406c:	2164      	movs	r1, #100	; 0x64
 800406e:	fb01 f303 	mul.w	r3, r1, r3
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	011b      	lsls	r3, r3, #4
 8004076:	3332      	adds	r3, #50	; 0x32
 8004078:	4a09      	ldr	r2, [pc, #36]	; (80040a0 <UART_SetConfig+0x6f4>)
 800407a:	fba2 2303 	umull	r2, r3, r2, r3
 800407e:	095b      	lsrs	r3, r3, #5
 8004080:	f003 020f 	and.w	r2, r3, #15
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4442      	add	r2, r8
 800408a:	609a      	str	r2, [r3, #8]
}
 800408c:	e7ff      	b.n	800408e <UART_SetConfig+0x6e2>
 800408e:	bf00      	nop
 8004090:	3714      	adds	r7, #20
 8004092:	46bd      	mov	sp, r7
 8004094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004098:	40011000 	.word	0x40011000
 800409c:	40011400 	.word	0x40011400
 80040a0:	51eb851f 	.word	0x51eb851f

080040a4 <__errno>:
 80040a4:	4b01      	ldr	r3, [pc, #4]	; (80040ac <__errno+0x8>)
 80040a6:	6818      	ldr	r0, [r3, #0]
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	20000034 	.word	0x20000034

080040b0 <__libc_init_array>:
 80040b0:	b570      	push	{r4, r5, r6, lr}
 80040b2:	4e0d      	ldr	r6, [pc, #52]	; (80040e8 <__libc_init_array+0x38>)
 80040b4:	4c0d      	ldr	r4, [pc, #52]	; (80040ec <__libc_init_array+0x3c>)
 80040b6:	1ba4      	subs	r4, r4, r6
 80040b8:	10a4      	asrs	r4, r4, #2
 80040ba:	2500      	movs	r5, #0
 80040bc:	42a5      	cmp	r5, r4
 80040be:	d109      	bne.n	80040d4 <__libc_init_array+0x24>
 80040c0:	4e0b      	ldr	r6, [pc, #44]	; (80040f0 <__libc_init_array+0x40>)
 80040c2:	4c0c      	ldr	r4, [pc, #48]	; (80040f4 <__libc_init_array+0x44>)
 80040c4:	f000 fc28 	bl	8004918 <_init>
 80040c8:	1ba4      	subs	r4, r4, r6
 80040ca:	10a4      	asrs	r4, r4, #2
 80040cc:	2500      	movs	r5, #0
 80040ce:	42a5      	cmp	r5, r4
 80040d0:	d105      	bne.n	80040de <__libc_init_array+0x2e>
 80040d2:	bd70      	pop	{r4, r5, r6, pc}
 80040d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80040d8:	4798      	blx	r3
 80040da:	3501      	adds	r5, #1
 80040dc:	e7ee      	b.n	80040bc <__libc_init_array+0xc>
 80040de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80040e2:	4798      	blx	r3
 80040e4:	3501      	adds	r5, #1
 80040e6:	e7f2      	b.n	80040ce <__libc_init_array+0x1e>
 80040e8:	08004ee4 	.word	0x08004ee4
 80040ec:	08004ee4 	.word	0x08004ee4
 80040f0:	08004ee4 	.word	0x08004ee4
 80040f4:	08004ee8 	.word	0x08004ee8

080040f8 <memcpy>:
 80040f8:	b510      	push	{r4, lr}
 80040fa:	1e43      	subs	r3, r0, #1
 80040fc:	440a      	add	r2, r1
 80040fe:	4291      	cmp	r1, r2
 8004100:	d100      	bne.n	8004104 <memcpy+0xc>
 8004102:	bd10      	pop	{r4, pc}
 8004104:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004108:	f803 4f01 	strb.w	r4, [r3, #1]!
 800410c:	e7f7      	b.n	80040fe <memcpy+0x6>

0800410e <memset>:
 800410e:	4402      	add	r2, r0
 8004110:	4603      	mov	r3, r0
 8004112:	4293      	cmp	r3, r2
 8004114:	d100      	bne.n	8004118 <memset+0xa>
 8004116:	4770      	bx	lr
 8004118:	f803 1b01 	strb.w	r1, [r3], #1
 800411c:	e7f9      	b.n	8004112 <memset+0x4>
	...

08004120 <siprintf>:
 8004120:	b40e      	push	{r1, r2, r3}
 8004122:	b500      	push	{lr}
 8004124:	b09c      	sub	sp, #112	; 0x70
 8004126:	ab1d      	add	r3, sp, #116	; 0x74
 8004128:	9002      	str	r0, [sp, #8]
 800412a:	9006      	str	r0, [sp, #24]
 800412c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004130:	4809      	ldr	r0, [pc, #36]	; (8004158 <siprintf+0x38>)
 8004132:	9107      	str	r1, [sp, #28]
 8004134:	9104      	str	r1, [sp, #16]
 8004136:	4909      	ldr	r1, [pc, #36]	; (800415c <siprintf+0x3c>)
 8004138:	f853 2b04 	ldr.w	r2, [r3], #4
 800413c:	9105      	str	r1, [sp, #20]
 800413e:	6800      	ldr	r0, [r0, #0]
 8004140:	9301      	str	r3, [sp, #4]
 8004142:	a902      	add	r1, sp, #8
 8004144:	f000 f866 	bl	8004214 <_svfiprintf_r>
 8004148:	9b02      	ldr	r3, [sp, #8]
 800414a:	2200      	movs	r2, #0
 800414c:	701a      	strb	r2, [r3, #0]
 800414e:	b01c      	add	sp, #112	; 0x70
 8004150:	f85d eb04 	ldr.w	lr, [sp], #4
 8004154:	b003      	add	sp, #12
 8004156:	4770      	bx	lr
 8004158:	20000034 	.word	0x20000034
 800415c:	ffff0208 	.word	0xffff0208

08004160 <__ssputs_r>:
 8004160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004164:	688e      	ldr	r6, [r1, #8]
 8004166:	429e      	cmp	r6, r3
 8004168:	4682      	mov	sl, r0
 800416a:	460c      	mov	r4, r1
 800416c:	4690      	mov	r8, r2
 800416e:	4699      	mov	r9, r3
 8004170:	d837      	bhi.n	80041e2 <__ssputs_r+0x82>
 8004172:	898a      	ldrh	r2, [r1, #12]
 8004174:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004178:	d031      	beq.n	80041de <__ssputs_r+0x7e>
 800417a:	6825      	ldr	r5, [r4, #0]
 800417c:	6909      	ldr	r1, [r1, #16]
 800417e:	1a6f      	subs	r7, r5, r1
 8004180:	6965      	ldr	r5, [r4, #20]
 8004182:	2302      	movs	r3, #2
 8004184:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004188:	fb95 f5f3 	sdiv	r5, r5, r3
 800418c:	f109 0301 	add.w	r3, r9, #1
 8004190:	443b      	add	r3, r7
 8004192:	429d      	cmp	r5, r3
 8004194:	bf38      	it	cc
 8004196:	461d      	movcc	r5, r3
 8004198:	0553      	lsls	r3, r2, #21
 800419a:	d530      	bpl.n	80041fe <__ssputs_r+0x9e>
 800419c:	4629      	mov	r1, r5
 800419e:	f000 fb21 	bl	80047e4 <_malloc_r>
 80041a2:	4606      	mov	r6, r0
 80041a4:	b950      	cbnz	r0, 80041bc <__ssputs_r+0x5c>
 80041a6:	230c      	movs	r3, #12
 80041a8:	f8ca 3000 	str.w	r3, [sl]
 80041ac:	89a3      	ldrh	r3, [r4, #12]
 80041ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041b2:	81a3      	strh	r3, [r4, #12]
 80041b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041bc:	463a      	mov	r2, r7
 80041be:	6921      	ldr	r1, [r4, #16]
 80041c0:	f7ff ff9a 	bl	80040f8 <memcpy>
 80041c4:	89a3      	ldrh	r3, [r4, #12]
 80041c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80041ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041ce:	81a3      	strh	r3, [r4, #12]
 80041d0:	6126      	str	r6, [r4, #16]
 80041d2:	6165      	str	r5, [r4, #20]
 80041d4:	443e      	add	r6, r7
 80041d6:	1bed      	subs	r5, r5, r7
 80041d8:	6026      	str	r6, [r4, #0]
 80041da:	60a5      	str	r5, [r4, #8]
 80041dc:	464e      	mov	r6, r9
 80041de:	454e      	cmp	r6, r9
 80041e0:	d900      	bls.n	80041e4 <__ssputs_r+0x84>
 80041e2:	464e      	mov	r6, r9
 80041e4:	4632      	mov	r2, r6
 80041e6:	4641      	mov	r1, r8
 80041e8:	6820      	ldr	r0, [r4, #0]
 80041ea:	f000 fa93 	bl	8004714 <memmove>
 80041ee:	68a3      	ldr	r3, [r4, #8]
 80041f0:	1b9b      	subs	r3, r3, r6
 80041f2:	60a3      	str	r3, [r4, #8]
 80041f4:	6823      	ldr	r3, [r4, #0]
 80041f6:	441e      	add	r6, r3
 80041f8:	6026      	str	r6, [r4, #0]
 80041fa:	2000      	movs	r0, #0
 80041fc:	e7dc      	b.n	80041b8 <__ssputs_r+0x58>
 80041fe:	462a      	mov	r2, r5
 8004200:	f000 fb4a 	bl	8004898 <_realloc_r>
 8004204:	4606      	mov	r6, r0
 8004206:	2800      	cmp	r0, #0
 8004208:	d1e2      	bne.n	80041d0 <__ssputs_r+0x70>
 800420a:	6921      	ldr	r1, [r4, #16]
 800420c:	4650      	mov	r0, sl
 800420e:	f000 fa9b 	bl	8004748 <_free_r>
 8004212:	e7c8      	b.n	80041a6 <__ssputs_r+0x46>

08004214 <_svfiprintf_r>:
 8004214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004218:	461d      	mov	r5, r3
 800421a:	898b      	ldrh	r3, [r1, #12]
 800421c:	061f      	lsls	r7, r3, #24
 800421e:	b09d      	sub	sp, #116	; 0x74
 8004220:	4680      	mov	r8, r0
 8004222:	460c      	mov	r4, r1
 8004224:	4616      	mov	r6, r2
 8004226:	d50f      	bpl.n	8004248 <_svfiprintf_r+0x34>
 8004228:	690b      	ldr	r3, [r1, #16]
 800422a:	b96b      	cbnz	r3, 8004248 <_svfiprintf_r+0x34>
 800422c:	2140      	movs	r1, #64	; 0x40
 800422e:	f000 fad9 	bl	80047e4 <_malloc_r>
 8004232:	6020      	str	r0, [r4, #0]
 8004234:	6120      	str	r0, [r4, #16]
 8004236:	b928      	cbnz	r0, 8004244 <_svfiprintf_r+0x30>
 8004238:	230c      	movs	r3, #12
 800423a:	f8c8 3000 	str.w	r3, [r8]
 800423e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004242:	e0c8      	b.n	80043d6 <_svfiprintf_r+0x1c2>
 8004244:	2340      	movs	r3, #64	; 0x40
 8004246:	6163      	str	r3, [r4, #20]
 8004248:	2300      	movs	r3, #0
 800424a:	9309      	str	r3, [sp, #36]	; 0x24
 800424c:	2320      	movs	r3, #32
 800424e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004252:	2330      	movs	r3, #48	; 0x30
 8004254:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004258:	9503      	str	r5, [sp, #12]
 800425a:	f04f 0b01 	mov.w	fp, #1
 800425e:	4637      	mov	r7, r6
 8004260:	463d      	mov	r5, r7
 8004262:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004266:	b10b      	cbz	r3, 800426c <_svfiprintf_r+0x58>
 8004268:	2b25      	cmp	r3, #37	; 0x25
 800426a:	d13e      	bne.n	80042ea <_svfiprintf_r+0xd6>
 800426c:	ebb7 0a06 	subs.w	sl, r7, r6
 8004270:	d00b      	beq.n	800428a <_svfiprintf_r+0x76>
 8004272:	4653      	mov	r3, sl
 8004274:	4632      	mov	r2, r6
 8004276:	4621      	mov	r1, r4
 8004278:	4640      	mov	r0, r8
 800427a:	f7ff ff71 	bl	8004160 <__ssputs_r>
 800427e:	3001      	adds	r0, #1
 8004280:	f000 80a4 	beq.w	80043cc <_svfiprintf_r+0x1b8>
 8004284:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004286:	4453      	add	r3, sl
 8004288:	9309      	str	r3, [sp, #36]	; 0x24
 800428a:	783b      	ldrb	r3, [r7, #0]
 800428c:	2b00      	cmp	r3, #0
 800428e:	f000 809d 	beq.w	80043cc <_svfiprintf_r+0x1b8>
 8004292:	2300      	movs	r3, #0
 8004294:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004298:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800429c:	9304      	str	r3, [sp, #16]
 800429e:	9307      	str	r3, [sp, #28]
 80042a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80042a4:	931a      	str	r3, [sp, #104]	; 0x68
 80042a6:	462f      	mov	r7, r5
 80042a8:	2205      	movs	r2, #5
 80042aa:	f817 1b01 	ldrb.w	r1, [r7], #1
 80042ae:	4850      	ldr	r0, [pc, #320]	; (80043f0 <_svfiprintf_r+0x1dc>)
 80042b0:	f7fb ff9e 	bl	80001f0 <memchr>
 80042b4:	9b04      	ldr	r3, [sp, #16]
 80042b6:	b9d0      	cbnz	r0, 80042ee <_svfiprintf_r+0xda>
 80042b8:	06d9      	lsls	r1, r3, #27
 80042ba:	bf44      	itt	mi
 80042bc:	2220      	movmi	r2, #32
 80042be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80042c2:	071a      	lsls	r2, r3, #28
 80042c4:	bf44      	itt	mi
 80042c6:	222b      	movmi	r2, #43	; 0x2b
 80042c8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80042cc:	782a      	ldrb	r2, [r5, #0]
 80042ce:	2a2a      	cmp	r2, #42	; 0x2a
 80042d0:	d015      	beq.n	80042fe <_svfiprintf_r+0xea>
 80042d2:	9a07      	ldr	r2, [sp, #28]
 80042d4:	462f      	mov	r7, r5
 80042d6:	2000      	movs	r0, #0
 80042d8:	250a      	movs	r5, #10
 80042da:	4639      	mov	r1, r7
 80042dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80042e0:	3b30      	subs	r3, #48	; 0x30
 80042e2:	2b09      	cmp	r3, #9
 80042e4:	d94d      	bls.n	8004382 <_svfiprintf_r+0x16e>
 80042e6:	b1b8      	cbz	r0, 8004318 <_svfiprintf_r+0x104>
 80042e8:	e00f      	b.n	800430a <_svfiprintf_r+0xf6>
 80042ea:	462f      	mov	r7, r5
 80042ec:	e7b8      	b.n	8004260 <_svfiprintf_r+0x4c>
 80042ee:	4a40      	ldr	r2, [pc, #256]	; (80043f0 <_svfiprintf_r+0x1dc>)
 80042f0:	1a80      	subs	r0, r0, r2
 80042f2:	fa0b f000 	lsl.w	r0, fp, r0
 80042f6:	4318      	orrs	r0, r3
 80042f8:	9004      	str	r0, [sp, #16]
 80042fa:	463d      	mov	r5, r7
 80042fc:	e7d3      	b.n	80042a6 <_svfiprintf_r+0x92>
 80042fe:	9a03      	ldr	r2, [sp, #12]
 8004300:	1d11      	adds	r1, r2, #4
 8004302:	6812      	ldr	r2, [r2, #0]
 8004304:	9103      	str	r1, [sp, #12]
 8004306:	2a00      	cmp	r2, #0
 8004308:	db01      	blt.n	800430e <_svfiprintf_r+0xfa>
 800430a:	9207      	str	r2, [sp, #28]
 800430c:	e004      	b.n	8004318 <_svfiprintf_r+0x104>
 800430e:	4252      	negs	r2, r2
 8004310:	f043 0302 	orr.w	r3, r3, #2
 8004314:	9207      	str	r2, [sp, #28]
 8004316:	9304      	str	r3, [sp, #16]
 8004318:	783b      	ldrb	r3, [r7, #0]
 800431a:	2b2e      	cmp	r3, #46	; 0x2e
 800431c:	d10c      	bne.n	8004338 <_svfiprintf_r+0x124>
 800431e:	787b      	ldrb	r3, [r7, #1]
 8004320:	2b2a      	cmp	r3, #42	; 0x2a
 8004322:	d133      	bne.n	800438c <_svfiprintf_r+0x178>
 8004324:	9b03      	ldr	r3, [sp, #12]
 8004326:	1d1a      	adds	r2, r3, #4
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	9203      	str	r2, [sp, #12]
 800432c:	2b00      	cmp	r3, #0
 800432e:	bfb8      	it	lt
 8004330:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004334:	3702      	adds	r7, #2
 8004336:	9305      	str	r3, [sp, #20]
 8004338:	4d2e      	ldr	r5, [pc, #184]	; (80043f4 <_svfiprintf_r+0x1e0>)
 800433a:	7839      	ldrb	r1, [r7, #0]
 800433c:	2203      	movs	r2, #3
 800433e:	4628      	mov	r0, r5
 8004340:	f7fb ff56 	bl	80001f0 <memchr>
 8004344:	b138      	cbz	r0, 8004356 <_svfiprintf_r+0x142>
 8004346:	2340      	movs	r3, #64	; 0x40
 8004348:	1b40      	subs	r0, r0, r5
 800434a:	fa03 f000 	lsl.w	r0, r3, r0
 800434e:	9b04      	ldr	r3, [sp, #16]
 8004350:	4303      	orrs	r3, r0
 8004352:	3701      	adds	r7, #1
 8004354:	9304      	str	r3, [sp, #16]
 8004356:	7839      	ldrb	r1, [r7, #0]
 8004358:	4827      	ldr	r0, [pc, #156]	; (80043f8 <_svfiprintf_r+0x1e4>)
 800435a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800435e:	2206      	movs	r2, #6
 8004360:	1c7e      	adds	r6, r7, #1
 8004362:	f7fb ff45 	bl	80001f0 <memchr>
 8004366:	2800      	cmp	r0, #0
 8004368:	d038      	beq.n	80043dc <_svfiprintf_r+0x1c8>
 800436a:	4b24      	ldr	r3, [pc, #144]	; (80043fc <_svfiprintf_r+0x1e8>)
 800436c:	bb13      	cbnz	r3, 80043b4 <_svfiprintf_r+0x1a0>
 800436e:	9b03      	ldr	r3, [sp, #12]
 8004370:	3307      	adds	r3, #7
 8004372:	f023 0307 	bic.w	r3, r3, #7
 8004376:	3308      	adds	r3, #8
 8004378:	9303      	str	r3, [sp, #12]
 800437a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800437c:	444b      	add	r3, r9
 800437e:	9309      	str	r3, [sp, #36]	; 0x24
 8004380:	e76d      	b.n	800425e <_svfiprintf_r+0x4a>
 8004382:	fb05 3202 	mla	r2, r5, r2, r3
 8004386:	2001      	movs	r0, #1
 8004388:	460f      	mov	r7, r1
 800438a:	e7a6      	b.n	80042da <_svfiprintf_r+0xc6>
 800438c:	2300      	movs	r3, #0
 800438e:	3701      	adds	r7, #1
 8004390:	9305      	str	r3, [sp, #20]
 8004392:	4619      	mov	r1, r3
 8004394:	250a      	movs	r5, #10
 8004396:	4638      	mov	r0, r7
 8004398:	f810 2b01 	ldrb.w	r2, [r0], #1
 800439c:	3a30      	subs	r2, #48	; 0x30
 800439e:	2a09      	cmp	r2, #9
 80043a0:	d903      	bls.n	80043aa <_svfiprintf_r+0x196>
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d0c8      	beq.n	8004338 <_svfiprintf_r+0x124>
 80043a6:	9105      	str	r1, [sp, #20]
 80043a8:	e7c6      	b.n	8004338 <_svfiprintf_r+0x124>
 80043aa:	fb05 2101 	mla	r1, r5, r1, r2
 80043ae:	2301      	movs	r3, #1
 80043b0:	4607      	mov	r7, r0
 80043b2:	e7f0      	b.n	8004396 <_svfiprintf_r+0x182>
 80043b4:	ab03      	add	r3, sp, #12
 80043b6:	9300      	str	r3, [sp, #0]
 80043b8:	4622      	mov	r2, r4
 80043ba:	4b11      	ldr	r3, [pc, #68]	; (8004400 <_svfiprintf_r+0x1ec>)
 80043bc:	a904      	add	r1, sp, #16
 80043be:	4640      	mov	r0, r8
 80043c0:	f3af 8000 	nop.w
 80043c4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80043c8:	4681      	mov	r9, r0
 80043ca:	d1d6      	bne.n	800437a <_svfiprintf_r+0x166>
 80043cc:	89a3      	ldrh	r3, [r4, #12]
 80043ce:	065b      	lsls	r3, r3, #25
 80043d0:	f53f af35 	bmi.w	800423e <_svfiprintf_r+0x2a>
 80043d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80043d6:	b01d      	add	sp, #116	; 0x74
 80043d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043dc:	ab03      	add	r3, sp, #12
 80043de:	9300      	str	r3, [sp, #0]
 80043e0:	4622      	mov	r2, r4
 80043e2:	4b07      	ldr	r3, [pc, #28]	; (8004400 <_svfiprintf_r+0x1ec>)
 80043e4:	a904      	add	r1, sp, #16
 80043e6:	4640      	mov	r0, r8
 80043e8:	f000 f882 	bl	80044f0 <_printf_i>
 80043ec:	e7ea      	b.n	80043c4 <_svfiprintf_r+0x1b0>
 80043ee:	bf00      	nop
 80043f0:	08004ea8 	.word	0x08004ea8
 80043f4:	08004eae 	.word	0x08004eae
 80043f8:	08004eb2 	.word	0x08004eb2
 80043fc:	00000000 	.word	0x00000000
 8004400:	08004161 	.word	0x08004161

08004404 <_printf_common>:
 8004404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004408:	4691      	mov	r9, r2
 800440a:	461f      	mov	r7, r3
 800440c:	688a      	ldr	r2, [r1, #8]
 800440e:	690b      	ldr	r3, [r1, #16]
 8004410:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004414:	4293      	cmp	r3, r2
 8004416:	bfb8      	it	lt
 8004418:	4613      	movlt	r3, r2
 800441a:	f8c9 3000 	str.w	r3, [r9]
 800441e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004422:	4606      	mov	r6, r0
 8004424:	460c      	mov	r4, r1
 8004426:	b112      	cbz	r2, 800442e <_printf_common+0x2a>
 8004428:	3301      	adds	r3, #1
 800442a:	f8c9 3000 	str.w	r3, [r9]
 800442e:	6823      	ldr	r3, [r4, #0]
 8004430:	0699      	lsls	r1, r3, #26
 8004432:	bf42      	ittt	mi
 8004434:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004438:	3302      	addmi	r3, #2
 800443a:	f8c9 3000 	strmi.w	r3, [r9]
 800443e:	6825      	ldr	r5, [r4, #0]
 8004440:	f015 0506 	ands.w	r5, r5, #6
 8004444:	d107      	bne.n	8004456 <_printf_common+0x52>
 8004446:	f104 0a19 	add.w	sl, r4, #25
 800444a:	68e3      	ldr	r3, [r4, #12]
 800444c:	f8d9 2000 	ldr.w	r2, [r9]
 8004450:	1a9b      	subs	r3, r3, r2
 8004452:	42ab      	cmp	r3, r5
 8004454:	dc28      	bgt.n	80044a8 <_printf_common+0xa4>
 8004456:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800445a:	6822      	ldr	r2, [r4, #0]
 800445c:	3300      	adds	r3, #0
 800445e:	bf18      	it	ne
 8004460:	2301      	movne	r3, #1
 8004462:	0692      	lsls	r2, r2, #26
 8004464:	d42d      	bmi.n	80044c2 <_printf_common+0xbe>
 8004466:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800446a:	4639      	mov	r1, r7
 800446c:	4630      	mov	r0, r6
 800446e:	47c0      	blx	r8
 8004470:	3001      	adds	r0, #1
 8004472:	d020      	beq.n	80044b6 <_printf_common+0xb2>
 8004474:	6823      	ldr	r3, [r4, #0]
 8004476:	68e5      	ldr	r5, [r4, #12]
 8004478:	f8d9 2000 	ldr.w	r2, [r9]
 800447c:	f003 0306 	and.w	r3, r3, #6
 8004480:	2b04      	cmp	r3, #4
 8004482:	bf08      	it	eq
 8004484:	1aad      	subeq	r5, r5, r2
 8004486:	68a3      	ldr	r3, [r4, #8]
 8004488:	6922      	ldr	r2, [r4, #16]
 800448a:	bf0c      	ite	eq
 800448c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004490:	2500      	movne	r5, #0
 8004492:	4293      	cmp	r3, r2
 8004494:	bfc4      	itt	gt
 8004496:	1a9b      	subgt	r3, r3, r2
 8004498:	18ed      	addgt	r5, r5, r3
 800449a:	f04f 0900 	mov.w	r9, #0
 800449e:	341a      	adds	r4, #26
 80044a0:	454d      	cmp	r5, r9
 80044a2:	d11a      	bne.n	80044da <_printf_common+0xd6>
 80044a4:	2000      	movs	r0, #0
 80044a6:	e008      	b.n	80044ba <_printf_common+0xb6>
 80044a8:	2301      	movs	r3, #1
 80044aa:	4652      	mov	r2, sl
 80044ac:	4639      	mov	r1, r7
 80044ae:	4630      	mov	r0, r6
 80044b0:	47c0      	blx	r8
 80044b2:	3001      	adds	r0, #1
 80044b4:	d103      	bne.n	80044be <_printf_common+0xba>
 80044b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80044ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044be:	3501      	adds	r5, #1
 80044c0:	e7c3      	b.n	800444a <_printf_common+0x46>
 80044c2:	18e1      	adds	r1, r4, r3
 80044c4:	1c5a      	adds	r2, r3, #1
 80044c6:	2030      	movs	r0, #48	; 0x30
 80044c8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80044cc:	4422      	add	r2, r4
 80044ce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80044d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80044d6:	3302      	adds	r3, #2
 80044d8:	e7c5      	b.n	8004466 <_printf_common+0x62>
 80044da:	2301      	movs	r3, #1
 80044dc:	4622      	mov	r2, r4
 80044de:	4639      	mov	r1, r7
 80044e0:	4630      	mov	r0, r6
 80044e2:	47c0      	blx	r8
 80044e4:	3001      	adds	r0, #1
 80044e6:	d0e6      	beq.n	80044b6 <_printf_common+0xb2>
 80044e8:	f109 0901 	add.w	r9, r9, #1
 80044ec:	e7d8      	b.n	80044a0 <_printf_common+0x9c>
	...

080044f0 <_printf_i>:
 80044f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80044f4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80044f8:	460c      	mov	r4, r1
 80044fa:	7e09      	ldrb	r1, [r1, #24]
 80044fc:	b085      	sub	sp, #20
 80044fe:	296e      	cmp	r1, #110	; 0x6e
 8004500:	4617      	mov	r7, r2
 8004502:	4606      	mov	r6, r0
 8004504:	4698      	mov	r8, r3
 8004506:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004508:	f000 80b3 	beq.w	8004672 <_printf_i+0x182>
 800450c:	d822      	bhi.n	8004554 <_printf_i+0x64>
 800450e:	2963      	cmp	r1, #99	; 0x63
 8004510:	d036      	beq.n	8004580 <_printf_i+0x90>
 8004512:	d80a      	bhi.n	800452a <_printf_i+0x3a>
 8004514:	2900      	cmp	r1, #0
 8004516:	f000 80b9 	beq.w	800468c <_printf_i+0x19c>
 800451a:	2958      	cmp	r1, #88	; 0x58
 800451c:	f000 8083 	beq.w	8004626 <_printf_i+0x136>
 8004520:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004524:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004528:	e032      	b.n	8004590 <_printf_i+0xa0>
 800452a:	2964      	cmp	r1, #100	; 0x64
 800452c:	d001      	beq.n	8004532 <_printf_i+0x42>
 800452e:	2969      	cmp	r1, #105	; 0x69
 8004530:	d1f6      	bne.n	8004520 <_printf_i+0x30>
 8004532:	6820      	ldr	r0, [r4, #0]
 8004534:	6813      	ldr	r3, [r2, #0]
 8004536:	0605      	lsls	r5, r0, #24
 8004538:	f103 0104 	add.w	r1, r3, #4
 800453c:	d52a      	bpl.n	8004594 <_printf_i+0xa4>
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	6011      	str	r1, [r2, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	da03      	bge.n	800454e <_printf_i+0x5e>
 8004546:	222d      	movs	r2, #45	; 0x2d
 8004548:	425b      	negs	r3, r3
 800454a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800454e:	486f      	ldr	r0, [pc, #444]	; (800470c <_printf_i+0x21c>)
 8004550:	220a      	movs	r2, #10
 8004552:	e039      	b.n	80045c8 <_printf_i+0xd8>
 8004554:	2973      	cmp	r1, #115	; 0x73
 8004556:	f000 809d 	beq.w	8004694 <_printf_i+0x1a4>
 800455a:	d808      	bhi.n	800456e <_printf_i+0x7e>
 800455c:	296f      	cmp	r1, #111	; 0x6f
 800455e:	d020      	beq.n	80045a2 <_printf_i+0xb2>
 8004560:	2970      	cmp	r1, #112	; 0x70
 8004562:	d1dd      	bne.n	8004520 <_printf_i+0x30>
 8004564:	6823      	ldr	r3, [r4, #0]
 8004566:	f043 0320 	orr.w	r3, r3, #32
 800456a:	6023      	str	r3, [r4, #0]
 800456c:	e003      	b.n	8004576 <_printf_i+0x86>
 800456e:	2975      	cmp	r1, #117	; 0x75
 8004570:	d017      	beq.n	80045a2 <_printf_i+0xb2>
 8004572:	2978      	cmp	r1, #120	; 0x78
 8004574:	d1d4      	bne.n	8004520 <_printf_i+0x30>
 8004576:	2378      	movs	r3, #120	; 0x78
 8004578:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800457c:	4864      	ldr	r0, [pc, #400]	; (8004710 <_printf_i+0x220>)
 800457e:	e055      	b.n	800462c <_printf_i+0x13c>
 8004580:	6813      	ldr	r3, [r2, #0]
 8004582:	1d19      	adds	r1, r3, #4
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	6011      	str	r1, [r2, #0]
 8004588:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800458c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004590:	2301      	movs	r3, #1
 8004592:	e08c      	b.n	80046ae <_printf_i+0x1be>
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	6011      	str	r1, [r2, #0]
 8004598:	f010 0f40 	tst.w	r0, #64	; 0x40
 800459c:	bf18      	it	ne
 800459e:	b21b      	sxthne	r3, r3
 80045a0:	e7cf      	b.n	8004542 <_printf_i+0x52>
 80045a2:	6813      	ldr	r3, [r2, #0]
 80045a4:	6825      	ldr	r5, [r4, #0]
 80045a6:	1d18      	adds	r0, r3, #4
 80045a8:	6010      	str	r0, [r2, #0]
 80045aa:	0628      	lsls	r0, r5, #24
 80045ac:	d501      	bpl.n	80045b2 <_printf_i+0xc2>
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	e002      	b.n	80045b8 <_printf_i+0xc8>
 80045b2:	0668      	lsls	r0, r5, #25
 80045b4:	d5fb      	bpl.n	80045ae <_printf_i+0xbe>
 80045b6:	881b      	ldrh	r3, [r3, #0]
 80045b8:	4854      	ldr	r0, [pc, #336]	; (800470c <_printf_i+0x21c>)
 80045ba:	296f      	cmp	r1, #111	; 0x6f
 80045bc:	bf14      	ite	ne
 80045be:	220a      	movne	r2, #10
 80045c0:	2208      	moveq	r2, #8
 80045c2:	2100      	movs	r1, #0
 80045c4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80045c8:	6865      	ldr	r5, [r4, #4]
 80045ca:	60a5      	str	r5, [r4, #8]
 80045cc:	2d00      	cmp	r5, #0
 80045ce:	f2c0 8095 	blt.w	80046fc <_printf_i+0x20c>
 80045d2:	6821      	ldr	r1, [r4, #0]
 80045d4:	f021 0104 	bic.w	r1, r1, #4
 80045d8:	6021      	str	r1, [r4, #0]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d13d      	bne.n	800465a <_printf_i+0x16a>
 80045de:	2d00      	cmp	r5, #0
 80045e0:	f040 808e 	bne.w	8004700 <_printf_i+0x210>
 80045e4:	4665      	mov	r5, ip
 80045e6:	2a08      	cmp	r2, #8
 80045e8:	d10b      	bne.n	8004602 <_printf_i+0x112>
 80045ea:	6823      	ldr	r3, [r4, #0]
 80045ec:	07db      	lsls	r3, r3, #31
 80045ee:	d508      	bpl.n	8004602 <_printf_i+0x112>
 80045f0:	6923      	ldr	r3, [r4, #16]
 80045f2:	6862      	ldr	r2, [r4, #4]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	bfde      	ittt	le
 80045f8:	2330      	movle	r3, #48	; 0x30
 80045fa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80045fe:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004602:	ebac 0305 	sub.w	r3, ip, r5
 8004606:	6123      	str	r3, [r4, #16]
 8004608:	f8cd 8000 	str.w	r8, [sp]
 800460c:	463b      	mov	r3, r7
 800460e:	aa03      	add	r2, sp, #12
 8004610:	4621      	mov	r1, r4
 8004612:	4630      	mov	r0, r6
 8004614:	f7ff fef6 	bl	8004404 <_printf_common>
 8004618:	3001      	adds	r0, #1
 800461a:	d14d      	bne.n	80046b8 <_printf_i+0x1c8>
 800461c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004620:	b005      	add	sp, #20
 8004622:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004626:	4839      	ldr	r0, [pc, #228]	; (800470c <_printf_i+0x21c>)
 8004628:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800462c:	6813      	ldr	r3, [r2, #0]
 800462e:	6821      	ldr	r1, [r4, #0]
 8004630:	1d1d      	adds	r5, r3, #4
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	6015      	str	r5, [r2, #0]
 8004636:	060a      	lsls	r2, r1, #24
 8004638:	d50b      	bpl.n	8004652 <_printf_i+0x162>
 800463a:	07ca      	lsls	r2, r1, #31
 800463c:	bf44      	itt	mi
 800463e:	f041 0120 	orrmi.w	r1, r1, #32
 8004642:	6021      	strmi	r1, [r4, #0]
 8004644:	b91b      	cbnz	r3, 800464e <_printf_i+0x15e>
 8004646:	6822      	ldr	r2, [r4, #0]
 8004648:	f022 0220 	bic.w	r2, r2, #32
 800464c:	6022      	str	r2, [r4, #0]
 800464e:	2210      	movs	r2, #16
 8004650:	e7b7      	b.n	80045c2 <_printf_i+0xd2>
 8004652:	064d      	lsls	r5, r1, #25
 8004654:	bf48      	it	mi
 8004656:	b29b      	uxthmi	r3, r3
 8004658:	e7ef      	b.n	800463a <_printf_i+0x14a>
 800465a:	4665      	mov	r5, ip
 800465c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004660:	fb02 3311 	mls	r3, r2, r1, r3
 8004664:	5cc3      	ldrb	r3, [r0, r3]
 8004666:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800466a:	460b      	mov	r3, r1
 800466c:	2900      	cmp	r1, #0
 800466e:	d1f5      	bne.n	800465c <_printf_i+0x16c>
 8004670:	e7b9      	b.n	80045e6 <_printf_i+0xf6>
 8004672:	6813      	ldr	r3, [r2, #0]
 8004674:	6825      	ldr	r5, [r4, #0]
 8004676:	6961      	ldr	r1, [r4, #20]
 8004678:	1d18      	adds	r0, r3, #4
 800467a:	6010      	str	r0, [r2, #0]
 800467c:	0628      	lsls	r0, r5, #24
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	d501      	bpl.n	8004686 <_printf_i+0x196>
 8004682:	6019      	str	r1, [r3, #0]
 8004684:	e002      	b.n	800468c <_printf_i+0x19c>
 8004686:	066a      	lsls	r2, r5, #25
 8004688:	d5fb      	bpl.n	8004682 <_printf_i+0x192>
 800468a:	8019      	strh	r1, [r3, #0]
 800468c:	2300      	movs	r3, #0
 800468e:	6123      	str	r3, [r4, #16]
 8004690:	4665      	mov	r5, ip
 8004692:	e7b9      	b.n	8004608 <_printf_i+0x118>
 8004694:	6813      	ldr	r3, [r2, #0]
 8004696:	1d19      	adds	r1, r3, #4
 8004698:	6011      	str	r1, [r2, #0]
 800469a:	681d      	ldr	r5, [r3, #0]
 800469c:	6862      	ldr	r2, [r4, #4]
 800469e:	2100      	movs	r1, #0
 80046a0:	4628      	mov	r0, r5
 80046a2:	f7fb fda5 	bl	80001f0 <memchr>
 80046a6:	b108      	cbz	r0, 80046ac <_printf_i+0x1bc>
 80046a8:	1b40      	subs	r0, r0, r5
 80046aa:	6060      	str	r0, [r4, #4]
 80046ac:	6863      	ldr	r3, [r4, #4]
 80046ae:	6123      	str	r3, [r4, #16]
 80046b0:	2300      	movs	r3, #0
 80046b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046b6:	e7a7      	b.n	8004608 <_printf_i+0x118>
 80046b8:	6923      	ldr	r3, [r4, #16]
 80046ba:	462a      	mov	r2, r5
 80046bc:	4639      	mov	r1, r7
 80046be:	4630      	mov	r0, r6
 80046c0:	47c0      	blx	r8
 80046c2:	3001      	adds	r0, #1
 80046c4:	d0aa      	beq.n	800461c <_printf_i+0x12c>
 80046c6:	6823      	ldr	r3, [r4, #0]
 80046c8:	079b      	lsls	r3, r3, #30
 80046ca:	d413      	bmi.n	80046f4 <_printf_i+0x204>
 80046cc:	68e0      	ldr	r0, [r4, #12]
 80046ce:	9b03      	ldr	r3, [sp, #12]
 80046d0:	4298      	cmp	r0, r3
 80046d2:	bfb8      	it	lt
 80046d4:	4618      	movlt	r0, r3
 80046d6:	e7a3      	b.n	8004620 <_printf_i+0x130>
 80046d8:	2301      	movs	r3, #1
 80046da:	464a      	mov	r2, r9
 80046dc:	4639      	mov	r1, r7
 80046de:	4630      	mov	r0, r6
 80046e0:	47c0      	blx	r8
 80046e2:	3001      	adds	r0, #1
 80046e4:	d09a      	beq.n	800461c <_printf_i+0x12c>
 80046e6:	3501      	adds	r5, #1
 80046e8:	68e3      	ldr	r3, [r4, #12]
 80046ea:	9a03      	ldr	r2, [sp, #12]
 80046ec:	1a9b      	subs	r3, r3, r2
 80046ee:	42ab      	cmp	r3, r5
 80046f0:	dcf2      	bgt.n	80046d8 <_printf_i+0x1e8>
 80046f2:	e7eb      	b.n	80046cc <_printf_i+0x1dc>
 80046f4:	2500      	movs	r5, #0
 80046f6:	f104 0919 	add.w	r9, r4, #25
 80046fa:	e7f5      	b.n	80046e8 <_printf_i+0x1f8>
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d1ac      	bne.n	800465a <_printf_i+0x16a>
 8004700:	7803      	ldrb	r3, [r0, #0]
 8004702:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004706:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800470a:	e76c      	b.n	80045e6 <_printf_i+0xf6>
 800470c:	08004eb9 	.word	0x08004eb9
 8004710:	08004eca 	.word	0x08004eca

08004714 <memmove>:
 8004714:	4288      	cmp	r0, r1
 8004716:	b510      	push	{r4, lr}
 8004718:	eb01 0302 	add.w	r3, r1, r2
 800471c:	d807      	bhi.n	800472e <memmove+0x1a>
 800471e:	1e42      	subs	r2, r0, #1
 8004720:	4299      	cmp	r1, r3
 8004722:	d00a      	beq.n	800473a <memmove+0x26>
 8004724:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004728:	f802 4f01 	strb.w	r4, [r2, #1]!
 800472c:	e7f8      	b.n	8004720 <memmove+0xc>
 800472e:	4283      	cmp	r3, r0
 8004730:	d9f5      	bls.n	800471e <memmove+0xa>
 8004732:	1881      	adds	r1, r0, r2
 8004734:	1ad2      	subs	r2, r2, r3
 8004736:	42d3      	cmn	r3, r2
 8004738:	d100      	bne.n	800473c <memmove+0x28>
 800473a:	bd10      	pop	{r4, pc}
 800473c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004740:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004744:	e7f7      	b.n	8004736 <memmove+0x22>
	...

08004748 <_free_r>:
 8004748:	b538      	push	{r3, r4, r5, lr}
 800474a:	4605      	mov	r5, r0
 800474c:	2900      	cmp	r1, #0
 800474e:	d045      	beq.n	80047dc <_free_r+0x94>
 8004750:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004754:	1f0c      	subs	r4, r1, #4
 8004756:	2b00      	cmp	r3, #0
 8004758:	bfb8      	it	lt
 800475a:	18e4      	addlt	r4, r4, r3
 800475c:	f000 f8d2 	bl	8004904 <__malloc_lock>
 8004760:	4a1f      	ldr	r2, [pc, #124]	; (80047e0 <_free_r+0x98>)
 8004762:	6813      	ldr	r3, [r2, #0]
 8004764:	4610      	mov	r0, r2
 8004766:	b933      	cbnz	r3, 8004776 <_free_r+0x2e>
 8004768:	6063      	str	r3, [r4, #4]
 800476a:	6014      	str	r4, [r2, #0]
 800476c:	4628      	mov	r0, r5
 800476e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004772:	f000 b8c8 	b.w	8004906 <__malloc_unlock>
 8004776:	42a3      	cmp	r3, r4
 8004778:	d90c      	bls.n	8004794 <_free_r+0x4c>
 800477a:	6821      	ldr	r1, [r4, #0]
 800477c:	1862      	adds	r2, r4, r1
 800477e:	4293      	cmp	r3, r2
 8004780:	bf04      	itt	eq
 8004782:	681a      	ldreq	r2, [r3, #0]
 8004784:	685b      	ldreq	r3, [r3, #4]
 8004786:	6063      	str	r3, [r4, #4]
 8004788:	bf04      	itt	eq
 800478a:	1852      	addeq	r2, r2, r1
 800478c:	6022      	streq	r2, [r4, #0]
 800478e:	6004      	str	r4, [r0, #0]
 8004790:	e7ec      	b.n	800476c <_free_r+0x24>
 8004792:	4613      	mov	r3, r2
 8004794:	685a      	ldr	r2, [r3, #4]
 8004796:	b10a      	cbz	r2, 800479c <_free_r+0x54>
 8004798:	42a2      	cmp	r2, r4
 800479a:	d9fa      	bls.n	8004792 <_free_r+0x4a>
 800479c:	6819      	ldr	r1, [r3, #0]
 800479e:	1858      	adds	r0, r3, r1
 80047a0:	42a0      	cmp	r0, r4
 80047a2:	d10b      	bne.n	80047bc <_free_r+0x74>
 80047a4:	6820      	ldr	r0, [r4, #0]
 80047a6:	4401      	add	r1, r0
 80047a8:	1858      	adds	r0, r3, r1
 80047aa:	4282      	cmp	r2, r0
 80047ac:	6019      	str	r1, [r3, #0]
 80047ae:	d1dd      	bne.n	800476c <_free_r+0x24>
 80047b0:	6810      	ldr	r0, [r2, #0]
 80047b2:	6852      	ldr	r2, [r2, #4]
 80047b4:	605a      	str	r2, [r3, #4]
 80047b6:	4401      	add	r1, r0
 80047b8:	6019      	str	r1, [r3, #0]
 80047ba:	e7d7      	b.n	800476c <_free_r+0x24>
 80047bc:	d902      	bls.n	80047c4 <_free_r+0x7c>
 80047be:	230c      	movs	r3, #12
 80047c0:	602b      	str	r3, [r5, #0]
 80047c2:	e7d3      	b.n	800476c <_free_r+0x24>
 80047c4:	6820      	ldr	r0, [r4, #0]
 80047c6:	1821      	adds	r1, r4, r0
 80047c8:	428a      	cmp	r2, r1
 80047ca:	bf04      	itt	eq
 80047cc:	6811      	ldreq	r1, [r2, #0]
 80047ce:	6852      	ldreq	r2, [r2, #4]
 80047d0:	6062      	str	r2, [r4, #4]
 80047d2:	bf04      	itt	eq
 80047d4:	1809      	addeq	r1, r1, r0
 80047d6:	6021      	streq	r1, [r4, #0]
 80047d8:	605c      	str	r4, [r3, #4]
 80047da:	e7c7      	b.n	800476c <_free_r+0x24>
 80047dc:	bd38      	pop	{r3, r4, r5, pc}
 80047de:	bf00      	nop
 80047e0:	20000160 	.word	0x20000160

080047e4 <_malloc_r>:
 80047e4:	b570      	push	{r4, r5, r6, lr}
 80047e6:	1ccd      	adds	r5, r1, #3
 80047e8:	f025 0503 	bic.w	r5, r5, #3
 80047ec:	3508      	adds	r5, #8
 80047ee:	2d0c      	cmp	r5, #12
 80047f0:	bf38      	it	cc
 80047f2:	250c      	movcc	r5, #12
 80047f4:	2d00      	cmp	r5, #0
 80047f6:	4606      	mov	r6, r0
 80047f8:	db01      	blt.n	80047fe <_malloc_r+0x1a>
 80047fa:	42a9      	cmp	r1, r5
 80047fc:	d903      	bls.n	8004806 <_malloc_r+0x22>
 80047fe:	230c      	movs	r3, #12
 8004800:	6033      	str	r3, [r6, #0]
 8004802:	2000      	movs	r0, #0
 8004804:	bd70      	pop	{r4, r5, r6, pc}
 8004806:	f000 f87d 	bl	8004904 <__malloc_lock>
 800480a:	4a21      	ldr	r2, [pc, #132]	; (8004890 <_malloc_r+0xac>)
 800480c:	6814      	ldr	r4, [r2, #0]
 800480e:	4621      	mov	r1, r4
 8004810:	b991      	cbnz	r1, 8004838 <_malloc_r+0x54>
 8004812:	4c20      	ldr	r4, [pc, #128]	; (8004894 <_malloc_r+0xb0>)
 8004814:	6823      	ldr	r3, [r4, #0]
 8004816:	b91b      	cbnz	r3, 8004820 <_malloc_r+0x3c>
 8004818:	4630      	mov	r0, r6
 800481a:	f000 f863 	bl	80048e4 <_sbrk_r>
 800481e:	6020      	str	r0, [r4, #0]
 8004820:	4629      	mov	r1, r5
 8004822:	4630      	mov	r0, r6
 8004824:	f000 f85e 	bl	80048e4 <_sbrk_r>
 8004828:	1c43      	adds	r3, r0, #1
 800482a:	d124      	bne.n	8004876 <_malloc_r+0x92>
 800482c:	230c      	movs	r3, #12
 800482e:	6033      	str	r3, [r6, #0]
 8004830:	4630      	mov	r0, r6
 8004832:	f000 f868 	bl	8004906 <__malloc_unlock>
 8004836:	e7e4      	b.n	8004802 <_malloc_r+0x1e>
 8004838:	680b      	ldr	r3, [r1, #0]
 800483a:	1b5b      	subs	r3, r3, r5
 800483c:	d418      	bmi.n	8004870 <_malloc_r+0x8c>
 800483e:	2b0b      	cmp	r3, #11
 8004840:	d90f      	bls.n	8004862 <_malloc_r+0x7e>
 8004842:	600b      	str	r3, [r1, #0]
 8004844:	50cd      	str	r5, [r1, r3]
 8004846:	18cc      	adds	r4, r1, r3
 8004848:	4630      	mov	r0, r6
 800484a:	f000 f85c 	bl	8004906 <__malloc_unlock>
 800484e:	f104 000b 	add.w	r0, r4, #11
 8004852:	1d23      	adds	r3, r4, #4
 8004854:	f020 0007 	bic.w	r0, r0, #7
 8004858:	1ac3      	subs	r3, r0, r3
 800485a:	d0d3      	beq.n	8004804 <_malloc_r+0x20>
 800485c:	425a      	negs	r2, r3
 800485e:	50e2      	str	r2, [r4, r3]
 8004860:	e7d0      	b.n	8004804 <_malloc_r+0x20>
 8004862:	428c      	cmp	r4, r1
 8004864:	684b      	ldr	r3, [r1, #4]
 8004866:	bf16      	itet	ne
 8004868:	6063      	strne	r3, [r4, #4]
 800486a:	6013      	streq	r3, [r2, #0]
 800486c:	460c      	movne	r4, r1
 800486e:	e7eb      	b.n	8004848 <_malloc_r+0x64>
 8004870:	460c      	mov	r4, r1
 8004872:	6849      	ldr	r1, [r1, #4]
 8004874:	e7cc      	b.n	8004810 <_malloc_r+0x2c>
 8004876:	1cc4      	adds	r4, r0, #3
 8004878:	f024 0403 	bic.w	r4, r4, #3
 800487c:	42a0      	cmp	r0, r4
 800487e:	d005      	beq.n	800488c <_malloc_r+0xa8>
 8004880:	1a21      	subs	r1, r4, r0
 8004882:	4630      	mov	r0, r6
 8004884:	f000 f82e 	bl	80048e4 <_sbrk_r>
 8004888:	3001      	adds	r0, #1
 800488a:	d0cf      	beq.n	800482c <_malloc_r+0x48>
 800488c:	6025      	str	r5, [r4, #0]
 800488e:	e7db      	b.n	8004848 <_malloc_r+0x64>
 8004890:	20000160 	.word	0x20000160
 8004894:	20000164 	.word	0x20000164

08004898 <_realloc_r>:
 8004898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800489a:	4607      	mov	r7, r0
 800489c:	4614      	mov	r4, r2
 800489e:	460e      	mov	r6, r1
 80048a0:	b921      	cbnz	r1, 80048ac <_realloc_r+0x14>
 80048a2:	4611      	mov	r1, r2
 80048a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80048a8:	f7ff bf9c 	b.w	80047e4 <_malloc_r>
 80048ac:	b922      	cbnz	r2, 80048b8 <_realloc_r+0x20>
 80048ae:	f7ff ff4b 	bl	8004748 <_free_r>
 80048b2:	4625      	mov	r5, r4
 80048b4:	4628      	mov	r0, r5
 80048b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048b8:	f000 f826 	bl	8004908 <_malloc_usable_size_r>
 80048bc:	42a0      	cmp	r0, r4
 80048be:	d20f      	bcs.n	80048e0 <_realloc_r+0x48>
 80048c0:	4621      	mov	r1, r4
 80048c2:	4638      	mov	r0, r7
 80048c4:	f7ff ff8e 	bl	80047e4 <_malloc_r>
 80048c8:	4605      	mov	r5, r0
 80048ca:	2800      	cmp	r0, #0
 80048cc:	d0f2      	beq.n	80048b4 <_realloc_r+0x1c>
 80048ce:	4631      	mov	r1, r6
 80048d0:	4622      	mov	r2, r4
 80048d2:	f7ff fc11 	bl	80040f8 <memcpy>
 80048d6:	4631      	mov	r1, r6
 80048d8:	4638      	mov	r0, r7
 80048da:	f7ff ff35 	bl	8004748 <_free_r>
 80048de:	e7e9      	b.n	80048b4 <_realloc_r+0x1c>
 80048e0:	4635      	mov	r5, r6
 80048e2:	e7e7      	b.n	80048b4 <_realloc_r+0x1c>

080048e4 <_sbrk_r>:
 80048e4:	b538      	push	{r3, r4, r5, lr}
 80048e6:	4c06      	ldr	r4, [pc, #24]	; (8004900 <_sbrk_r+0x1c>)
 80048e8:	2300      	movs	r3, #0
 80048ea:	4605      	mov	r5, r0
 80048ec:	4608      	mov	r0, r1
 80048ee:	6023      	str	r3, [r4, #0]
 80048f0:	f7fd f9f6 	bl	8001ce0 <_sbrk>
 80048f4:	1c43      	adds	r3, r0, #1
 80048f6:	d102      	bne.n	80048fe <_sbrk_r+0x1a>
 80048f8:	6823      	ldr	r3, [r4, #0]
 80048fa:	b103      	cbz	r3, 80048fe <_sbrk_r+0x1a>
 80048fc:	602b      	str	r3, [r5, #0]
 80048fe:	bd38      	pop	{r3, r4, r5, pc}
 8004900:	20000204 	.word	0x20000204

08004904 <__malloc_lock>:
 8004904:	4770      	bx	lr

08004906 <__malloc_unlock>:
 8004906:	4770      	bx	lr

08004908 <_malloc_usable_size_r>:
 8004908:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800490c:	1f18      	subs	r0, r3, #4
 800490e:	2b00      	cmp	r3, #0
 8004910:	bfbc      	itt	lt
 8004912:	580b      	ldrlt	r3, [r1, r0]
 8004914:	18c0      	addlt	r0, r0, r3
 8004916:	4770      	bx	lr

08004918 <_init>:
 8004918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800491a:	bf00      	nop
 800491c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800491e:	bc08      	pop	{r3}
 8004920:	469e      	mov	lr, r3
 8004922:	4770      	bx	lr

08004924 <_fini>:
 8004924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004926:	bf00      	nop
 8004928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800492a:	bc08      	pop	{r3}
 800492c:	469e      	mov	lr, r3
 800492e:	4770      	bx	lr
